<?xml version="1.0" encoding="UTF-8"?>
<ruleset xmlns="http://pmd.sourceforge.net/ruleset/3.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         name="APEX"
         xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/3.0.0 http://pmd.sourceforge.net/ruleset_3_0_0.xsd">
   <description>All rules for the apex language</description>
   <rule class="net.sourceforge.pmd.lang.apex.rule.ApexXPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_apex_braces.html#ifstmtsmustusebraces"
         language="apex"
         message="Avoid using if statements without curly braces"
         name="IfStmtsMustUseBraces"
         since="5.6.0">
      <description>
Avoid using if statements without using braces to surround the code block. If the code
formatting or indentation is lost then it becomes difficult to separate the code being
controlled from the rest.
    </description>
      <priority>3</priority>
      <properties>
        <property name="xpath">
            <value>

//IfBlockStatement/BlockStatement[@CurlyBrace='false']

            </value>
        </property>
      </properties>
      <example>
 
if (foo)    // not recommended
    x++;

if (foo) {  // preferred approach
    x++;
}

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.apex.rule.ApexXPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_apex_braces.html#whileloopsmustusebraces"
         language="apex"
         message="Avoid using 'while' statements without curly braces"
         name="WhileLoopsMustUseBraces"
         since="5.6.0">
      <description>
Avoid using 'while' statements without using braces to surround the code block. If the code
formatting or indentation is lost then it becomes difficult to separate the code being
controlled from the rest.
    </description>
      <priority>3</priority>
      <properties>
        <property name="xpath">
            <value>

//WhileLoopStatement/BlockStatement[@CurlyBrace='false']

            </value>
        </property>
      </properties>
      <example>

while (true)    // not recommended
    x++;

while (true) {  // preferred approach
    x++;
}

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.apex.rule.ApexXPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_apex_braces.html#ifelsestmtsmustusebraces"
         language="apex"
         message="Avoid using 'if...else' statements without curly braces"
         name="IfElseStmtsMustUseBraces"
         since="5.6.0">
      <description>
Avoid using if..else statements without using surrounding braces. If the code formatting
or indentation is lost then it becomes difficult to separate the code being controlled
from the rest.
    </description>
      <priority>3</priority>
      <properties>
        <property name="xpath">
            <value>

//IfBlockStatement/BlockStatement[@CurlyBrace='false'][count(child::*) &gt; 0]
|
//IfElseBlockStatement/BlockStatement[@CurlyBrace='false'][count(child::*) &gt; 0]

            </value>
        </property>
      </properties>
      <example>

// this is OK
if (foo) x++;

// but this is not
if (foo)
    x = x+1;
else
    x = x-1;

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.apex.rule.ApexXPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_apex_braces.html#forloopsmustusebraces"
         language="apex"
         message="Avoid using 'for' statements without curly braces"
         name="ForLoopsMustUseBraces"
         since="5.6.0">
      <description>
Avoid using 'for' statements without using surrounding braces. If the code formatting or
indentation is lost then it becomes difficult to separate the code being controlled
from the rest.
    </description>
      <priority>3</priority>
      <properties>
        <property name="xpath">
            <value>

//ForLoopStatement/BlockStatement[@CurlyBrace='false']
|
//ForEachStatement/BlockStatement[@CurlyBrace='false']

            </value>
        </property>
      </properties>
      <example>

for (int i = 0; i &lt; 42; i++) // not recommended
    foo();

for (int i = 0; i &lt; 42; i++) { // preferred approach
    foo();
}

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.apex.rule.apexunit.ApexUnitTestClassShouldHaveAssertsRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_apex_apexunit.html#apexunittestclassshouldhaveasserts"
         message="Apex unit tests should System.assert() or assertEquals() or assertNotEquals()"
         name="ApexUnitTestClassShouldHaveAsserts"
         since="5.5.1">
        <description>
            Apex unit tests should include at least one assertion.  This makes the tests more robust, and using assert
            with messages provide the developer a clearer idea of what the test does.
        </description>
        <priority>3</priority>
        <example>
            
@isTest
public class Foo {
   public static testMethod void testSomething() {
      Account a = null;
   // This is better than having a NullPointerException
   // System.assertNotEquals(a, null, 'account not found');
   a.toString();
   }
}
    
        </example>
    </rule>
   <rule class="net.sourceforge.pmd.lang.apex.rule.apexunit.ApexUnitTestShouldNotUseSeeAllDataTrueRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_apex_apexunit.html#apexunittestshouldnotuseseealldatatrue"
         message="Apex unit tests should not use @isTest(seeAllData = true)"
         name="ApexUnitTestShouldNotUseSeeAllDataTrue"
         since="5.5.1">
        <description>
            Apex unit tests should not use @isTest(seeAllData=true) because it opens up the existing database data for unexpected modification by tests.
        </description>
        <priority>3</priority>
        <example>
            
@isTest(seeAllData = true)
public class Foo {
   public static testMethod void testSomething() {
      Account a = null;
   // This is better than having a NullPointerException
   // System.assertNotEquals(a, null, 'account not found');
   a.toString();
   }
}
    
        </example>
    </rule>
   <rule message="Avoid really long classes (lines of code)"
         ref="rulesets/apex/complexity.xml/ExcessiveClassLength">
      <priority>3</priority>
      <properties>
         <property name="minimum" value="1000"/>
         <!-- relevant for Code Climate output only -->
         <property name="cc_categories" value="Complexity"/>
         <property name="cc_remediation_points_multiplier" value="150"/>
         <property name="cc_block_highlighting" value="false"/>
      </properties>
   </rule>
   <rule message="Avoid long parameter lists"
         ref="rulesets/apex/complexity.xml/ExcessiveParameterList">
      <priority>3</priority>
      <properties>
         <property name="minimum" value="4"/>
         <!-- relevant for Code Climate output only -->
         <property name="cc_categories" value="Complexity"/>
         <property name="cc_remediation_points_multiplier" value="50"/>
         <property name="cc_block_highlighting" value="false"/>
      </properties>
   </rule>
   <rule message="This class has too many public methods and attributes"
         ref="rulesets/apex/complexity.xml/ExcessivePublicCount">
      <priority>3</priority>
      <properties>
         <property name="minimum" value="25"/>
         <!-- relevant for Code Climate output only -->
         <property name="cc_categories" value="Complexity"/>
         <property name="cc_remediation_points_multiplier" value="150"/>
         <property name="cc_block_highlighting" value="false"/>
      </properties>
   </rule>
   <rule message="The constructor has an NCSS line count of {0}"
         ref="rulesets/apex/complexity.xml/NcssConstructorCount">
      <priority>3</priority>
      <properties>
         <property name="minimum" value="20"/>
         <!-- relevant for Code Climate output only -->
         <property name="cc_categories" value="Complexity"/>
         <property name="cc_remediation_points_multiplier" value="50"/>
         <property name="cc_block_highlighting" value="false"/>
      </properties>
   </rule>
   <rule message="The method {0}() has an NCSS line count of {1}"
         ref="rulesets/apex/complexity.xml/NcssMethodCount">
      <priority>3</priority>
      <properties>
         <property name="minimum" value="60"/>
         <!-- relevant for Code Climate output only -->
         <property name="cc_categories" value="Complexity"/>
         <property name="cc_remediation_points_multiplier" value="50"/>
         <property name="cc_block_highlighting" value="false"/>
      </properties>
   </rule>
   <rule message="The type has an NCSS line count of {0}"
         ref="rulesets/apex/complexity.xml/NcssTypeCount">
      <priority>3</priority>
      <properties>
         <property name="minimum" value="700"/>
         <!-- relevant for Code Climate output only -->
         <property name="cc_categories" value="Complexity"/>
         <property name="cc_remediation_points_multiplier" value="250"/>
         <property name="cc_block_highlighting" value="false"/>
      </properties>
   </rule>
   <rule message="The {0} ''{1}'' has a Standard Cyclomatic Complexity of {2}."
         ref="rulesets/apex/complexity.xml/StdCyclomaticComplexity">
      <priority>3</priority>
      <properties>
         <property name="reportLevel" value="10"/>
         <!-- relevant for Code Climate output only -->
         <property name="cc_categories" value="Complexity"/>
         <property name="cc_remediation_points_multiplier" value="250"/>
         <property name="cc_block_highlighting" value="false"/>
      </properties>
   </rule>
   <rule message="Too many fields" ref="rulesets/apex/complexity.xml/TooManyFields">
      <priority>3</priority>
      <properties>
         <property name="maxfields" value="20"/>
         <!-- relevant for Code Climate output only -->
         <property name="cc_categories" value="Complexity"/>
         <property name="cc_remediation_points_multiplier" value="200"/>
         <property name="cc_block_highlighting" value="false"/>
      </properties>
   </rule>
   <rule message="Deeply nested if..else statements are hard to read"
         ref="rulesets/apex/complexity.xml/AvoidDeeplyNestedIfStmts">
      <priority>3</priority>
      <properties>
         <property name="problemDepth" value="4"/>
         <!-- relevant for Code Climate output only -->
         <property name="cc_categories" value="Complexity"/>
         <property name="cc_remediation_points_multiplier" value="200"/>
         <property name="cc_block_highlighting" value="false"/>
      </properties>
   </rule>
   <rule message="Avoid Soql queries inside loops"
         ref="rulesets/apex/performance.xml/AvoidSoqlInLoops">
      <priority>3</priority>
      <properties>
         <!-- relevant for Code Climate output only -->
         <property name="cc_categories" value="Performance"/>
         <property name="cc_remediation_points_multiplier" value="150"/>
         <property name="cc_block_highlighting" value="false"/>
      </properties>
   </rule>
   <rule message="Avoid DML Statements inside loops"
         ref="rulesets/apex/performance.xml/AvoidDmlStatementsInLoops">
      <priority>3</priority>
      <properties>
         <!-- relevant for Code Climate output only -->
         <property name="cc_categories" value="Performance"/>
         <property name="cc_remediation_points_multiplier" value="150"/>
         <property name="cc_block_highlighting" value="false"/>
      </properties>
   </rule>
   <rule message="Avoid logic in triggers"
         ref="rulesets/apex/style.xml/AvoidLogicInTrigger">
      <priority>3</priority>
      <properties>
         <!-- relevant for Code Climate output only -->
         <property name="cc_categories" value="Style"/>
         <property name="cc_remediation_points_multiplier" value="200"/>
         <property name="cc_block_highlighting" value="false"/>
      </properties>
   </rule>
   <rule message="Avoid using global modifier"
         ref="rulesets/apex/style.xml/AvoidGlobalModifier">
      <priority>3</priority>
      <properties>
         <!-- relevant for Code Climate output only -->
         <property name="cc_categories" value="Style"/>
         <property name="cc_remediation_points_multiplier" value="100"/>
         <property name="cc_block_highlighting" value="false"/>
      </properties>
   </rule>
   <rule message="Class names should begin with an uppercase character"
         ref="rulesets/apex/style.xml/ClassNamingConventions">
      <priority>3</priority>
      <properties>
         <!-- relevant for Code Climate output only -->
         <property name="cc_categories" value="Style"/>
         <property name="cc_remediation_points_multiplier" value="5"/>
         <property name="cc_block_highlighting" value="false"/>
      </properties>
   </rule>
   <rule message="Method name does not begin with a lower case character."
         ref="rulesets/apex/style.xml/MethodNamingConventions">
      <priority>3</priority>
      <properties>
         <!-- relevant for Code Climate output only -->
         <property name="cc_categories" value="Style"/>
         <property name="cc_remediation_points_multiplier" value="1"/>
         <property name="cc_block_highlighting" value="false"/>
      </properties>
   </rule>
   <rule message="Classes should not have non-constructor methods with the same name as the class"
         ref="rulesets/apex/style.xml/MethodWithSameNameAsEnclosingClass">
      <priority>3</priority>
      <properties>
         <!-- relevant for Code Climate output only -->
         <property name="cc_categories" value="Style"/>
         <property name="cc_remediation_points_multiplier" value="50"/>
         <property name="cc_block_highlighting" value="false"/>
      </properties>
   </rule>
   <rule message="{0} variable {1} should begin with {2}"
         ref="rulesets/apex/style.xml/VariableNamingConventions">
      <priority>3</priority>
      <properties>
         <!-- relevant for Code Climate output only -->
         <property name="cc_categories" value="Style"/>
         <property name="cc_remediation_points_multiplier" value="5"/>
         <property name="cc_block_highlighting" value="false"/>
      </properties>
   </rule>
   <rule message="Apex unit test classes should have at least one System.assert() or assertEquals() or AssertNotEquals() call"
         ref="rulesets/apex/apexunit.xml/ApexUnitTestClassShouldHaveAsserts">
      <priority>3</priority>
      <properties>
         <!-- relevant for Code Climate output only -->
         <property name="cc_categories" value="Bug Risk"/>
         <property name="cc_remediation_points_multiplier" value="100"/>
         <property name="cc_block_highlighting" value="false"/>
      </properties>
   </rule>
   <rule message="@isTest(seeAllData=true) should not be used in Apex unit tests because it opens up the existing database data for unexpected modification by tests"
         ref="rulesets/apex/apexunit.xml/ApexUnitTestShouldNotUseSeeAllDataTrue">
      <priority>3</priority>
      <properties>
         <!-- relevant for Code Climate output only -->
         <property name="cc_categories" value="Bug Risk"/>
         <property name="cc_remediation_points_multiplier" value="100"/>
         <property name="cc_block_highlighting" value="false"/>
      </properties>
   </rule>
   <rule message="Apex classes should declare a sharing model if DML or SOQL is used"
         ref="rulesets/apex/security.xml/ApexSharingViolations">
      <priority>3</priority>
      <properties>
         <!-- relevant for Code Climate output only -->
         <property name="cc_categories" value="Security"/>
         <property name="cc_remediation_points_multiplier" value="5"/>
         <property name="cc_block_highlighting" value="false"/>
      </properties>
   </rule>
   <rule message="Apex callouts should use encrypted communication channels"
         ref="rulesets/apex/security.xml/ApexInsecureEndpoint">
      <priority>3</priority>
      <properties>
         <!-- relevant for Code Climate output only -->
         <property name="cc_categories" value="Security"/>
         <property name="cc_remediation_points_multiplier" value="50"/>
         <property name="cc_block_highlighting" value="false"/>
      </properties>
   </rule>
   <rule message="Avoid making DML operations in Apex class constructor/init method"
         ref="rulesets/apex/security.xml/ApexCSRF">
      <priority>3</priority>
      <properties>
         <!-- relevant for Code Climate output only -->
         <property name="cc_categories" value="Security"/>
         <property name="cc_remediation_points_multiplier" value="100"/>
         <property name="cc_block_highlighting" value="false"/>
      </properties>
   </rule>
   <rule message="Apex classes should safely redirect to a known location"
         ref="rulesets/apex/security.xml/ApexOpenRedirect">
      <priority>3</priority>
      <properties>
         <!-- relevant for Code Climate output only -->
         <property name="cc_categories" value="Security"/>
         <property name="cc_remediation_points_multiplier" value="50"/>
         <property name="cc_block_highlighting" value="false"/>
      </properties>
   </rule>
   <rule message="Apex classes should escape variables merged in DML query"
         ref="rulesets/apex/security.xml/ApexSOQLInjection">
      <priority>3</priority>
      <properties>
         <!-- relevant for Code Climate output only -->
         <property name="cc_categories" value="Security"/>
         <property name="cc_remediation_points_multiplier" value="20"/>
         <property name="cc_block_highlighting" value="false"/>
      </properties>
   </rule>
   <rule message="Apex classes should escape Strings obtained from URL parameters"
         ref="rulesets/apex/security.xml/ApexXSSFromURLParam">
      <priority>3</priority>
      <properties>
         <!-- relevant for Code Climate output only -->
         <property name="cc_categories" value="Security"/>
         <property name="cc_remediation_points_multiplier" value="20"/>
         <property name="cc_block_highlighting" value="false"/>
      </properties>
   </rule>
   <rule message="Apex classes should escape addError strings"
         ref="rulesets/apex/security.xml/ApexXSSFromEscapeFalse">
      <priority>3</priority>
      <properties>
         <!-- relevant for Code Climate output only -->
         <property name="cc_categories" value="Security"/>
         <property name="cc_remediation_points_multiplier" value="20"/>
         <property name="cc_block_highlighting" value="false"/>
      </properties>
   </rule>
   <rule message="Apex Crypto should use random IV/key"
         ref="rulesets/apex/security.xml/ApexBadCrypto">
      <priority>3</priority>
      <properties>
         <!-- relevant for Code Climate output only -->
         <property name="cc_categories" value="Security"/>
         <property name="cc_remediation_points_multiplier" value="50"/>
         <property name="cc_block_highlighting" value="false"/>
      </properties>
   </rule>
   <rule message="Validate CRUD permission before SOQL/DML operation"
         ref="rulesets/apex/security.xml/ApexCRUDViolation">
      <priority>3</priority>
      <properties>
         <!-- relevant for Code Climate output only -->
         <property name="cc_categories" value="Security"/>
         <property name="cc_remediation_points_multiplier" value="150"/>
         <property name="cc_block_highlighting" value="false"/>
      </properties>
   </rule>
   <rule message="Calling potentially dangerous method"
         ref="rulesets/apex/security.xml/ApexDangerousMethods">
      <priority>3</priority>
      <properties>
         <!-- relevant for Code Climate output only -->
         <property name="cc_categories" value="Security"/>
         <property name="cc_remediation_points_multiplier" value="50"/>
         <property name="cc_block_highlighting" value="false"/>
      </properties>
   </rule>
   <rule message="Consider using named credentials for authenticated callouts"
         ref="rulesets/apex/security.xml/ApexSuggestUsingNamedCred">
      <priority>3</priority>
      <properties>
         <!-- relevant for Code Climate output only -->
         <property name="cc_categories" value="Security"/>
         <property name="cc_remediation_points_multiplier" value="20"/>
         <property name="cc_block_highlighting" value="false"/>
      </properties>
   </rule>
   <rule message="Avoid using if statements without curly braces"
         ref="rulesets/apex/braces.xml/IfStmtsMustUseBraces">
    	<priority>3</priority>
		    <properties>
		   <!-- relevant for Code Climate output only -->
		   <property name="cc_categories" value="Style"/>
		       <property name="cc_remediation_points_multiplier" value="5"/>
		       <property name="cc_block_highlighting" value="false"/>
		    </properties>
     </rule>
   <rule message="Avoid using 'while' statements without curly braces"
         ref="rulesets/apex/braces.xml/WhileLoopsMustUseBraces">
    	<priority>3</priority>
		    <properties>
		   <!-- relevant for Code Climate output only -->
		   <property name="cc_categories" value="Style"/>
		       <property name="cc_remediation_points_multiplier" value="5"/>
		       <property name="cc_block_highlighting" value="false"/>
		    </properties>
     </rule>
   <rule message="Avoid using 'if...else' statements without curly braces"
         ref="rulesets/apex/braces.xml/IfElseStmtsMustUseBraces">
    	<priority>3</priority>
		    <properties>
		   <!-- relevant for Code Climate output only -->
		   <property name="cc_categories" value="Style"/>
		       <property name="cc_remediation_points_multiplier" value="5"/>
		       <property name="cc_block_highlighting" value="false"/>
		    </properties>
     </rule>
   <rule message="Avoid using 'for' statements without curly braces"
         ref="rulesets/apex/braces.xml/ForLoopsMustUseBraces">
    	<priority>3</priority>
		    <properties>
		   <!-- relevant for Code Climate output only -->
		   <property name="cc_categories" value="Style"/>
		       <property name="cc_remediation_points_multiplier" value="5"/>
		       <property name="cc_block_highlighting" value="false"/>
		    </properties>
     </rule>
   <rule class="net.sourceforge.pmd.lang.apex.rule.security.ApexSharingViolationsRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_apex_security.html#apexsharingviolations"
         message="Apex classes should declare a sharing model if DML or SOQL/SOSL is used"
         name="ApexSharingViolations"
         since="5.5.3">
      <description>
Detect classes declared without explicit sharing mode if DML methods are used. This
forces the developer to take access restrictions into account before modifying objects.
    </description>
      <priority>3</priority>
      <example>

public without sharing class Foo {
    // DML operation here
}

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.apex.rule.security.ApexOpenRedirectRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_apex_security.html#apexopenredirect"
         message="Apex classes should safely redirect to a known location"
         name="ApexOpenRedirect"
         since="5.5.3">
      <description>
Checks against redirects to user-controlled locations. This prevents attackers from
redirecting users to phishing sites.
    </description>
      <priority>3</priority>
      <example>

public without sharing class Foo {
    String unsafeLocation = ApexPage.getCurrentPage().getParameters.get('url_param');
    PageReference page() {
       return new PageReference(unsafeLocation);
    }
}

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.apex.rule.security.ApexInsecureEndpointRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_apex_security.html#apexinsecureendpoint"
         message="Apex callouts should use encrypted communication channels"
         name="ApexInsecureEndpoint"
         since="5.5.3">
      <description>
Checks against accessing endpoints under plain **http**. You should always use
**https** for security.
    </description>
      <priority>3</priority>
      <example>

public without sharing class Foo {
    void foo() {
        HttpRequest req = new HttpRequest();
        req.setEndpoint('http://localhost:com');
    }
}

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.apex.rule.security.ApexXSSFromURLParamRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_apex_security.html#apexxssfromurlparam"
         message="Apex classes should escape/sanitize Strings obtained from URL parameters"
         name="ApexXSSFromURLParam"
         since="5.5.3">
      <description>
Makes sure that all values obtained from URL parameters are properly escaped / sanitized
to avoid XSS attacks.
    </description>
      <priority>3</priority>
      <example>

public without sharing class Foo {
    String unescapedstring = ApexPage.getCurrentPage().getParameters.get('url_param');
    String usedLater = unescapedstring;
}

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.apex.rule.security.ApexXSSFromEscapeFalseRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_apex_security.html#apexxssfromescapefalse"
         message="Apex classes should escape Strings in error messages"
         name="ApexXSSFromEscapeFalse"
         since="5.5.3">
      <description>
Reports on calls to `addError` with disabled escaping. The message passed to `addError`
will be displayed directly to the user in the UI, making it prime ground for XSS
attacks if unescaped.
    </description>
      <priority>3</priority>
      <example>

public without sharing class Foo {
    Trigger.new[0].addError(vulnerableHTMLGoesHere, false);
}

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.apex.rule.security.ApexBadCryptoRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_apex_security.html#apexbadcrypto"
         message="Apex classes should use random IV/key"
         name="ApexBadCrypto"
         since="5.5.3">
      <description>
The rule makes sure you are using randomly generated IVs and keys for `Crypto` calls.
Hard-wiring these values greatly compromises the security of encrypted data.
    </description>
      <priority>3</priority>
      <example>

public without sharing class Foo {
    Blob hardCodedIV = Blob.valueOf('Hardcoded IV 123');
    Blob hardCodedKey = Blob.valueOf('0000000000000000');
    Blob data = Blob.valueOf('Data to be encrypted');
    Blob encrypted = Crypto.encrypt('AES128', hardCodedKey, hardCodedIV, data);
}

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.apex.rule.security.ApexCSRFRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_apex_security.html#apexcsrf"
         message="Avoid making DML operations in Apex class constructor/init method"
         name="ApexCSRF"
         since="5.5.3">
      <description>
Check to avoid making DML operations in Apex class constructor/init method. This prevents
modification of the database just by accessing a page.
    </description>
      <priority>3</priority>
      <example>

public class Foo {
    public init() {
        insert data;
    }

    public Foo() {
        insert data;
    }
}

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.apex.rule.security.ApexSOQLInjectionRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_apex_security.html#apexsoqlinjection"
         message="Avoid untrusted/unescaped variables in DML query"
         name="ApexSOQLInjection"
         since="5.5.3">
      <description>
Detects the usage of untrusted / unescaped variables in DML queries.
    </description>
      <priority>3</priority>
      <example>

public class Foo {
    public void test1(String t1) {
        Database.query('SELECT Id FROM Account' + t1);
    }
}

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.apex.rule.security.ApexCRUDViolationRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_apex_security.html#apexcrudviolation"
         message="Validate CRUD permission before SOQL/DML operation"
         name="ApexCRUDViolation"
         since="5.5.3">
      <description>
The rule validates you are checking for access permissions before a SOQL/SOSL/DML operation.
Since Apex runs in system mode not having proper permissions checks results in escalation of 
privilege and may produce runtime errors. This check forces you to handle such scenarios.
    </description>
      <priority>3</priority>
      <example>

public class Foo {
    public Contact foo(String status, String ID) {
        Contact c = [SELECT Status__c FROM Contact WHERE Id=:ID];

        // Make sure we can update the database before even trying
        if (!Schema.sObjectType.Contact.fields.Name.isUpdateable()) {
            return null;
        }

        c.Status__c = status;
        update c;
        return c;
    }
}

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.apex.rule.security.ApexDangerousMethodsRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_apex_security.html#apexdangerousmethods"
         message="Calling potentially dangerous method"
         name="ApexDangerousMethods"
         since="5.5.3">
      <description>
Checks against calling dangerous methods.

For the time being, it reports:

* Against `FinancialForce`'s `Configuration.disableTriggerCRUDSecurity()`. Disabling CRUD security
opens the door to several attacks and requires manual validation, which is unreliable.
* Calling `System.debug` passing sensitive data as parameter, which could lead to exposure
of private data.

    </description>
      <priority>3</priority>
      <example>

public class Foo {
    public Foo() {
        Configuration.disableTriggerCRUDSecurity();
    }
}

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.apex.rule.security.ApexSuggestUsingNamedCredRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_apex_security.html#apexsuggestusingnamedcred"
         message="Suggest named credentials for authentication"
         name="ApexSuggestUsingNamedCred"
         since="5.5.3">
      <description>
Detects hardcoded credentials used in requests to an endpoint.

You should refrain from hardcoding credentials:
  * They are hard to mantain by being mixed in application code
  * Particularly hard to update them when used from different classes
  * Granting a developer access to the codebase means granting knowledge
     of credentials, keeping a two-level access is not possible.
  * Using different credentials for different environments is troublesome
     and error-prone.

Instead, you should use *Named Credentials* and a callout endpoint.

For more information, you can check [this](https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_callouts_named_credentials.htm)

    </description>
      <priority>3</priority>
      <example>

public class Foo {
    public void foo(String username, String password) {
        Blob headerValue = Blob.valueOf(username + ':' + password);
        String authorizationHeader = 'BASIC ' + EncodingUtil.base64Encode(headerValue);
        req.setHeader('Authorization', authorizationHeader);
    }
}
    
    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.apex.metrics.rule.CyclomaticComplexityRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_apex_metrics.html#cyclomaticcomplexity"
         message="The {0} ''{1}'' has a{2} cyclomatic complexity of {3}."
         metrics="true"
         name="CyclomaticComplexity"
         since="6.0.0">
        <description>
            
The complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic
in a single method makes its behaviour hard to read and change.

Cyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,
plus one for the method entry. Decision points are places where the control flow jumps to another place in the
program. As such, they include all control flow statements, such as 'if', 'while', 'for', and 'case'.

Generally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote
high complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity &gt;= 10.
Additionnally, classes with many methods of moderate complexity get reported as well once the total of their
methods' complexities reaches 40, even if none of the methods was directly reported.

Reported methods should be broken down into several smaller methods. Reported classes should probably be broken down
into subcomponents.
    
        </description>
        <priority>3</priority>
        <example>
            
public class Complicated {
  public void example() { // This method has a cyclomatic complexity of 12
    int x = 0, y = 1, z = 2, t = 2;
    boolean a = false, b = true, c = false, d = true;
    if (a &amp;&amp; b || b &amp;&amp; d) {
      if (y == z) {
        x = 2;
      } else if (y == t &amp;&amp; !d) {
        x = 2;
      } else {
        x = 2;
      }
    } else if (c &amp;&amp; d) {
      while (z &lt; y) {
        x = 2;
      }
    } else {
      for (int n = 0; n &lt; t; n++) {
        x = 2;
      }
    }
  }
}

        </example>
    </rule>
   <rule class="net.sourceforge.pmd.lang.apex.rule.performance.AvoidSoqlInLoopsRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_apex_performance.html#avoidsoqlinloops"
         message="Avoid Soql queries inside loops"
         name="AvoidSoqlInLoops"
         since="5.5.0">
      <description>
New objects created within loops should be checked to see if they can created outside them and reused.
    </description>
      <priority>3</priority>
      <example>

public class Something {
    public static void main( String as[] ) {
        for (Integer i = 0; i &lt; 10; i++) {
            List&lt;Account&gt; accounts = [SELECT Id FROM Account];
        }
    }
}

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.apex.rule.performance.AvoidDmlStatementsInLoopsRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_apex_performance.html#avoiddmlstatementsinloops"
         message="Avoid DML statements inside loops"
         name="AvoidDmlStatementsInLoops"
         since="5.5.0">
      <description>
Avoid DML statements inside loops to avoid hitting the DML governor limit. Instead, try to batch up the data into a list and invoke your DML once on that list of data outside the loop.
    </description>
      <priority>3</priority>
      <example>

public class Something {
    public void foo() {  
        for (Integer i = 0; i &lt; 151; i++) {
            Account account;
            // ...
            insert account;
        }
    }
}

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.apex.rule.style.VariableNamingConventionsRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_apex_style.html#variablenamingconventions"
         message="{0} variable {1} should begin with {2}"
         name="VariableNamingConventions"
         since="5.5.0">
      <description>
A variable naming conventions rule - customize this to your liking.  Currently, it
checks for final variables that should be fully capitalized and non-final variables
that should not include underscores.
    </description>
      <priority>1</priority>
      <example>

public class Foo {
    public static final Integer MY_NUM = 0;
    public String myTest = '';
    DataModule dmTest = new DataModule();
}

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.apex.rule.style.MethodNamingConventionsRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_apex_style.html#methodnamingconventions"
         message="Method name does not begin with a lower case character."
         name="MethodNamingConventions"
         since="5.5.0">
      <description>
Method names should always begin with a lower case character, and should not contain underscores.
    </description>
      <priority>1</priority>
      <example>

public class Foo {
    public void fooStuff() {
    }
}

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.apex.rule.style.ClassNamingConventionsRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_apex_style.html#classnamingconventions"
         message="Class names should begin with an uppercase character"
         name="ClassNamingConventions"
         since="5.5.0">
      <description>
Class names should always begin with an upper case character.
    </description>
      <priority>1</priority>
      <example>

public class Foo {}

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.apex.rule.style.MethodWithSameNameAsEnclosingClassRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_apex_style.html#methodwithsamenameasenclosingclass"
         message="Classes should not have non-constructor methods with the same name as the class"
         name="MethodWithSameNameAsEnclosingClass"
         since="5.5.0">
      <description>
Non-constructor methods should not have the same name as the enclosing class.
    </description>
      <priority>3</priority>
      <example>

public class MyClass {
    // this is OK because it is a constructor
    public MyClass() {}
    // this is bad because it is a method
    public void MyClass() {}
}

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.apex.rule.style.AvoidLogicInTriggerRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_apex_style.html#avoidlogicintrigger"
         message="Avoid logic in triggers"
         name="AvoidLogicInTrigger"
         since="5.5.0">
      <description>
As triggers do not allow methods like regular classes they are less flexible and suited to apply good encapsulation style.
Therefore delegate the triggers work to a regular class (often called Trigger handler class).

See more here: https://developer.salesforce.com/page/Trigger_Frameworks_and_Apex_Trigger_Best_Practices
    </description>
      <priority>3</priority>
      <example>

trigger Accounts on Account (before insert, before update, before delete, after insert, after update, after delete, after undelete) {
    for(Account acc : Trigger.new) {
        if(Trigger.isInsert) {
            // ...
        }

        // ...

        if(Trigger.isDelete) {
            // ...
        }
    }
}

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.apex.rule.style.AvoidGlobalModifierRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_apex_style.html#avoidglobalmodifier"
         message="Avoid using global modifier"
         name="AvoidGlobalModifier"
         since="5.5.0">
      <description>
Global classes should be avoided (especially in managed packages) as they can never be deleted or changed in signature. Always check twice if something needs to be global.
Many interfaces (e.g. Batch) required global modifiers in the past but don't require this anymore. Don't lock yourself in.
    </description>
      <priority>3</priority>
      <example>

global class Unchangeable {
    global UndeletableType unchangable(UndeletableType param) {
        // ...
    }
}

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.apex.rule.complexity.AvoidDeeplyNestedIfStmtsRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_apex_complexity.html#avoiddeeplynestedifstmts"
         message="Deeply nested if..then statements are hard to read"
         name="AvoidDeeplyNestedIfStmts"
         since="5.5.0">
      <description>
Avoid creating deeply nested if-then statements since they are harder to read and error-prone to maintain.
    </description>
      <priority>3</priority>
      <example>

public class Foo {
    public void bar(Integer x, Integer y, Integer z) {
        if (x&gt;y) {
            if (y&gt;z) {
                if (z==x) {
                    // !! too deep
                }
            }
        }
    }
}

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.apex.rule.complexity.ExcessiveParameterListRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_apex_complexity.html#excessiveparameterlist"
         message="Avoid long parameter lists."
         name="ExcessiveParameterList"
         since="5.5.0">
      <description>
Methods with numerous parameters are a challenge to maintain, especially if most of them share the
same datatype. These situations usually denote the need for new objects to wrap the numerous parameters.
    </description>
      <priority>3</priority>
      <example>

// too many arguments liable to be mixed up
public void addPerson(int birthYear, int birthMonth, int birthDate, int height, int weight, int ssn) {
    // ...
}
// preferred approach 
public void addPerson(Date birthdate, BodyMeasurements measurements, int ssn) {
    // ...
}

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.apex.rule.complexity.ExcessiveClassLengthRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_apex_complexity.html#excessiveclasslength"
         message="Avoid really long classes."
         name="ExcessiveClassLength"
         since="5.5.0">
      <description>
Excessive class file lengths are usually indications that the class may be burdened with excessive 
responsibilities that could be provided by external classes or functions. In breaking these methods
apart the code becomes more managable and ripe for reuse.
    </description>
      <priority>3</priority>
      <example>

public class Foo {
    public void bar1() {
        // 1000 lines of code
    }
    public void bar2() {
        // 1000 lines of code
    }
    public void bar3() {
        // 1000 lines of code
    }
    public void barN() {
        // 1000 lines of code
    }
}

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.apex.rule.complexity.NcssMethodCountRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_apex_complexity.html#ncssmethodcount"
         message="The method ''{0}()'' has an NCSS line count of {1}"
         name="NcssMethodCount"
         since="5.5.0">
      <description>
This rule uses the NCSS (Non-Commenting Source Statements) algorithm to determine the number of lines
of code for a given method. NCSS ignores comments, and counts actual statements. Using this algorithm,
lines of code that are split are counted as one.
    </description>
      <priority>3</priority>
      <example>

public class Foo extends Bar {
    //this method only has 1 NCSS lines
    public Integer methd() {
        super.methd();



        return 1;
    }
}

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.apex.rule.complexity.NcssTypeCountRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_apex_complexity.html#ncsstypecount"
         message="The type has an NCSS line count of {0}"
         name="NcssTypeCount"
         since="5.5.0">
      <description>
This rule uses the NCSS (Non-Commenting Source Statements) algorithm to determine the number of lines
of code for a given type. NCSS ignores comments, and counts actual statements. Using this algorithm,
lines of code that are split are counted as one.
    </description>
      <priority>3</priority>
      <example>

//this class only has 6 NCSS lines
public class Foo extends Bar {
    public Foo() {
        super();





        super.foo();
    }
}

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.apex.rule.complexity.NcssConstructorCountRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_apex_complexity.html#ncssconstructorcount"
         message="The constructor has an NCSS line count of {0}"
         name="NcssConstructorCount"
         since="5.5.0">
      <description>
This rule uses the NCSS (Non-Commenting Source Statements) algorithm to determine the number of lines
of code for a given constructor. NCSS ignores comments, and counts actual statements. Using this algorithm,
lines of code that are split are counted as one.
    </description>
      <priority>3</priority>
      <example>

public class Foo extends Bar {
    //this constructor only has 1 NCSS lines
    public Foo() {
        super();




        super.foo();
}
}

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.apex.rule.complexity.StdCyclomaticComplexityRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_apex_complexity.html#stdcyclomaticcomplexity"
         message="The {0} ''{1}'' has a Standard Cyclomatic Complexity of {2}."
         name="StdCyclomaticComplexity"
         since="5.5.0">
      <description>
Complexity directly affects maintenance costs is determined by the number of decision points in a method 
plus one for the method entry.  The decision points include 'if', 'while', 'for', and 'case labels' calls.  
Generally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote
high complexity, and 11+ is very high complexity.
    </description>
      <priority>3</priority>
      <example>

// This has a Cyclomatic Complexity = 12
public class Foo {
1   public void example() {
2   if (a == b || (c == d &amp;&amp; e == f)) {
3       if (a1 == b1) {
            fiddle();
4       } else if a2 == b2) {
            fiddle();
        }  else {
            fiddle();
        }
5   } else if (c == d) {
6       while (c == d) {
            fiddle();
        }
7   } else if (e == f) {
8       for (int n = 0; n &lt; h; n++) {
            fiddle();
        }
    } else {
        switch (z) {
9           case 1:
                fiddle();
                break;
10          case 2:
                fiddle();
                break;
11          case 3:
                fiddle();
                break;
12          default:
                fiddle();
                break;
        }
    }
}

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.apex.rule.complexity.TooManyFieldsRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_apex_complexity.html#toomanyfields"
         message="Too many fields"
         name="TooManyFields"
         since="5.5.0">
      <description>
Classes that have too many fields can become unwieldy and could be redesigned to have fewer fields,
possibly through grouping related fields in new objects.  For example, a class with individual 
city/state/zip fields could park them within a single Address field.
    </description>
      <priority>3</priority>
      <example>

public class Person {
    // too many separate fields
    int birthYear;
    int birthMonth;
    int birthDate;
    float height;
    float weight;
}

public class Person {
    // this is more manageable
    Date birthDate;
    BodyMeasurements measurements;
}

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.apex.rule.complexity.ExcessivePublicCountRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_apex_complexity.html#excessivepubliccount"
         message="This class has a bunch of public methods and attributes"
         name="ExcessivePublicCount"
         since="5.5.0">
      <description>
Classes with large numbers of public methods and attributes require disproportionate testing efforts
since combinational side effects grow rapidly and increase risk. Refactoring these classes into
smaller ones not only increases testability and reliability but also allows new variations to be
developed easily.
    </description>
      <priority>3</priority>
      <example>

public class Foo {
    public String value;
    public Bar something;
    public Variable var;
    // [... more more public attributes ...]

    public void doWork() {}
    public void doMoreWork() {}
    public void doWorkAgain() {}
    // [... more more public methods ...]
}

    </example>
  </rule>
</ruleset>