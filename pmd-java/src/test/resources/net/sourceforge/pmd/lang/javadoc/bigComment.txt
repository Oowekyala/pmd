+- Comment[]
   +- Data[@TextData = "A sequence of AST nodes. Conceptually similar to a "]
   +- InlineTag[@Plain = "false", @TagName = "@link"]
   |  +- ClassRef[@EmptyForSelfClass = "false", @SimpleRef = "Stream"]
   +- Data[@TextData = ", and exposes a specialized API to navigate abstract syntax trees. This API replaces the defunct "]
   +- InlineTag[@Plain = "false", @TagName = "@link"]
   |  +- ExecutableRef[@Name = "findChildNodesWithXPath"]
   |     +- ClassRef[@EmptyForSelfClass = "false", @SimpleRef = "Node"]
   |     +- ClassRef[@EmptyForSelfClass = "false", @SimpleRef = "String"]
   +- Data[@TextData = "."]
   +- Html[@CloseSyntax = "HTML", @TagName = "h1"]
   |  +- Data[@TextData = "API usage"]
   |  +- HtmlEnd[@TagName = "h1"]
   +- Html[@CloseSyntax = "IMPLICIT", @TagName = "p"]
   |  +- Data[@TextData = "The "]
   |  +- InlineTag[@Plain = "false", @TagName = "@link"]
   |  |  +- ClassRef[@EmptyForSelfClass = "false", @SimpleRef = "Node"]
   |  +- Data[@TextData = " interface exposes methods like "]
   |  +- InlineTag[@Plain = "false", @TagName = "@link"]
   |  |  +- ExecutableRef[@Name = "children"]
   |  |     +- ClassRef[@EmptyForSelfClass = "false", @SimpleRef = "Node"]
   |  +- Data[@TextData = "or "]
   |  +- InlineTag[@Plain = "false", @TagName = "@link"]
   |  |  +- ExecutableRef[@Name = "asStream"]
   |  |     +- ClassRef[@EmptyForSelfClass = "false", @SimpleRef = "Node"]
   |  +- Data[@TextData = " to obtain new NodeStreams. Null-safe construction methods are available here, see "]
   |  +- InlineTag[@Plain = "false", @TagName = "@link"]
   |  |  +- ExecutableRef[@Name = "of"]
   |  |     +- ClassRef[@EmptyForSelfClass = "true", @SimpleRef = ""]
   |  |     +- ClassRef[@EmptyForSelfClass = "false", @SimpleRef = "Node"]
   |  +- Data[@TextData = ", "]
   |  +- InlineTag[@Plain = "false", @TagName = "@link"]
   |  |  +- ExecutableRef[@Name = "of"]
   |  |     +- ClassRef[@EmptyForSelfClass = "true", @SimpleRef = ""]
   |  |     +- ClassRef[@ArrayDimensions = "1", @EmptyForSelfClass = "false", @SimpleRef = "Node"]
   |  +- Data[@TextData = ","]
   |  +- InlineTag[@Plain = "false", @TagName = "@link"]
   |  |  +- ExecutableRef[@Name = "fromIterable"]
   |  |     +- ClassRef[@EmptyForSelfClass = "true", @SimpleRef = ""]
   |  |     +- ClassRef[@EmptyForSelfClass = "false", @SimpleRef = "Iterable"]
   |  +- Data[@TextData = "."]
   +- Html[@CloseSyntax = "IMPLICIT", @TagName = "p"]
   |  +- Data[@TextData = "Most functions have an equivalent in the "]
   |  +- InlineTag[@Plain = "false", @TagName = "@link"]
   |  |  +- ClassRef[@EmptyForSelfClass = "false", @SimpleRef = "Stream"]
   |  +- Data[@TextData = " interface and their behaviour is similar. One important departure from the"]
   |  +- InlineTag[@Plain = "false", @TagName = "@link"]
   |  |  +- ClassRef[@EmptyForSelfClass = "false", @SimpleRef = "Stream"]
   |  +- Data[@TextData = " contract is the absence of requirement on the laziness of pipeline operations. More on that in the details section below."]
   +- Html[@CloseSyntax = "IMPLICIT", @TagName = "p"]
   |  +- Data[@TextData = "Some additional functions are provided to iterate the axes of the tree: "]
   |  +- InlineTag[@Plain = "false", @TagName = "@link"]
   |  |  +- ExecutableRef[@Name = "children"]
   |  |     +- ClassRef[@EmptyForSelfClass = "true", @SimpleRef = ""]
   |  +- Data[@TextData = ", "]
   |  +- InlineTag[@Plain = "false", @TagName = "@link"]
   |  |  +- ExecutableRef[@Name = "descendants"]
   |  |     +- ClassRef[@EmptyForSelfClass = "true", @SimpleRef = ""]
   |  +- Data[@TextData = ", "]
   |  +- InlineTag[@Plain = "false", @TagName = "@link"]
   |  |  +- ExecutableRef[@Name = "descendantsOrSelf"]
   |  |     +- ClassRef[@EmptyForSelfClass = "true", @SimpleRef = ""]
   |  +- Data[@TextData = ","]
   |  +- InlineTag[@Plain = "false", @TagName = "@link"]
   |  |  +- ExecutableRef[@Name = "parents"]
   |  |     +- ClassRef[@EmptyForSelfClass = "true", @SimpleRef = ""]
   |  +- Data[@TextData = ", "]
   |  +- InlineTag[@Plain = "false", @TagName = "@link"]
   |  |  +- ExecutableRef[@Name = "ancestors"]
   |  |     +- ClassRef[@EmptyForSelfClass = "true", @SimpleRef = ""]
   |  +- Data[@TextData = ", "]
   |  +- InlineTag[@Plain = "false", @TagName = "@link"]
   |  |  +- ExecutableRef[@Name = "ancestorsOrSelf"]
   |  |     +- ClassRef[@EmptyForSelfClass = "true", @SimpleRef = ""]
   |  +- Data[@TextData = ","]
   |  +- InlineTag[@Plain = "false", @TagName = "@link"]
   |  |  +- ExecutableRef[@Name = "precedingSiblings"]
   |  |     +- ClassRef[@EmptyForSelfClass = "true", @SimpleRef = ""]
   |  +- Data[@TextData = ", "]
   |  +- InlineTag[@Plain = "false", @TagName = "@link"]
   |  |  +- ExecutableRef[@Name = "followingSiblings"]
   |  |     +- ClassRef[@EmptyForSelfClass = "true", @SimpleRef = ""]
   |  +- Data[@TextData = ". Filtering and mapping nodes by type is possible through "]
   |  +- InlineTag[@Plain = "false", @TagName = "@link"]
   |  |  +- ExecutableRef[@Name = "filterIs"]
   |  |     +- ClassRef[@EmptyForSelfClass = "true", @SimpleRef = ""]
   |  |     +- ClassRef[@EmptyForSelfClass = "false", @SimpleRef = "Class"]
   |  +- Data[@TextData = ", and the specialized "]
   |  +- InlineTag[@Plain = "false", @TagName = "@link"]
   |  |  +- ExecutableRef[@Name = "children"]
   |  |     +- ClassRef[@EmptyForSelfClass = "true", @SimpleRef = ""]
   |  |     +- ClassRef[@EmptyForSelfClass = "false", @SimpleRef = "Class"]
   |  +- Data[@TextData = ", "]
   |  +- InlineTag[@Plain = "false", @TagName = "@link"]
   |  |  +- ExecutableRef[@Name = "descendants"]
   |  |     +- ClassRef[@EmptyForSelfClass = "true", @SimpleRef = ""]
   |  |     +- ClassRef[@EmptyForSelfClass = "false", @SimpleRef = "Class"]
   |  +- Data[@TextData = ", and "]
   |  +- InlineTag[@Plain = "false", @TagName = "@link"]
   |  |  +- ExecutableRef[@Name = "ancestors"]
   |  |     +- ClassRef[@EmptyForSelfClass = "true", @SimpleRef = ""]
   |  |     +- ClassRef[@EmptyForSelfClass = "false", @SimpleRef = "Class"]
   |  +- Data[@TextData = "."]
   +- Html[@CloseSyntax = "IMPLICIT", @TagName = "p"]
   |  +- Data[@TextData = "Many complex predicates about nodes can be expressed by testing the emptiness of a node stream. E.g. the following tests if the node is a variable declarator id initialized to the value "]
   |  +- InlineTag[@Code = "true", @Data = "0", @Literal = "false", @TagName = "@code"]
   |  +- Data[@TextData = ":"]
   +- Html[@CloseSyntax = "HTML", @TagName = "pre"]
   |  +- InlineTag[@Plain = "true", @TagName = "@linkplain"]
   |  |  +- ExecutableRef[@Name = "of"]
   |  |  |  +- ClassRef[@EmptyForSelfClass = "true", @SimpleRef = ""]
   |  |  |  +- ClassRef[@EmptyForSelfClass = "false", @SimpleRef = "Node"]
   |  |  +- Data[@TextData = "NodeStream.of"]
   |  +- Data[@TextData = "(someNode)                           "]
   |  +- Html[@CloseSyntax = "HTML", @TagName = "i"]
   |  |  +- Data[@TextData = "// the stream here is empty if the node is null"]
   |  |  +- HtmlEnd[@TagName = "i"]
   |  +- InlineTag[@Plain = "true", @TagName = "@linkplain"]
   |  |  +- ExecutableRef[@Name = "filterIs"]
   |  |  |  +- ClassRef[@EmptyForSelfClass = "true", @SimpleRef = ""]
   |  |  |  +- ClassRef[@EmptyForSelfClass = "false", @SimpleRef = "Class"]
   |  |  +- Data[@TextData = ".filterIs"]
   |  +- Data[@TextData = "(ASTVariableDeclaratorId.class)"]
   |  +- Html[@CloseSyntax = "HTML", @TagName = "i"]
   |  |  +- Data[@TextData = "// the stream here is empty if the node was not a variable declarator id"]
   |  |  +- HtmlEnd[@TagName = "i"]
   |  +- InlineTag[@Plain = "true", @TagName = "@linkplain"]
   |  |  +- ExecutableRef[@Name = "followingSiblings"]
   |  |  |  +- ClassRef[@EmptyForSelfClass = "true", @SimpleRef = ""]
   |  |  +- Data[@TextData = ".followingSiblings"]
   |  +- Data[@TextData = "()                    "]
   |  +- Html[@CloseSyntax = "HTML", @TagName = "i"]
   |  |  +- Data[@TextData = "// the stream here contains only the siblings, not the original node"]
   |  |  +- HtmlEnd[@TagName = "i"]
   |  +- InlineTag[@Plain = "true", @TagName = "@linkplain"]
   |  |  +- ExecutableRef[@Name = "take"]
   |  |  |  +- ClassRef[@EmptyForSelfClass = "true", @SimpleRef = ""]
   |  |  |  +- ClassRef[@EmptyForSelfClass = "false", @SimpleRef = "int"]
   |  |  +- Data[@TextData = ".take"]
   |  +- Data[@TextData = "(1)                                "]
   |  +- Html[@CloseSyntax = "HTML", @TagName = "i"]
   |  |  +- Data[@TextData = "// the stream here contains only the first sibling, if it exists"]
   |  |  +- HtmlEnd[@TagName = "i"]
   |  +- InlineTag[@Plain = "true", @TagName = "@linkplain"]
   |  |  +- ExecutableRef[@Name = "filterIs"]
   |  |  |  +- ClassRef[@EmptyForSelfClass = "true", @SimpleRef = ""]
   |  |  |  +- ClassRef[@EmptyForSelfClass = "false", @SimpleRef = "Class"]
   |  |  +- Data[@TextData = ".filterIs"]
   |  +- Data[@TextData = "(ASTNumericLiteral.class)"]
   |  +- InlineTag[@Plain = "true", @TagName = "@linkplain"]
   |  |  +- ExecutableRef[@Name = "filter"]
   |  |  |  +- ClassRef[@EmptyForSelfClass = "true", @SimpleRef = ""]
   |  |  |  +- ClassRef[@EmptyForSelfClass = "false", @SimpleRef = "Predicate"]
   |  |  +- Data[@TextData = ".filter"]
   |  +- Data[@TextData = "(it -> !it.isFloatingPoint() && it.getValueAsInt() == 0)"]
   |  +- InlineTag[@Plain = "true", @TagName = "@linkplain"]
   |  |  +- ExecutableRef[@Name = "nonEmpty"]
   |  |  |  +- ClassRef[@EmptyForSelfClass = "true", @SimpleRef = ""]
   |  |  +- Data[@TextData = ".nonEmpty"]
   |  +- Data[@TextData = "(); "]
   |  +- Html[@CloseSyntax = "HTML", @TagName = "i"]
   |  |  +- Data[@TextData = "// If the stream is non empty here, then all the pipeline matched"]
   |  |  +- HtmlEnd[@TagName = "i"]
   |  +- HtmlEnd[@TagName = "pre"]
   +- Html[@CloseSyntax = "IMPLICIT", @TagName = "p"]
   |  +- Data[@TextData = "Many existing operations from the node interface can be written with streams too:"]
   +- Html[@CloseSyntax = "HTML", @TagName = "ul"]
   |  +- Html[@CloseSyntax = "HTML", @TagName = "li"]
   |  |  +- Html[@CloseSyntax = "HTML", @TagName = "tt"]
   |  |  |  +- Data[@TextData = "node."]
   |  |  |  +- InlineTag[@Plain = "false", @TagName = "@link"]
   |  |  |  |  +- ExecutableRef[@Name = "getFirstChildOfType"]
   |  |  |  |  |  +- ClassRef[@EmptyForSelfClass = "false", @SimpleRef = "Node"]
   |  |  |  |  |  +- ClassRef[@EmptyForSelfClass = "false", @SimpleRef = "Class"]
   |  |  |  |  +- Data[@TextData = "getFirstChildOfType(t)"]
   |  |  |  +- Data[@TextData = " === node."]
   |  |  |  +- InlineTag[@Plain = "false", @TagName = "@link"]
   |  |  |  |  +- ExecutableRef[@Name = "children"]
   |  |  |  |  |  +- ClassRef[@EmptyForSelfClass = "false", @SimpleRef = "Node"]
   |  |  |  |  |  +- ClassRef[@EmptyForSelfClass = "false", @SimpleRef = "Class"]
   |  |  |  |  +- Data[@TextData = "children(t)"]
   |  |  |  +- Data[@TextData = "."]
   |  |  |  +- InlineTag[@Plain = "false", @TagName = "@link"]
   |  |  |  |  +- ExecutableRef[@Name = "first"]
   |  |  |  |     +- ClassRef[@EmptyForSelfClass = "true", @SimpleRef = ""]
   |  |  |  +- HtmlEnd[@TagName = "tt"]
   |  |  +- HtmlEnd[@TagName = "li"]
   |  +- Html[@CloseSyntax = "HTML", @TagName = "li"]
   |  |  +- Html[@CloseSyntax = "HTML", @TagName = "tt"]
   |  |  |  +- Data[@TextData = "node."]
   |  |  |  +- InlineTag[@Plain = "false", @TagName = "@link"]
   |  |  |  |  +- ExecutableRef[@Name = "getFirstDescendantOfType"]
   |  |  |  |  |  +- ClassRef[@EmptyForSelfClass = "false", @SimpleRef = "Node"]
   |  |  |  |  |  +- ClassRef[@EmptyForSelfClass = "false", @SimpleRef = "Class"]
   |  |  |  |  +- Data[@TextData = "getFirstDescendantOfType(t)"]
   |  |  |  +- Data[@TextData = " === node."]
   |  |  |  +- InlineTag[@Plain = "false", @TagName = "@link"]
   |  |  |  |  +- ExecutableRef[@Name = "descendants"]
   |  |  |  |  |  +- ClassRef[@EmptyForSelfClass = "false", @SimpleRef = "Node"]
   |  |  |  |  |  +- ClassRef[@EmptyForSelfClass = "false", @SimpleRef = "Class"]
   |  |  |  |  +- Data[@TextData = "descendants(t)"]
   |  |  |  +- Data[@TextData = "."]
   |  |  |  +- InlineTag[@Plain = "false", @TagName = "@link"]
   |  |  |  |  +- ExecutableRef[@Name = "first"]
   |  |  |  |     +- ClassRef[@EmptyForSelfClass = "true", @SimpleRef = ""]
   |  |  |  +- HtmlEnd[@TagName = "tt"]
   |  |  +- HtmlEnd[@TagName = "li"]
   |  +- Html[@CloseSyntax = "HTML", @TagName = "li"]
   |  |  +- Html[@CloseSyntax = "HTML", @TagName = "tt"]
   |  |  |  +- Data[@TextData = "node."]
   |  |  |  +- InlineTag[@Plain = "false", @TagName = "@link"]
   |  |  |  |  +- ExecutableRef[@Name = "getFirstParentOfType"]
   |  |  |  |  |  +- ClassRef[@EmptyForSelfClass = "false", @SimpleRef = "Node"]
   |  |  |  |  |  +- ClassRef[@EmptyForSelfClass = "false", @SimpleRef = "Class"]
   |  |  |  |  +- Data[@TextData = "getFirstParentOfType(t)"]
   |  |  |  +- Data[@TextData = " === node."]
   |  |  |  +- InlineTag[@Plain = "false", @TagName = "@link"]
   |  |  |  |  +- ExecutableRef[@Name = "ancestors"]
   |  |  |  |  |  +- ClassRef[@EmptyForSelfClass = "false", @SimpleRef = "Node"]
   |  |  |  |  |  +- ClassRef[@EmptyForSelfClass = "false", @SimpleRef = "Class"]
   |  |  |  |  +- Data[@TextData = "ancestors(t)"]
   |  |  |  +- Data[@TextData = "."]
   |  |  |  +- InlineTag[@Plain = "false", @TagName = "@link"]
   |  |  |  |  +- ExecutableRef[@Name = "first"]
   |  |  |  |     +- ClassRef[@EmptyForSelfClass = "true", @SimpleRef = ""]
   |  |  |  +- HtmlEnd[@TagName = "tt"]
   |  |  +- HtmlEnd[@TagName = "li"]
   |  +- Html[@CloseSyntax = "HTML", @TagName = "li"]
   |  |  +- Html[@CloseSyntax = "HTML", @TagName = "tt"]
   |  |  |  +- Data[@TextData = "node."]
   |  |  |  +- InlineTag[@Plain = "false", @TagName = "@link"]
   |  |  |  |  +- ExecutableRef[@Name = "findChildrenOfType"]
   |  |  |  |  |  +- ClassRef[@EmptyForSelfClass = "false", @SimpleRef = "Node"]
   |  |  |  |  |  +- ClassRef[@EmptyForSelfClass = "false", @SimpleRef = "Class"]
   |  |  |  |  +- Data[@TextData = "findChildrenOfType(t)"]
   |  |  |  +- Data[@TextData = " === node."]
   |  |  |  +- InlineTag[@Plain = "false", @TagName = "@link"]
   |  |  |  |  +- ExecutableRef[@Name = "descendants"]
   |  |  |  |  |  +- ClassRef[@EmptyForSelfClass = "false", @SimpleRef = "Node"]
   |  |  |  |  |  +- ClassRef[@EmptyForSelfClass = "false", @SimpleRef = "Class"]
   |  |  |  |  +- Data[@TextData = "children(t)"]
   |  |  |  +- Data[@TextData = "."]
   |  |  |  +- InlineTag[@Plain = "false", @TagName = "@link"]
   |  |  |  |  +- ExecutableRef[@Name = "toList"]
   |  |  |  |     +- ClassRef[@EmptyForSelfClass = "true", @SimpleRef = ""]
   |  |  |  +- HtmlEnd[@TagName = "tt"]
   |  |  +- HtmlEnd[@TagName = "li"]
   |  +- Html[@CloseSyntax = "HTML", @TagName = "li"]
   |  |  +- Html[@CloseSyntax = "HTML", @TagName = "tt"]
   |  |  |  +- Data[@TextData = "node."]
   |  |  |  +- InlineTag[@Plain = "false", @TagName = "@link"]
   |  |  |  |  +- ExecutableRef[@Name = "findDescendantsOfType"]
   |  |  |  |  |  +- ClassRef[@EmptyForSelfClass = "false", @SimpleRef = "Node"]
   |  |  |  |  |  +- ClassRef[@EmptyForSelfClass = "false", @SimpleRef = "Class"]
   |  |  |  |  +- Data[@TextData = "findDescendantsOfType(t)"]
   |  |  |  +- Data[@TextData = " === node."]
   |  |  |  +- InlineTag[@Plain = "false", @TagName = "@link"]
   |  |  |  |  +- ExecutableRef[@Name = "descendants"]
   |  |  |  |  |  +- ClassRef[@EmptyForSelfClass = "false", @SimpleRef = "Node"]
   |  |  |  |  |  +- ClassRef[@EmptyForSelfClass = "false", @SimpleRef = "Class"]
   |  |  |  |  +- Data[@TextData = "descendants(t)"]
   |  |  |  +- Data[@TextData = "."]
   |  |  |  +- InlineTag[@Plain = "false", @TagName = "@link"]
   |  |  |  |  +- ExecutableRef[@Name = "toList"]
   |  |  |  |     +- ClassRef[@EmptyForSelfClass = "true", @SimpleRef = ""]
   |  |  |  +- HtmlEnd[@TagName = "tt"]
   |  |  +- HtmlEnd[@TagName = "li"]
   |  +- Html[@CloseSyntax = "HTML", @TagName = "li"]
   |  |  +- Html[@CloseSyntax = "HTML", @TagName = "tt"]
   |  |  |  +- Data[@TextData = "node."]
   |  |  |  +- InlineTag[@Plain = "false", @TagName = "@link"]
   |  |  |  |  +- ExecutableRef[@Name = "getParentsOfType"]
   |  |  |  |  |  +- ClassRef[@EmptyForSelfClass = "false", @SimpleRef = "Node"]
   |  |  |  |  |  +- ClassRef[@EmptyForSelfClass = "false", @SimpleRef = "Class"]
   |  |  |  |  +- Data[@TextData = "getParentsOfType(t)"]
   |  |  |  +- Data[@TextData = " === node."]
   |  |  |  +- InlineTag[@Plain = "false", @TagName = "@link"]
   |  |  |  |  +- ExecutableRef[@Name = "descendants"]
   |  |  |  |  |  +- ClassRef[@EmptyForSelfClass = "false", @SimpleRef = "Node"]
   |  |  |  |  |  +- ClassRef[@EmptyForSelfClass = "false", @SimpleRef = "Class"]
   |  |  |  |  +- Data[@TextData = "ancestors(t)"]
   |  |  |  +- Data[@TextData = "."]
   |  |  |  +- InlineTag[@Plain = "false", @TagName = "@link"]
   |  |  |  |  +- ExecutableRef[@Name = "toList"]
   |  |  |  |     +- ClassRef[@EmptyForSelfClass = "true", @SimpleRef = ""]
   |  |  |  +- HtmlEnd[@TagName = "tt"]
   |  |  +- HtmlEnd[@TagName = "li"]
   |  +- Html[@CloseSyntax = "HTML", @TagName = "li"]
   |  |  +- Html[@CloseSyntax = "HTML", @TagName = "tt"]
   |  |  |  +- Data[@TextData = "node."]
   |  |  |  +- InlineTag[@Plain = "false", @TagName = "@link"]
   |  |  |  |  +- ExecutableRef[@Name = "getNthParent"]
   |  |  |  |  |  +- ClassRef[@EmptyForSelfClass = "false", @SimpleRef = "Node"]
   |  |  |  |  |  +- ClassRef[@EmptyForSelfClass = "false", @SimpleRef = "int"]
   |  |  |  |  +- Data[@TextData = "getNthParent(n)"]
   |  |  |  +- Data[@TextData = " === node."]
   |  |  |  +- InlineTag[@Plain = "false", @TagName = "@link"]
   |  |  |  |  +- ExecutableRef[@Name = "ancestors"]
   |  |  |  |  |  +- ClassRef[@EmptyForSelfClass = "false", @SimpleRef = "Node"]
   |  |  |  |  +- Data[@TextData = "ancestors()"]
   |  |  |  +- Data[@TextData = "."]
   |  |  |  +- InlineTag[@Plain = "false", @TagName = "@link"]
   |  |  |  |  +- ExecutableRef[@Name = "get"]
   |  |  |  |  |  +- ClassRef[@EmptyForSelfClass = "true", @SimpleRef = ""]
   |  |  |  |  |  +- ClassRef[@EmptyForSelfClass = "false", @SimpleRef = "int"]
   |  |  |  |  +- Data[@TextData = "get(n - 1)"]
   |  |  |  +- HtmlEnd[@TagName = "tt"]
   |  |  +- HtmlEnd[@TagName = "li"]
   |  +- Html[@CloseSyntax = "HTML", @TagName = "li"]
   |  |  +- Html[@CloseSyntax = "HTML", @TagName = "tt"]
   |  |  |  +- Data[@TextData = "node."]
   |  |  |  +- InlineTag[@Plain = "false", @TagName = "@link"]
   |  |  |  |  +- ExecutableRef[@Name = "hasDescendantOfType"]
   |  |  |  |  |  +- ClassRef[@EmptyForSelfClass = "false", @SimpleRef = "Node"]
   |  |  |  |  |  +- ClassRef[@EmptyForSelfClass = "false", @SimpleRef = "Class"]
   |  |  |  |  +- Data[@TextData = "hasDescendantOfType(t)"]
   |  |  |  +- Data[@TextData = " === node."]
   |  |  |  +- InlineTag[@Plain = "false", @TagName = "@link"]
   |  |  |  |  +- ExecutableRef[@Name = "descendants"]
   |  |  |  |  |  +- ClassRef[@EmptyForSelfClass = "false", @SimpleRef = "Node"]
   |  |  |  |  |  +- ClassRef[@EmptyForSelfClass = "false", @SimpleRef = "Class"]
   |  |  |  |  +- Data[@TextData = "descendants(t)"]
   |  |  |  +- Data[@TextData = "."]
   |  |  |  +- InlineTag[@Plain = "false", @TagName = "@link"]
   |  |  |  |  +- ExecutableRef[@Name = "nonEmpty"]
   |  |  |  |     +- ClassRef[@EmptyForSelfClass = "true", @SimpleRef = ""]
   |  |  |  +- HtmlEnd[@TagName = "tt"]
   |  |  +- HtmlEnd[@TagName = "li"]
   |  +- Html[@CloseSyntax = "HTML", @TagName = "li"]
   |  |  +- Html[@CloseSyntax = "HTML", @TagName = "tt"]
   |  |  |  +- Data[@TextData = "node.getFirstParentOfAnyType(c1, c2) ===  node."]
   |  |  |  +- InlineTag[@Plain = "false", @TagName = "@link"]
   |  |  |  |  +- ExecutableRef[@Name = "ancestors"]
   |  |  |  |  |  +- ClassRef[@EmptyForSelfClass = "false", @SimpleRef = "Node"]
   |  |  |  |  +- Data[@TextData = "ancestors()"]
   |  |  |  +- Data[@TextData = "."]
   |  |  |  +- InlineTag[@Plain = "false", @TagName = "@link"]
   |  |  |  |  +- ExecutableRef[@Name = "firstNonNull"]
   |  |  |  |  |  +- ClassRef[@EmptyForSelfClass = "true", @SimpleRef = ""]
   |  |  |  |  |  +- ClassRef[@EmptyForSelfClass = "false", @SimpleRef = "Function"]
   |  |  |  |  +- Data[@TextData = "firstNonNull"]
   |  |  |  +- Data[@TextData = "("]
   |  |  |  +- InlineTag[@Plain = "false", @TagName = "@link"]
   |  |  |  |  +- ExecutableRef[@Name = "asInstanceOf"]
   |  |  |  |  |  +- ClassRef[@EmptyForSelfClass = "true", @SimpleRef = ""]
   |  |  |  |  |  +- ClassRef[@EmptyForSelfClass = "false", @SimpleRef = "Class"]
   |  |  |  |  +- Malformed[@Message = "Unexpected token '' at 49:169, expecting '}'"]
   |  |  |  +- Data[@TextData = "asInstanceOf(c1, c2) )"]
   |  |  |  +- HtmlEnd[@TagName = "tt"]
   |  |  +- HtmlEnd[@TagName = "li"]
   |  +- Html[@CloseSyntax = "HTML", @TagName = "li"]
   |  |  +- Html[@CloseSyntax = "HTML", @TagName = "tt"]
   |  |  |  +- Data[@TextData = "node.hasDescendantOfAnyType(c1, c2) ===  node."]
   |  |  |  +- InlineTag[@Plain = "false", @TagName = "@link"]
   |  |  |  |  +- ExecutableRef[@Name = "descendants"]
   |  |  |  |  |  +- ClassRef[@EmptyForSelfClass = "false", @SimpleRef = "Node"]
   |  |  |  |  +- Data[@TextData = "descendants()"]
   |  |  |  +- Data[@TextData = "."]
   |  |  |  +- InlineTag[@Plain = "false", @TagName = "@link"]
   |  |  |  |  +- ExecutableRef[@Name = "map"]
   |  |  |  |  |  +- ClassRef[@EmptyForSelfClass = "true", @SimpleRef = ""]
   |  |  |  |  |  +- ClassRef[@EmptyForSelfClass = "false", @SimpleRef = "Function"]
   |  |  |  |  +- Data[@TextData = "map"]
   |  |  |  +- Data[@TextData = "("]
   |  |  |  +- InlineTag[@Plain = "false", @TagName = "@link"]
   |  |  |  |  +- ExecutableRef[@Name = "asInstanceOf"]
   |  |  |  |  |  +- ClassRef[@EmptyForSelfClass = "true", @SimpleRef = ""]
   |  |  |  |  |  +- ClassRef[@EmptyForSelfClass = "false", @SimpleRef = "Class"]
   |  |  |  |  +- Malformed[@Message = "Unexpected token '' at 50:154, expecting '}'"]
   |  |  |  +- Data[@TextData = "asInstanceOf(c1, c2) )."]
   |  |  |  +- InlineTag[@Plain = "false", @TagName = "@link"]
   |  |  |  |  +- ExecutableRef[@Name = "nonEmpty"]
   |  |  |  |     +- ClassRef[@EmptyForSelfClass = "true", @SimpleRef = ""]
   |  |  |  +- HtmlEnd[@TagName = "tt"]
   |  |  +- HtmlEnd[@TagName = "li"]
   |  +- HtmlEnd[@TagName = "ul"]
   +- Data[@TextData = "The new way to write those is as efficient as the old way."]
   +- Html[@CloseSyntax = "IMPLICIT", @TagName = "p"]
   |  +- Data[@TextData = "Unlike "]
   |  +- InlineTag[@Plain = "false", @TagName = "@link"]
   |  |  +- ClassRef[@EmptyForSelfClass = "false", @SimpleRef = "Stream"]
   |  +- Data[@TextData = "s, NodeStreams can be iterated multiple times. That means, that the operations that are "]
   |  +- Html[@CloseSyntax = "HTML", @TagName = "i"]
   |  |  +- Data[@TextData = "terminal"]
   |  |  +- HtmlEnd[@TagName = "i"]
   |  +- Data[@TextData = " in the Stream interface (i.e. consume the stream) don't consume NodeStreams. Be aware though, that node streams don't cache their results by default, so e.g. calling "]
   |  +- InlineTag[@Plain = "false", @TagName = "@link"]
   |  |  +- ExecutableRef[@Name = "count"]
   |  |     +- ClassRef[@EmptyForSelfClass = "true", @SimpleRef = ""]
   |  +- Data[@TextData = "followed by "]
   |  +- InlineTag[@Plain = "false", @TagName = "@link"]
   |  |  +- ExecutableRef[@Name = "toList"]
   |  |     +- ClassRef[@EmptyForSelfClass = "true", @SimpleRef = ""]
   |  +- Data[@TextData = " will execute the whole pipeline twice. The elements of a stream can however be "]
   |  +- InlineTag[@Plain = "true", @TagName = "@linkplain"]
   |  |  +- ExecutableRef[@Name = "cached"]
   |  |  |  +- ClassRef[@EmptyForSelfClass = "true", @SimpleRef = ""]
   |  |  +- Data[@TextData = "cached"]
   |  +- Data[@TextData = " at an arbitrary point in the pipeline to evaluate the upstream only once. Some construction methods allow building a node stream from an external data source, e.g. "]
   |  +- InlineTag[@Plain = "false", @TagName = "@link"]
   |  |  +- ExecutableRef[@Name = "fromIterable"]
   |  |  |  +- ClassRef[@EmptyForSelfClass = "true", @SimpleRef = ""]
   |  |  |  +- ClassRef[@EmptyForSelfClass = "false", @SimpleRef = "Iterable"]
   |  |  +- Data[@TextData = "fromIterable"]
   |  +- Data[@TextData = ". Depending on how the data source is implemented, the built node streams may be iterable only once."]
   +- Html[@CloseSyntax = "IMPLICIT", @TagName = "p"]
   |  +- Data[@TextData = "Node streams may contain duplicates, which can be pruned with "]
   |  +- InlineTag[@Plain = "false", @TagName = "@link"]
   |  |  +- ExecutableRef[@Name = "distinct"]
   |  |     +- ClassRef[@EmptyForSelfClass = "true", @SimpleRef = ""]
   |  +- Data[@TextData = "."]
   +- Html[@CloseSyntax = "HTML", @TagName = "h1"]
   |  +- Data[@TextData = "Details"]
   |  +- HtmlEnd[@TagName = "h1"]
   +- Html[@CloseSyntax = "IMPLICIT", @TagName = "p"]
   |  +- Data[@TextData = "NodeStreams are not necessarily implemented with "]
   |  +- InlineTag[@Plain = "false", @TagName = "@link"]
   |  |  +- ClassRef[@EmptyForSelfClass = "false", @SimpleRef = "Stream"]
   |  +- Data[@TextData = ", but when a method has an equivalent in the "]
   |  +- InlineTag[@Plain = "false", @TagName = "@link"]
   |  |  +- ClassRef[@EmptyForSelfClass = "false", @SimpleRef = "Stream"]
   |  +- Data[@TextData = " API, their contract is similar. The only difference, is that node streams are not necessarily lazy, ie, a pipeline operation may be evaluated eagerly to improve performance. For this reason, relying on side-effects produced in the middle of the pipeline is a bad idea. "]
   |  +- InlineTag[@Plain = "false", @TagName = "@link"]
   |  |  +- ClassRef[@EmptyForSelfClass = "false", @SimpleRef = "Stream"]
   |  +- Data[@TextData = "gives the same guideline about statefulness, but not for the same reason. Their justification is parallelism and operation reordering, once the pipeline is fully known."]
   +- Html[@CloseSyntax = "IMPLICIT", @TagName = "p"]
   |  +- Data[@TextData = "Node streams are meant to be sequential streams, so there is no equivalent to "]
   |  +- InlineTag[@Plain = "false", @TagName = "@link"]
   |  |  +- ExecutableRef[@Name = "findAny"]
   |  |     +- ClassRef[@EmptyForSelfClass = "false", @SimpleRef = "Stream"]
   |  +- Data[@TextData = ". The method "]
   |  +- InlineTag[@Plain = "false", @TagName = "@link"]
   |  |  +- ExecutableRef[@Name = "first"]
   |  |     +- ClassRef[@EmptyForSelfClass = "true", @SimpleRef = ""]
   |  +- Data[@TextData = "is an equivalent to "]
   |  +- InlineTag[@Plain = "false", @TagName = "@link"]
   |  |  +- ExecutableRef[@Name = "findFirst"]
   |  |     +- ClassRef[@EmptyForSelfClass = "false", @SimpleRef = "Stream"]
   |  +- Data[@TextData = ". There is however a"]
   |  +- InlineTag[@Plain = "false", @TagName = "@link"]
   |  |  +- ExecutableRef[@Name = "last"]
   |  |     +- ClassRef[@EmptyForSelfClass = "true", @SimpleRef = ""]
   |  +- Data[@TextData = " method, which may be implemented efficiently on some streams (eg "]
   |  +- InlineTag[@Plain = "false", @TagName = "@link"]
   |  |  +- ExecutableRef[@Name = "children"]
   |  |     +- ClassRef[@EmptyForSelfClass = "true", @SimpleRef = ""]
   |  +- Data[@TextData = "). TODO maybe implement reverse"]
   +- Html[@CloseSyntax = "IMPLICIT", @TagName = "p"]
   |  +- Data[@TextData = "Node streams are most of the time ordered in document order (w.r.t. the XPath specification), a.k.a. prefix order. Some operations which explicitly manipulate the order of nodes, like"]
   |  +- InlineTag[@Plain = "false", @TagName = "@link"]
   |  |  +- ExecutableRef[@Name = "union"]
   |  |  |  +- ClassRef[@EmptyForSelfClass = "true", @SimpleRef = ""]
   |  |  |  +- ClassRef[@ArrayDimensions = "1", @EmptyForSelfClass = "false", @SimpleRef = "NodeStream"]
   |  |  +- Data[@TextData = "union"]
   |  +- Data[@TextData = " or "]
   |  +- InlineTag[@Plain = "false", @TagName = "@link"]
   |  |  +- ExecutableRef[@Name = "append"]
   |  |  |  +- ClassRef[@EmptyForSelfClass = "true", @SimpleRef = ""]
   |  |  |  +- ClassRef[@EmptyForSelfClass = "false", @SimpleRef = "NodeStream"]
   |  |  +- Data[@TextData = "append"]
   |  +- Data[@TextData = ", may not preserve that ordering."]
   |  +- InlineTag[@Plain = "false", @TagName = "@link"]
   |  |  +- ExecutableRef[@Name = "map"]
   |  |  |  +- ClassRef[@EmptyForSelfClass = "true", @SimpleRef = ""]
   |  |  |  +- ClassRef[@EmptyForSelfClass = "false", @SimpleRef = "Function"]
   |  |  +- Data[@TextData = "map"]
   |  +- Data[@TextData = " and "]
   |  +- InlineTag[@Plain = "false", @TagName = "@link"]
   |  |  +- ExecutableRef[@Name = "flatMap"]
   |  |  |  +- ClassRef[@EmptyForSelfClass = "true", @SimpleRef = ""]
   |  |  |  +- ClassRef[@EmptyForSelfClass = "false", @SimpleRef = "Function"]
   |  |  +- Data[@TextData = "flatMap"]
   |  +- Data[@TextData = " operations may not preserve the ordering if the stream has more than one element, since the mapping is applied in order to each element of the receiver stream. This extends to methods defined in terms of map or flatMap, e.g."]
   |  +- InlineTag[@Plain = "false", @TagName = "@link"]
   |  |  +- ExecutableRef[@Name = "descendants"]
   |  |     +- ClassRef[@EmptyForSelfClass = "true", @SimpleRef = ""]
   |  +- Data[@TextData = " or "]
   |  +- InlineTag[@Plain = "false", @TagName = "@link"]
   |  |  +- ExecutableRef[@Name = "children"]
   |  |     +- ClassRef[@EmptyForSelfClass = "true", @SimpleRef = ""]
   |  +- Data[@TextData = "."]
   +- BlockTag[@ParamName = "T", @TagName = "@param", @TypeParamRef = "true"]
   |  +- Data[@TextData = "Type of nodes this stream contains. This parameter is covariant, which means for maximum flexibility, methods taking a node stream argument should declare it with an "extends" wildcard."]
   +- BlockTag[@TagName = "@author"]
   |  +- Data[@TextData = "Clément Fournier"]
   +- BlockTag[@TagName = "@implNote"]
   |  +- Data[@TextData = "Choosing to wrap a stream instead of extending the interface is to allow the functions to return NodeStreams, and to avoid the code bloat induced by delegation."]
   |  +- Html[@CloseSyntax = "IMPLICIT", @TagName = "p"]
   |     +- Data[@TextData = "The default implementation relies on the iterator method. From benchmarking, that appears more efficient than streams."]
   +- BlockTag[@TagName = "@since"]
      +- Data[@TextData = "7.0.0"]
