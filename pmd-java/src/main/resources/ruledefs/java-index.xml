<?xml version="1.0" encoding="UTF-8"?>
<ruleset xmlns="http://pmd.sourceforge.net/ruleset/3.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         name="JAVA"
         xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/3.0.0 http://pmd.sourceforge.net/ruleset_3_0_0.xsd">
   <description>All rules for the java language</description>
   <rule class="net.sourceforge.pmd.lang.java.rule.logging.MoreThanOneLoggerRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_logging-java.html#morethanonelogger"
         message="Class contains more than one logger."
         name="MoreThanOneLogger"
         since="2.0">
      <description>
Normally only one logger is used in each class.
    </description>
      <priority>2</priority>
      <example>
 
public class Foo {
    Logger log = Logger.getLogger(Foo.class.getName());
    // It is very rare to see two loggers on a class, normally
    // log information is multiplexed by levels
    Logger log2= Logger.getLogger(Foo.class.getName());
}

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_logging-java.html#loggerisnotstaticfinal"
         language="java"
         message="The Logger variable declaration does not contain the static and final modifiers"
         name="LoggerIsNotStaticFinal"
         since="2.0">
     <description>
In most cases, the Logger reference can be declared as static and final.
     </description>
     <priority>2</priority>
     <properties>
         <property name="xpath">
             <value>
                 
//VariableDeclarator
 [parent::FieldDeclaration]
 [../Type/ReferenceType
  /ClassOrInterfaceType[@Image='Logger']
   and
  (..[@Final='false'] or ..[@Static = 'false'] ) ]
                
             </value>
         </property>
     </properties>
     <example>
 
public class Foo{
    Logger log = Logger.getLogger(Foo.class.getName());                 // not recommended

    static final Logger log = Logger.getLogger(Foo.class.getName());    // preferred approach
}

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_logging-java.html#systemprintln"
         language="java"
         message="{0} is used"
         name="SystemPrintln"
         since="2.1">
     <description>
References to System.(out|err).print are usually intended for debugging purposes and can remain in
the codebase even in production code. By using a logger one can enable/disable this behaviour at
will (and by priority) and avoid clogging the Standard out log.
     </description>
     <priority>2</priority>
     <properties>
         <property name="xpath">
             <value>
                 
//Name[
    starts-with(@Image, 'System.out.print')
    or
    starts-with(@Image, 'System.err.print')
    ]
                
             </value>
         </property>
     </properties>
     <example>
 
class Foo{
    Logger log = Logger.getLogger(Foo.class.getName());
    public void testA () {
        System.out.println("Entering test");
        // Better use this
        log.fine("Entering test");
    }
}

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_logging-java.html#avoidprintstacktrace"
         language="java"
         message="Avoid printStackTrace(); use a logger call instead."
         name="AvoidPrintStackTrace"
         since="3.2">
      <description>
Avoid printStackTrace(); use a logger call instead.
    </description>
      <priority>3</priority>
      <properties>
        <property name="xpath">
            <value>

//PrimaryExpression
 [PrimaryPrefix/Name[contains(@Image,'printStackTrace')]]
 [PrimarySuffix[not(boolean(Arguments/ArgumentList/Expression))]]

            </value>
        </property>
      </properties>
      <example>

class Foo {
    void bar() {
        try {
            // do something
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.logging.GuardLogStatementJavaUtilRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_logging-java.html#guardlogstatementjavautil"
         language="java"
         message="There is log block not surrounded by if"
         name="GuardLogStatementJavaUtil"
         since="5.1.0">
      <description>
Whenever using a log level, one should check if the loglevel is actually enabled, or
otherwise skip the associate String creation and manipulation.
    </description>
      <priority>2</priority>
      <example>
 
//...
// Add this for performance
if (log.isLoggable(Level.FINE)) {
    log.fine("log something" + " and " + "concat strings");
}

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.logging.InvalidSlf4jMessageFormatRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_logging-java.html#invalidslf4jmessageformat"
         language="java"
         message="Invalid message format"
         name="InvalidSlf4jMessageFormat"
         since="5.5.0">
      <description>
Check for messages in slf4j loggers with non matching number of arguments and placeholders.
    </description>
      <priority>5</priority>
      <example>

LOGGER.error("forget the arg {}");
LOGGER.error("too many args {}", "arg1", "arg2");
LOGGER.error("param {}", "arg1", new IllegalStateException("arg")); //The exception is shown separately, so is correct.

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_braces.html#ifstmtsmustusebraces"
         language="java"
         message="Avoid using if statements without curly braces"
         name="IfStmtsMustUseBraces"
         since="1.0">
     <description>
Avoid using if statements without using braces to surround the code block. If the code 
formatting or indentation is lost then it becomes difficult to separate the code being
controlled from the rest.
     </description>
     <priority>3</priority>
       <properties>
           <property name="xpath">
               <value>
                   
//IfStatement[count(*) &lt; 3][not(Statement/Block)]
                   
               </value>
           </property>
       </properties>
     <example>
 
if (foo)    // not recommended
    x++;

if (foo) {  // preferred approach
    x++;
}

 
     </example>
     </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_braces.html#whileloopsmustusebraces"
         language="java"
         message="Avoid using 'while' statements without curly braces"
         name="WhileLoopsMustUseBraces"
         since="0.7">
      <description>
Avoid using 'while' statements without using braces to surround the code block. If the code 
formatting or indentation is lost then it becomes difficult to separate the code being
controlled from the rest.
      </description>
      <priority>3</priority>
        <properties>
            <property name="xpath">
                <value>

//WhileStatement[not(Statement/Block)]

                </value>
            </property>
        </properties>
      <example>

while (true)    // not recommended
      x++;
      
while (true) {  // preferred approach
      x++;
}

      </example>
    </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_braces.html#ifelsestmtsmustusebraces"
         language="java"
         message="Avoid using 'if...else' statements without curly braces"
         name="IfElseStmtsMustUseBraces"
         since="0.2">
       <description>
Avoid using if..else statements without using surrounding braces. If the code formatting 
or indentation is lost then it becomes difficult to separate the code being controlled 
from the rest.
       </description>
       <priority>3</priority>
         <properties>
             <property name="xpath">
                 <value>

//Statement
 [parent::IfStatement[@Else='true']]
 [not(child::Block)]
 [not(child::IfStatement)]
 
                 </value>
             </property>
         </properties>
       <example>

   // this is OK
if (foo) x++;

   // but this is not
if (foo)
       x = x+1;
   else
       x = x-1;

       </example>
     </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_braces.html#forloopsmustusebraces"
         language="java"
         message="Avoid using 'for' statements without curly braces"
         name="ForLoopsMustUseBraces"
         since="0.7">
       <description>
Avoid using 'for' statements without using curly braces. If the code formatting or 
indentation is lost then it becomes difficult to separate the code being controlled 
from the rest.
       </description>
       <priority>3</priority>
         <properties>
             <property name="xpath">
                 <value>
 
//ForStatement[not(Statement/Block)]
 
                 </value>
             </property>
         </properties>
       <example>

for (int i = 0; i &lt; 42; i++)
   foo();

       </example>
     </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.sunsecure.MethodReturnsInternalArrayRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_sunsecure.html#methodreturnsinternalarray"
         message="Returning ''{0}'' may expose an internal array."
         name="MethodReturnsInternalArray"
         since="2.2">
      <description>
Exposing internal arrays to the caller violates object encapsulation since elements can be 
removed or replaced outside of the object that owns it. It is safer to return a copy of the array.
    </description>
      <priority>3</priority>
      <example>

public class SecureSystem {
    UserData [] ud;
    public UserData [] getUserData() {
        // Don't return directly the internal array, return a copy
        return ud;
    }
}

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.sunsecure.ArrayIsStoredDirectlyRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_sunsecure.html#arrayisstoreddirectly"
         message="The user-supplied array ''{0}'' is stored directly."
         name="ArrayIsStoredDirectly"
         since="2.2">
      <description>
Constructors and methods receiving arrays should clone objects and store the copy.
This prevents future changes from the user from affecting the original array.
    </description>
      <priority>3</priority>
      <example>

public class Foo {
    private String [] x;
        public void foo (String [] param) {
        // Don't do this, make a copy of the array at least
        this.x=param;
    }
}

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.optimizations.LocalVariableCouldBeFinalRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_optimizations.html#localvariablecouldbefinal"
         message="Local variable ''{0}'' could be declared final"
         name="LocalVariableCouldBeFinal"
         since="2.2">
      <description>
A local variable assigned only once can be declared final.
    </description>
      <priority>3</priority>
      <example>

public class Bar {
    public void foo () {
    String txtA = "a";          // if txtA will not be assigned again it is better to do this:
    final String txtB = "b";
    }
}

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.optimizations.MethodArgumentCouldBeFinalRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_optimizations.html#methodargumentcouldbefinal"
         message="Parameter ''{0}'' is not assigned and could be declared final"
         name="MethodArgumentCouldBeFinal"
         since="2.2">
      <description>
A method argument that is never re-assigned within the method can be declared final.
    </description>
      <priority>3</priority>
      <example>

public void foo1 (String param) {       // do stuff with param never assigning it

}

public void foo2 (final String param) { // better, do stuff with param never assigning it

}

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.optimizations.AvoidInstantiatingObjectsInLoopsRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_optimizations.html#avoidinstantiatingobjectsinloops"
         message="Avoid instantiating new objects inside loops"
         name="AvoidInstantiatingObjectsInLoops"
         since="2.2">
      <description>
New objects created within loops should be checked to see if they can created outside them and reused.
    </description>
      <priority>3</priority>
      <example>

public class Something {
    public static void main( String as[] ) {
        for (int i = 0; i &lt; 10; i++) {
            Foo f = new Foo(); // Avoid this whenever you can it's really expensive
        }
    }
}

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_optimizations.html#usearraylistinsteadofvector"
         language="java"
         message="Use ArrayList instead of Vector"
         name="UseArrayListInsteadOfVector"
         since="3.0">
      <description>
ArrayList is a much better Collection implementation than Vector if thread-safe operation is not required.
    </description>
      <priority>3</priority>
      <properties>
        <property name="xpath">
            <value>

//CompilationUnit[count(ImportDeclaration) = 0 or count(ImportDeclaration/Name[@Image='java.util.Vector']) &gt; 0]
  //AllocationExpression/ClassOrInterfaceType
    [@Image='Vector' or @Image='java.util.Vector']

            </value>
        </property>
      </properties>
      <example>

public class SimpleTest extends TestCase {
    public void testX() {
    Collection c1 = new Vector();
    Collection c2 = new ArrayList();    // achieves the same with much better performance
    }
}

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_optimizations.html#simplifystartswith"
         language="java"
         message="This call to String.startsWith can be rewritten using String.charAt(0)"
         name="SimplifyStartsWith"
         since="3.1">
      <description>
Since it passes in a literal of length 1, calls to (string).startsWith can be rewritten using (string).charAt(0)
at the expense of some readability.
    </description>
      <priority>3</priority>
      <properties>
        <property name="xpath">
            <value>

//PrimaryExpression
 [PrimaryPrefix/Name
  [ends-with(@Image, '.startsWith')] or PrimarySuffix[@Image='startsWith']]
 [PrimarySuffix/Arguments/ArgumentList
  /Expression/PrimaryExpression/PrimaryPrefix
  /Literal
   [string-length(@Image)=3]
   [starts-with(@Image, '"')]
   [ends-with(@Image, '"')]
 ]

            </value>
        </property>
      </properties>
      <example>

public class Foo {

    boolean checkIt(String x) {
        return x.startsWith("a");   // suboptimal
    }

    boolean fasterCheckIt(String x) {
        return x.charAt(0) == 'a';  // faster approach
    }
}

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.optimizations.UseStringBufferForStringAppendsRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_optimizations.html#usestringbufferforstringappends"
         message="Prefer StringBuffer over += for concatenating strings"
         name="UseStringBufferForStringAppends"
         since="3.1">
      <description>
The use of the '+=' operator for appending strings causes the JVM to create and use an internal StringBuffer.
If a non-trivial number of these concatenations are being used then the explicit use of a StringBuilder or 
threadsafe StringBuffer is recommended to avoid this.
    </description>
      <priority>3</priority>
      <example>

public class Foo {
    void bar() {
        String a;
        a = "foo";
        a += " bar";
        // better would be:
        // StringBuilder a = new StringBuilder("foo");
        // a.append(" bar);
    }
}

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_optimizations.html#usearraysaslist"
         language="java"
         message="Use asList instead of tight loops"
         name="UseArraysAsList"
         since="3.5">
      <description>
The java.util.Arrays class has a "asList" method that should be used when you want to create a new List from
an array of objects. It is faster than executing a loop to copy all the elements of the array one by one.
    </description>
      <priority>3</priority>
      <properties>
        <property name="xpath">
            <value>

//Statement[
    (ForStatement) and (ForStatement//VariableInitializer//Literal[@IntLiteral='true' and @Image='0']) and (count(.//IfStatement)=0)
   ]
   //StatementExpression[
    PrimaryExpression/PrimaryPrefix/Name[
     substring-before(@Image,'.add') = ancestor::MethodDeclaration//LocalVariableDeclaration[
      ./Type//ClassOrInterfaceType[
       @Image = 'Collection' or 
       @Image = 'List' or @Image='ArrayList'
      ]
     ]
     /VariableDeclarator/VariableDeclaratorId[
      count(..//AllocationExpression/ClassOrInterfaceType[
       @Image="ArrayList"
      ]
      )=1
     ]/@Image
    ]
   and
   PrimaryExpression/PrimarySuffix/Arguments/ArgumentList/Expression/PrimaryExpression/PrimaryPrefix/Name
   [
     @Image = ancestor::MethodDeclaration//LocalVariableDeclaration[@Array="true"]/VariableDeclarator/VariableDeclaratorId/@Image
     or
     @Image = ancestor::MethodDeclaration//FormalParameter/VariableDeclaratorId/@Image
   ]
   /../..[count(.//PrimarySuffix)
   =1]/PrimarySuffix/Expression/PrimaryExpression/PrimaryPrefix
   /Name
   ]

            </value>
        </property>
      </properties>
      <example>

public class Test {
    public void foo(Integer[] ints) {
        // could just use Arrays.asList(ints)
        List l= new ArrayList(10);
        for (int i=0; i&lt; 100; i++) {
            l.add(ints[i]);
        }
        for (int i=0; i&lt; 100; i++) {
            l.add(a[i].toString()); // won't trigger the rule
        }
    }
}

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_optimizations.html#avoidarrayloops"
         language="java"
         message="System.arraycopy is more efficient"
         name="AvoidArrayLoops"
         since="3.5">
      <description>
Instead of manually copying data between two arrays, use the efficient System.arraycopy method instead.
    </description>
      <priority>3</priority>
      <properties>
        <property name="xpath">
            <value>

//Statement[(ForStatement or WhileStatement) and
count(*//AssignmentOperator[@Image = '='])=1
and
*/Statement
[
./Block/BlockStatement/Statement/StatementExpression/PrimaryExpression
/PrimaryPrefix/Name/../../PrimarySuffix/Expression
[(PrimaryExpression or AdditiveExpression) and count
(.//PrimaryPrefix/Name)=1]//PrimaryPrefix/Name/@Image
and
./Block/BlockStatement/Statement/StatementExpression/Expression/PrimaryExpression
/PrimaryPrefix/Name/../../PrimarySuffix[count
(..//PrimarySuffix)=1]/Expression[(PrimaryExpression
or AdditiveExpression) and count(.//PrimaryPrefix/Name)=1]
//PrimaryPrefix/Name/@Image
]]

            </value>
        </property>
      </properties>
      <example>

public class Test {
    public void bar() {
        int[] a = new int[10];
        int[] b = new int[10];
        for (int i=0;i&lt;10;i++) {
            b[i]=a[i];
        }

        int[] c = new int[10];
        // this will trigger the rule
        for (int i=0;i&lt;10;i++) {
            b[i]=a[c[i]];
        }
    }
}

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.optimizations.UnnecessaryWrapperObjectCreationRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_optimizations.html#unnecessarywrapperobjectcreation"
         message="Unnecessary wrapper object creation"
         name="UnnecessaryWrapperObjectCreation"
         since="3.8">
      <description>
Most wrapper classes provide static conversion methods that avoid the need to create intermediate objects
just to create the primitive forms. Using these avoids the cost of creating objects that also need to be 
garbage-collected later.
    </description>
      <priority>3</priority>
      <example>

public int convert(String s) {
    int i, i2;

    i = Integer.valueOf(s).intValue();  // this wastes an object
    i = Integer.parseInt(s);            // this is better

    i2 = Integer.valueOf(i).intValue(); // this wastes an object
    i2 = i;                             // this is better

    String s3 = Integer.valueOf(i2).toString(); // this wastes an object
    s3 = Integer.toString(i2);                  // this is better

    return i2;
}

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_optimizations.html#addemptystring"
         language="java"
         message="Do not add empty strings"
         name="AddEmptyString"
         since="4.0">
      <description>
The conversion of literals to strings by concatenating them with empty strings is inefficient.
It is much better to use one of the type-specific toString() methods instead.
    </description>
      <priority>3</priority>
      <properties>
        <property name="xpath">
            <value>
 
//AdditiveExpression/PrimaryExpression/PrimaryPrefix/Literal[@Image='""']

            </value>
        </property>
      </properties>
      <example>
 
String s = "" + 123;                // inefficient
String t = Integer.toString(456);   // preferred approach

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.optimizations.RedundantFieldInitializerRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_optimizations.html#redundantfieldinitializer"
         language="java"
         message="Avoid using redundant field initializer for ''${variableName}''"
         name="RedundantFieldInitializer"
         since="5.0">
      <description>
Java will initialize fields with known default values so any explicit initialization of those same defaults
is redundant and results in a larger class file (approximately three additional bytecode instructions per field).
    </description>
      <priority>3</priority>
      <example>

public class C {
    boolean b   = false;    // examples of redundant initializers
    byte by     = 0;
    short s     = 0;
    char c      = 0;
    int i       = 0;
    long l      = 0;

    float f     = .0f;    // all possible float literals
    doable d    = 0d;     // all possible double literals
    Object o    = null;

    MyClass mca[] = null;
    int i1 = 0, ia1[] = null;

    class Nested {
        boolean b = false;
    }
}

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.optimizations.PrematureDeclarationRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_optimizations.html#prematuredeclaration"
         language="java"
         message="Avoid declaring a variable if it is unreferenced before a possible exit point."
         name="PrematureDeclaration"
         since="5.0">
      <description>
Checks for variables that are defined before they might be used. A reference is deemed to be premature if it is created right before a block of code that doesn't use it that also has the ability to return or throw an exception.
    </description>
      <priority>3</priority>
      <example>

public int getLength(String[] strings) {

    int length = 0; // declared prematurely

    if (strings == null || strings.length == 0) return 0;

    for (String str : strings) {
        length += str.length();
    }

    return length;
}

    </example>
  </rule>
   <rule ref="rulesets/java/migrating.xml/AvoidAssertAsIdentifier"/>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_j2ee.html#useproperclassloader"
         language="java"
         message="In J2EE, getClassLoader() might not work as expected.  Use Thread.currentThread().getContextClassLoader() instead."
         name="UseProperClassLoader"
         since="3.7">
      <description>
In J2EE, the getClassLoader() method might not work as expected. Use 
Thread.currentThread().getContextClassLoader() instead.
   </description>
      <priority>3</priority>
      <properties>
          <property name="xpath">
              <value>

//PrimarySuffix[@Image='getClassLoader']
 
              </value>
          </property>
      </properties>
      <example>

public class Foo {
    ClassLoader cl = Bar.class.getClassLoader();
}

  </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_j2ee.html#mdbandsessionbeannamingconvention"
         language="java"
         message="SessionBean or MessageBean should be suffixed by Bean"
         name="MDBAndSessionBeanNamingConvention"
         since="4.0">
        <description>
The EJB Specification states that any MessageDrivenBean or SessionBean should be suffixed by 'Bean'.
        </description>
        <priority>4</priority>
        <properties>
            <property name="xpath">
                <value>
//TypeDeclaration/ClassOrInterfaceDeclaration
[
    (
        (./ImplementsList/ClassOrInterfaceType[ends-with(@Image,'SessionBean')])
        or
        (./ImplementsList/ClassOrInterfaceType[ends-with(@Image,'MessageDrivenBean')])
    )
    and
    not
    (
        ends-with(@Image,'Bean')
    )
]
             </value>
            </property>
        </properties>
        <example>
            
public class SomeBean implements SessionBean{}                  // proper name

public class MissingTheProperSuffix implements SessionBean {}   // non-standard name
            
        </example>
    </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_j2ee.html#remotesessioninterfacenamingconvention"
         language="java"
         message="Remote Home interface of a Session EJB should be suffixed by 'Home'"
         name="RemoteSessionInterfaceNamingConvention"
         since="4.0">
        <description>
A Remote Home interface type of a Session EJB should be suffixed by 'Home'.
        </description>
        <priority>4</priority>
        <properties>
            <property name="xpath">
                <value>
                    
//ClassOrInterfaceDeclaration
[
    (
        (./ExtendsList/ClassOrInterfaceType[ends-with(@Image,'EJBHome')])
    )
    and
    not
    (
        ends-with(@Image,'Home')
    )
]
                    
                </value>
            </property>
        </properties>
        <example>
            
public interface MyBeautifulHome extends javax.ejb.EJBHome {}       // proper name

public interface MissingProperSuffix extends javax.ejb.EJBHome {}   // non-standard name
            
        </example>
    </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_j2ee.html#localinterfacesessionnamingconvention"
         language="java"
         message="The Local Interface of a Session EJB should be suffixed by 'Local'"
         name="LocalInterfaceSessionNamingConvention"
         since="4.0">
        <description>
The Local Interface of a Session EJB should be suffixed by 'Local'.
        </description>
        <priority>4</priority>
        <properties>
            <property name="xpath">
                <value>
                    
//ClassOrInterfaceDeclaration
[
    (
        (./ExtendsList/ClassOrInterfaceType[ends-with(@Image,'EJBLocalObject')])
    )
    and
    not
    (
        ends-with(@Image,'Local')
    )
]
                    
                </value>
            </property>
        </properties>
        <example>
            
public interface MyLocal extends javax.ejb.EJBLocalObject {}                // proper name

public interface MissingProperSuffix extends javax.ejb.EJBLocalObject {}    // non-standard name
            
        </example>
    </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_j2ee.html#localhomenamingconvention"
         language="java"
         message="The Local Home interface of a Session EJB should be suffixed by 'LocalHome'"
         name="LocalHomeNamingConvention"
         since="4.0">
        <description>
The Local Home interface of a Session EJB should be suffixed by 'LocalHome'.
        </description>
        <priority>4</priority>
        <properties>
            <property name="xpath">
                <value>
                    
//ClassOrInterfaceDeclaration
[
    (
        (./ExtendsList/ClassOrInterfaceType[ends-with(@Image,'EJBLocalHome')])
    )
    and
    not
    (
        ends-with(@Image,'LocalHome')
    )
]
                    
                </value>
            </property>
        </properties>
        <example>
            
public interface MyBeautifulLocalHome extends javax.ejb.EJBLocalHome {} // proper name

public interface MissingProperSuffix extends javax.ejb.EJBLocalHome {}  // non-standard name
            
        </example>
    </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_j2ee.html#remoteinterfacenamingconvention"
         language="java"
         message="Remote Interface of a Session EJB should NOT be suffixed"
         name="RemoteInterfaceNamingConvention"
         since="4.0">
        <description>
Remote Interface of a Session EJB should not have a suffix.
        </description>
        <priority>4</priority>
        <properties>
            <property name="xpath">
                <value>
                    
//ClassOrInterfaceDeclaration
[
    (
        (./ExtendsList/ClassOrInterfaceType[ends-with(@Image,'EJBObject')])
    )
    and
    (
        ends-with(@Image,'Session')
        or
        ends-with(@Image,'EJB')
        or
        ends-with(@Image,'Bean')
    )
]
                    
                </value>
            </property>
        </properties>
        <example>
            
/* Poor Session suffix */
public interface BadSuffixSession extends javax.ejb.EJBObject {}

/* Poor EJB suffix */
public interface BadSuffixEJB extends javax.ejb.EJBObject {}

/* Poor Bean suffix */
public interface BadSuffixBean extends javax.ejb.EJBObject {}
            
        </example>
    </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_j2ee.html#donotcallsystemexit"
         language="java"
         message="System.exit() should not be used in J2EE/JEE apps"
         name="DoNotCallSystemExit"
         since="4.1">
      <description>
Web applications should not call System.exit(), since only the web container or the
application server should stop the JVM. This rule also checks for the equivalent call Runtime.getRuntime().exit().
    </description>
      <priority>3</priority>
      <properties>
        <property name="xpath">
            <value>
//Name[
    starts-with(@Image,'System.exit')
    or
    (starts-with(@Image,'Runtime.getRuntime') and ../../PrimarySuffix[ends-with(@Image,'exit')])
]
</value>
        </property>
      </properties>
      <example>
public void bar() {
    System.exit(0);                 // never call this when running in an application server!
}
public void foo() {
    Runtime.getRuntime().exit(0);   // never stop the JVM manually, the container will do this.
}
     </example>
    </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_j2ee.html#staticejbfieldshouldbefinal"
         language="java"
         message="EJB's shouldn't have non-final static fields"
         name="StaticEJBFieldShouldBeFinal"
         since="4.1">
      <description>
According to the J2EE specification, an EJB should not have any static fields
with write access. However, static read-only fields are allowed. This ensures proper
behavior especially when instances are distributed by the container on several JREs.
    </description>
      <priority>3</priority>
      <properties>
        <property name="xpath">
            <value>
//ClassOrInterfaceDeclaration[
    (
    (./ImplementsList/ClassOrInterfaceType[ends-with(@Image,'SessionBean')])
    or
    (./ImplementsList/ClassOrInterfaceType[ends-with(@Image,'EJBHome')])
    or
    (./ImplementsList/ClassOrInterfaceType[ends-with(@Image,'EJBLocalObject')])
    or
    (./ImplementsList/ClassOrInterfaceType[ends-with(@Image,'EJBLocalHome')])
    or
    (./ExtendsList/ClassOrInterfaceType[ends-with(@Image,'EJBObject')])
    )
    and
    (./ClassOrInterfaceBody/ClassOrInterfaceBodyDeclaration[
         (./FieldDeclaration[@Static = 'true'])
         and
         (./FieldDeclaration[@Final = 'false'])
    ])
]
</value>
        </property>
      </properties>
      <example>
public class SomeEJB extends EJBObject implements EJBLocalHome {

    private static int CountA;          // poor, field can be edited

    private static final int CountB;    // preferred, read-only access
}
     </example>
    </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_j2ee.html#donotusethreads"
         language="java"
         message="To be compliant to J2EE, a webapp should not use any thread."
         name="DoNotUseThreads"
         since="4.1">
      <description>
The J2EE specification explicitly forbids the use of threads.
    </description>
      <priority>3</priority>
      <properties>
        <property name="xpath">
            <value>
//ClassOrInterfaceType[@Image = 'Thread' or @Image = 'Runnable']
            </value>
        </property>
      </properties>
      <example>
        
// This is not allowed
public class UsingThread extends Thread {

}

// Neither this,
public class OtherThread implements Runnable {
    // Nor this ...
    public void methode() {
        Runnable thread = new Thread(); thread.run();
    }
}

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_junit.html#junitstaticsuite"
         language="java"
         message="You have a suite() method that is not both public and static, so JUnit won't call it to get your TestSuite.  Is that what you wanted to do?"
         name="JUnitStaticSuite"
         since="1.0">
      <description>
The suite() method in a JUnit test needs to be both public and static.
      </description>
      <priority>3</priority>
        <properties>
        <property name="xpath">
            <value>
                
//MethodDeclaration[not(@Static='true') or not(@Public='true')]
[MethodDeclarator/@Image='suite']
[MethodDeclarator/FormalParameters/@ParameterCount=0]
[ancestor::ClassOrInterfaceDeclaration[//ClassOrInterfaceType[pmd-java:typeof(@Image, 'junit.framework.TestCase','TestCase')] or //MarkerAnnotation/Name[pmd-java:typeof(@Image, 'org.junit.Test', 'Test')]]]
                
            </value>
        </property>
        </properties>
      <example>
  
import junit.framework.*;

public class Foo extends TestCase {
    public void suite() {}         // oops, should be static
    private static void suite() {} // oops, should be public
}
  
      </example>
      </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_junit.html#junitspelling"
         language="java"
         message="You may have misspelled a JUnit framework method (setUp or tearDown)"
         name="JUnitSpelling"
         since="1.0">
      <description>
Some JUnit framework methods are easy to misspell.
    </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>
              
//MethodDeclarator[(not(@Image = 'setUp')
 and translate(@Image, 'SETuP', 'setUp') = 'setUp')
 or (not(@Image = 'tearDown')
 and translate(@Image, 'TEARdOWN', 'tearDown') = 'tearDown')]
 [FormalParameters[count(*) = 0]]
[ancestor::ClassOrInterfaceDeclaration[//ClassOrInterfaceType[pmd-java:typeof(@Image, 'junit.framework.TestCase','TestCase')] or //MarkerAnnotation/Name[pmd-java:typeof(@Image, 'org.junit.Test', 'Test')]]]
              
          </value>
         </property>
      </properties>
      <example>

import junit.framework.*;

public class Foo extends TestCase {
    public void setup() {}    // oops, should be setUp
    public void TearDown() {} // oops, should be tearDown
}

    </example>
    </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.junit.JUnitAssertionsShouldIncludeMessageRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_junit.html#junitassertionsshouldincludemessage"
         message="JUnit assertions should include a message"
         name="JUnitAssertionsShouldIncludeMessage"
         since="1.04">
      <description>
JUnit assertions should include an informative message - i.e., use the three-argument version of 
assertEquals(), not the two-argument version.
      </description>
        <priority>3</priority>
      <example>
  
public class Foo extends TestCase {
    public void testSomething() {
        assertEquals("foo", "bar");
        // Use the form:
        // assertEquals("Foo does not equals bar", "foo", "bar");
        // instead
    }
}
  
      </example>
    </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.junit.JUnitTestsShouldIncludeAssertRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_junit.html#junittestsshouldincludeassert"
         message="JUnit tests should include assert() or fail()"
         name="JUnitTestsShouldIncludeAssert"
         since="2.0">
        <description>
JUnit tests should include at least one assertion.  This makes the tests more robust, and using assert 
with messages provide the developer a clearer idea of what the test does.
        </description>
          <priority>3</priority>
        <example>
    
public class Foo extends TestCase {
   public void testSomething() {
      Bar b = findBar();
   // This is better than having a NullPointerException
   // assertNotNull("bar not found", b);
   b.work();
   }
}
    
        </example>
      </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.junit.TestClassWithoutTestCasesRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_junit.html#testclasswithouttestcases"
         message="This class name ends with 'Test' but contains no test cases"
         name="TestClassWithoutTestCases"
         since="3.0">
      <description>
Test classes end with the suffix Test. Having a non-test class with that name is not a good practice, 
since most people will assume it is a test case. Test classes have test methods named testXXX.
      </description>
        <priority>3</priority>
      <example>

//Consider changing the name of the class if it is not a test
//Consider adding test methods if it is a test
public class CarTest {
   public static void main(String[] args) {
    // do something
   }
   // code
}

      </example>
    </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_junit.html#unnecessarybooleanassertion"
         language="java"
         message="assertTrue(true) or similar statements are unnecessary"
         name="UnnecessaryBooleanAssertion"
         since="3.0">
      <description>
A JUnit test assertion with a boolean literal is unnecessary since it always will evaluate to the same thing.
Consider using flow control (in case of assertTrue(false) or similar) or simply removing
statements like assertTrue(true) and assertFalse(false).  If you just want a test to halt after finding
an error, use the fail() method and provide an indication message of why it did.
      </description>
      <priority>3</priority>
      <properties>
          <property name="xpath">
              <value>
    
//StatementExpression
[
PrimaryExpression/PrimaryPrefix/Name[@Image='assertTrue' or  @Image='assertFalse']
and
PrimaryExpression/PrimarySuffix/Arguments/ArgumentList/Expression
[PrimaryExpression/PrimaryPrefix/Literal/BooleanLiteral
or
UnaryExpressionNotPlusMinus[@Image='!']
/PrimaryExpression/PrimaryPrefix[Literal/BooleanLiteral or Name[count(../../*)=1]]]
]
[ancestor::ClassOrInterfaceDeclaration[//ClassOrInterfaceType[pmd-java:typeof(@Image, 'junit.framework.TestCase','TestCase')] or //MarkerAnnotation/Name[pmd-java:typeof(@Image, 'org.junit.Test', 'Test')]]]

              </value>
          </property>
      </properties>
      <example>

public class SimpleTest extends TestCase {
    public void testX() {
        assertTrue(true);       // serves no real purpose
    }
}

          </example>
    </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_junit.html#useassertequalsinsteadofasserttrue"
         language="java"
         message="Use assertEquals(x, y) instead of assertTrue(x.equals(y))"
         name="UseAssertEqualsInsteadOfAssertTrue"
         since="3.1">
      <description>
This rule detects JUnit assertions in object equality. These assertions should be made by more specific methods, like assertEquals.
      </description>
      <priority>3</priority>
      <properties>
        <property name="xpath">
            <value>
                
//PrimaryExpression[
    PrimaryPrefix/Name[@Image = 'assertTrue']
][
    PrimarySuffix/Arguments/ArgumentList/Expression/PrimaryExpression/PrimaryPrefix/Name
    [ends-with(@Image, '.equals')]
]
[ancestor::ClassOrInterfaceDeclaration[//ClassOrInterfaceType[pmd-java:typeof(@Image, 'junit.framework.TestCase','TestCase')] or //MarkerAnnotation/Name[pmd-java:typeof(@Image, 'org.junit.Test', 'Test')]]]
 
            </value>
        </property>
      </properties>
      <example>

public class FooTest extends TestCase {
    void testCode() {
        Object a, b;
        assertTrue(a.equals(b));                    // bad usage
        assertEquals(?a should equals b?, a, b);    // good usage
    }
}

      </example>
    </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_junit.html#useassertsameinsteadofasserttrue"
         language="java"
         message="Use assertSame(x, y) instead of assertTrue(x==y), or assertNotSame(x,y) vs assertFalse(x==y)"
         name="UseAssertSameInsteadOfAssertTrue"
         since="3.1">
      <description>
This rule detects JUnit assertions in object references equality. These assertions should be made 
by more specific methods, like assertSame, assertNotSame.
      </description>
      <priority>3</priority>
      <properties>
        <property name="xpath">
            <value>
                
//PrimaryExpression[
    PrimaryPrefix/Name
     [@Image = 'assertTrue' or @Image = 'assertFalse']
]
[PrimarySuffix/Arguments
 /ArgumentList/Expression
 /EqualityExpression[count(.//NullLiteral) = 0]]
[ancestor::ClassOrInterfaceDeclaration[//ClassOrInterfaceType[pmd-java:typeof(@Image, 'junit.framework.TestCase','TestCase')] or //MarkerAnnotation/Name[pmd-java:typeof(@Image, 'org.junit.Test', 'Test')]]]
 
            </value>
        </property>
      </properties>
      <example>

public class FooTest extends TestCase {
    void testCode() {
        Object a, b;
        assertTrue(a == b); // bad usage
        assertSame(a, b);   // good usage
    }
}

      </example>
    </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_junit.html#useassertnullinsteadofasserttrue"
         language="java"
         message="Use assertNull(x) instead of assertTrue(x==null), or assertNotNull(x) vs assertFalse(x==null)"
         name="UseAssertNullInsteadOfAssertTrue"
         since="3.5">
       <description>
This rule detects JUnit assertions in object references equality. These assertions should be made by 
more specific methods, like assertNull, assertNotNull.
       </description>
       <priority>3</priority>
     <properties>
         <property name="xpath">
             <value>
                 
//PrimaryExpression[
 PrimaryPrefix/Name[@Image = 'assertTrue' or @Image = 'assertFalse']
][
 PrimarySuffix/Arguments/ArgumentList[
  Expression/EqualityExpression/PrimaryExpression/PrimaryPrefix/Literal/NullLiteral
 ]
]
[ancestor::ClassOrInterfaceDeclaration[//ClassOrInterfaceType[pmd-java:typeof(@Image, 'junit.framework.TestCase','TestCase')] or //MarkerAnnotation/Name[pmd-java:typeof(@Image, 'org.junit.Test', 'Test')]]]
  
             </value>
         </property>
     </properties>
       <example>
 
public class FooTest extends TestCase {
    void testCode() {
        Object a = doSomething();
        assertTrue(a==null);    // bad usage
        assertNull(a);          // good usage
        assertTrue(a != null);  // bad usage
        assertNotNull(a);       // good usage
    }
}

       </example>
     </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_junit.html#simplifybooleanassertion"
         language="java"
         message="assertTrue(!expr) can be replaced by assertFalse(expr)"
         name="SimplifyBooleanAssertion"
         since="3.6">
      <description>
Avoid negation in an assertTrue or assertFalse test.

For example, rephrase:

    assertTrue(!expr);

as:

    assertFalse(expr);

      </description>
      <priority>3</priority>
      <properties>
          <property name="xpath">
              <value>
    
//StatementExpression
[
.//Name[@Image='assertTrue' or  @Image='assertFalse']
and
PrimaryExpression/PrimarySuffix/Arguments/ArgumentList
 /Expression/UnaryExpressionNotPlusMinus[@Image='!']
/PrimaryExpression/PrimaryPrefix
]
[ancestor::ClassOrInterfaceDeclaration[//ClassOrInterfaceType[pmd-java:typeof(@Image, 'junit.framework.TestCase','TestCase')] or //MarkerAnnotation/Name[pmd-java:typeof(@Image, 'org.junit.Test', 'Test')]]]

              </value>
          </property>
      </properties>
      <example>

public class SimpleTest extends TestCase {
    public void testX() {
        assertTrue("not empty", !r.isEmpty());  // replace with assertFalse("not empty", r.isEmpty())
        assertFalse(!r.isEmpty());              // replace with assertTrue(r.isEmpty())
    }
}

          </example>
    </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_junit.html#junittestcontainstoomanyasserts"
         language="java"
         message="JUnit tests should not contain more than ${maximumAsserts} assert(s)."
         name="JUnitTestContainsTooManyAsserts"
         since="5.0">
      <description>
JUnit tests should not contain too many asserts.  Many asserts are indicative of a complex test, for which 
it is harder to verify correctness.  Consider breaking the test scenario into multiple, shorter test scenarios.  
Customize the maximum number of assertions used by this Rule to suit your needs.
    </description>
      <priority>3</priority>
      <properties>
        <property description="Maximum number of Asserts in a test method" max="1000" min="1"
                   name="maximumAsserts"
                   type="Integer"
                   value="1"/>
        <property name="xpath">
            <value>
//MethodDeclarator[(@Image[fn:matches(.,'^test')] or ../../Annotation/MarkerAnnotation/Name[@Image='Test']) and count(..//PrimaryPrefix/Name[@Image[fn:matches(.,'^assert')]]) &gt; $maximumAsserts]
            </value>
        </property>
      </properties>
      <example>

public class MyTestCase extends TestCase {
    // Ok
    public void testMyCaseWithOneAssert() {
        boolean myVar = false;
        assertFalse("should be false", myVar);
    }

    // Bad, too many asserts (assuming max=1)
    public void testMyCaseWithMoreAsserts() {
        boolean myVar = false;
        assertFalse("myVar should be false", myVar);
        assertEquals("should equals false", false, myVar);
    }
}

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_junit.html#useasserttrueinsteadofassertequals"
         language="java"
         message="Use assertTrue(x)/assertFalse(x) instead of assertEquals(true, x)/assertEquals(false, x) or assertEquals(Boolean.TRUE, x)/assertEquals(Boolean.FALSE, x)."
         name="UseAssertTrueInsteadOfAssertEquals"
         since="5.0">
      <description>
When asserting a value is the same as a literal or Boxed boolean, use assertTrue/assertFalse, instead of assertEquals.
    </description>
      <priority>3</priority>
      <properties>
        <property name="xpath">
            <value>
//PrimaryExpression[PrimaryPrefix/Name[@Image = 'assertEquals']]
[
  PrimarySuffix/Arguments/ArgumentList/Expression/PrimaryExpression/PrimaryPrefix/Literal/BooleanLiteral
  or
  PrimarySuffix/Arguments/ArgumentList/Expression/PrimaryExpression/PrimaryPrefix
  /Name[(@Image = 'Boolean.TRUE' or @Image = 'Boolean.FALSE')]
]
            </value>
        </property>
      </properties>
      <example>

public class MyTestCase extends TestCase {
    public void testMyCase() {
        boolean myVar = true;
        // Ok
        assertTrue("myVar is true", myVar);
        // Bad
        assertEquals("myVar is true", true, myVar);
        // Bad
        assertEquals("myVar is false", false, myVar);
        // Bad
        assertEquals("myVar is true", Boolean.TRUE, myVar);
        // Bad
        assertEquals("myVar is false", Boolean.FALSE, myVar);
    }
}

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_controversial.html#unnecessaryconstructor"
         language="java"
         message="Avoid unnecessary constructors - the compiler will generate these for you"
         name="UnnecessaryConstructor"
         since="1.0">
      <description>
This rule detects when a constructor is not necessary; i.e., when there is only one constructor,
it's public, has an empty body, and takes no arguments.
      </description>
      <priority>3</priority>
        <properties>
            <property name="xpath">
                <value>
                    
//ClassOrInterfaceBody[count(ClassOrInterfaceBodyDeclaration/ConstructorDeclaration)=1]
/ClassOrInterfaceBodyDeclaration/ConstructorDeclaration
[@Public='true']
[not(FormalParameters/*)]
[not(BlockStatement)]
[not(NameList)]
[count(ExplicitConstructorInvocation/Arguments/ArgumentList/Expression)=0]
                    
                </value>
            </property>
        </properties>
      <example>
  
public class Foo {
  public Foo() {}
}
  
      </example>
    </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.controversial.NullAssignmentRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_controversial.html#nullassignment"
         message="Assigning an Object to null is a code smell.  Consider refactoring."
         name="NullAssignment"
         since="1.02">
      <description>
Assigning a "null" to a variable (outside of its declaration) is usually bad form.  Sometimes, this type
of assignment is an indication that the programmer doesn't completely understand what is going on in the code.

NOTE: This sort of assignment may used in some cases to dereference objects and encourage garbage collection.
      </description>
        <priority>3</priority>
      <example>
 
public void bar() {
  Object x = null; // this is OK
  x = new Object();
     // big, complex piece of code here
  x = null; // this is not required
     // big, complex piece of code here
}

 
      </example>
    </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.controversial.OnlyOneReturnRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_controversial.html#onlyonereturn"
         message="A method should have only one exit point, and that should be the last statement in the method"
         name="OnlyOneReturn"
         since="1.0">
     <description>
A method should have only one exit point, and that should be the last statement in the method.
     </description>
        <priority>3</priority>
     <example>
 
public class OneReturnOnly1 {
  public void foo(int x) {
    if (x &gt; 0) {
      return "hey";   // first exit
    }
    return "hi";	// second exit
  }
}
 
     </example>
     </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.controversial.AssignmentInOperandRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_controversial.html#assignmentinoperand"
         message="Avoid assignments in operands"
         name="AssignmentInOperand"
         since="1.03">
      <description>
Avoid assignments in operands; this can make code more complicated and harder to read.
  </description>
      <priority>3</priority>
      <example>
  
public void bar() {
    int x = 2;
    if ((x = getX()) == 3) {
      System.out.println("3!");
    }
}
  
  </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_controversial.html#atleastoneconstructor"
         language="java"
         message="Each class should declare at least one constructor"
         name="AtLeastOneConstructor"
         since="1.04">
      <description>
Each class should declare at least one constructor.
  </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>
              
//ClassOrInterfaceDeclaration[
  not(ClassOrInterfaceBody/ClassOrInterfaceBodyDeclaration/ConstructorDeclaration)
  and
  (@Static = 'false')
  and
  (count(./descendant::MethodDeclaration[@Static = 'true']) &lt; 1)
]
  [@Interface='false']

          </value>
         </property>
      </properties>
      <example>
  
public class Foo {
   // missing constructor
  public void doSomething() { ... }
  public void doOtherThing { ... }
}
  
  </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.controversial.DontImportSunRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_controversial.html#dontimportsun"
         message="Avoid importing anything from the 'sun.*' packages"
         name="DontImportSun"
         since="1.5">
       <description>
Avoid importing anything from the 'sun.*' packages.  These packages are not portable and are likely to change.
       </description>
       <priority>4</priority>
       <example>

import sun.misc.foo;
public class Foo {}

       </example>
    </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.controversial.SuspiciousOctalEscapeRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_controversial.html#suspiciousoctalescape"
         message="Suspicious decimal characters following octal escape in string literal"
         name="SuspiciousOctalEscape"
         since="1.5">
      <description>
A suspicious octal escape sequence was found inside a String literal.
The Java language specification (section 3.10.6) says an octal
escape sequence inside a literal String shall consist of a backslash
followed by:

    OctalDigit | OctalDigit OctalDigit | ZeroToThree OctalDigit OctalDigit

Any octal escape sequence followed by non-octal digits can be confusing,
e.g. "\038" is interpreted as the octal escape sequence "\03" followed by
the literal character "8".
      </description>
      <priority>3</priority>
      <example>

public void foo() {
  // interpreted as octal 12, followed by character '8'
  System.out.println("suspicious: \128");
}

      </example>
    </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_controversial.html#callsuperinconstructor"
         language="java"
         message="It is a good practice to call super() in a constructor"
         name="CallSuperInConstructor"
         since="3.0">
      <description>
It is a good practice to call super() in a constructor. If super() is not called but
another constructor (such as an overloaded constructor) is called, this rule will not report it.
      </description>
      <priority>3</priority>
      <properties>
          <property name="xpath">
              <value>
    
//ClassOrInterfaceDeclaration[ count (ExtendsList/*) &gt; 0 ]
/ClassOrInterfaceBody
 /ClassOrInterfaceBodyDeclaration
 /ConstructorDeclaration[ count (.//ExplicitConstructorInvocation)=0 ]
    
              </value>
          </property>
      </properties>
      <example>

public class Foo extends Bar{
  public Foo() {
   // call the constructor of Bar
   super();
  }
 public Foo(int code) {
  // do something with code
   this();
   // no problem with this
  }
}

      </example>
    </rule>
   <rule deprecated="true" name="UnnecessaryParentheses"
         ref="rulesets/java/unnecessary.xml/UselessParentheses"/>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_controversial.html#defaultpackage"
         language="java"
         message="Use explicit scoping instead of the default package private level"
         name="DefaultPackage"
         since="3.4">
        <description>
Use explicit scoping instead of accidental usage of default package private level.
The rule allows methods and fields annotated with Guava's @VisibleForTesting.
        </description>
        <priority>3</priority>
        <properties>
            <property name="xpath">
                <value>
//ClassOrInterfaceDeclaration[@Interface='false']
/ClassOrInterfaceBody
/ClassOrInterfaceBodyDeclaration
[not(Annotation//Name[ends-with(@Image, 'VisibleForTesting')])]
[
FieldDeclaration[@PackagePrivate='true']
or MethodDeclaration[@PackagePrivate='true']
]
                </value>
            </property>
        </properties>
    </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.controversial.DataflowAnomalyAnalysisRule"
         dfa="true"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_controversial.html#dataflowanomalyanalysis"
         message="Found ''{0}''-anomaly for variable ''{1}'' (lines ''{2}''-''{3}'')."
         name="DataflowAnomalyAnalysis"
         since="3.9">
      <description>The dataflow analysis tracks local definitions, undefinitions and references to variables on different paths on the data flow.
From those informations there can be found various problems.

1. UR - Anomaly: There is a reference to a variable that was not defined before. This is a bug and leads to an error.
2. DU - Anomaly: A recently defined variable is undefined. These anomalies may appear in normal source text.
3. DD - Anomaly: A recently defined variable is redefined. This is ominous but don't have to be a bug.
          </description>
          <priority>5</priority>
          <example>

public void foo() {
  int buz = 5;
  buz = 6; // redefinition of buz -&gt; dd-anomaly
  foo(buz);
  buz = 2;
} // buz is undefined when leaving scope -&gt; du-anomaly

          </example>
        </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_controversial.html#avoidfinallocalvariable"
         language="java"
         message="Avoid using final local variables, turn them into fields"
         name="AvoidFinalLocalVariable"
         since="4.1">
          <description>Avoid using final local variables, turn them into fields.</description>
          <priority>3</priority>
          <properties>
              <property name="xpath">
                  <value>
//LocalVariableDeclaration[
  @Final = 'true'
  and not(../../ForStatement)
  and
  (
    (count(VariableDeclarator/VariableInitializer) = 0)
    or
    (VariableDeclarator/VariableInitializer/Expression/PrimaryExpression/PrimaryPrefix/Literal)
  )
]
      </value>
              </property>
          </properties>
          <example>
public class MyClass {
    public void foo() {
        final String finalLocalVariable;
    }
}
       </example>
    </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_controversial.html#avoidusingshorttype"
         language="java"
         message="Do not use the short type"
         name="AvoidUsingShortType"
         since="4.1">
        <description>
Java uses the 'short' type to reduce memory usage, not to optimize calculation. In fact, the JVM does not have any
arithmetic capabilities for the short type: the JVM must convert the short into an int, do the proper calculation
and convert the int back to a short. Thus any storage gains found through use of the 'short' type may be offset by
adverse impacts on performance.
        </description>
        <priority>1</priority>
        <properties>
            <property name="xpath">
                <value>
                    
//PrimitiveType[@Image = 'short'][name(../..) != 'CastExpression']
                    
                </value>
            </property>
        </properties>
        <example>
            
public class UsingShort {
   private short doNotUseShort = 0;

   public UsingShort() {
    short shouldNotBeUsed = 1;
    doNotUseShort += shouldNotBeUsed;
  }
}
       
     </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_controversial.html#avoidusingvolatile"
         language="java"
         message="Use of modifier volatile is not recommended."
         name="AvoidUsingVolatile"
         since="4.1">
        <description>
Use of the keyword 'volatile' is generally used to fine tune a Java application, and therefore, requires
a good expertise of the Java Memory Model. Moreover, its range of action is somewhat misknown. Therefore,
the volatile keyword should not be used for maintenance purpose and portability.
        </description>
        <priority>2</priority>
        <properties>
            <property name="xpath">
                <value>
                    
//FieldDeclaration[contains(@Volatile,'true')]
                    
                </value>
            </property>
        </properties>
      <example>
      
public class ThrDeux {
  private volatile String var1; // not suggested
  private          String var2; // preferred
}
      
    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_controversial.html#avoidusingnativecode"
         language="java"
         message="The use of native code is not recommended."
         name="AvoidUsingNativeCode"
         since="4.1">
        <description>
Unnecessary reliance on Java Native Interface (JNI) calls directly reduces application portability
and increases the maintenance burden.
        </description>
        <priority>2</priority>
        <properties>
            <property name="xpath">
                <value>
                    
//Name[starts-with(@Image,'System.loadLibrary')]
                    
                </value>
            </property>
        </properties>
        <example>
            
public class SomeJNIClass {

     public SomeJNIClass() {
         System.loadLibrary("nativelib");
     }

     static {
         System.loadLibrary("nativelib");
     }

     public void invalidCallsInMethod() throws SecurityException, NoSuchMethodException {
         System.loadLibrary("nativelib");
     }
}
            
        </example>
    </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_controversial.html#avoidaccessibilityalteration"
         language="java"
         message="You should modify visibility of class or methods using getDeclaredConstructors(), getDeclaredConstructor(Class[]), setAccessible() or PrivilegedAction."
         name="AvoidAccessibilityAlteration"
         since="4.1">
        <description>
            
Methods such as getDeclaredConstructors(), getDeclaredConstructor(Class[]) and setAccessible(),
as the interface PrivilegedAction, allows for the runtime alteration of variable, class, or
method visibility, even if they are private. This violates the principle of encapsulation.
            
        </description>
        <priority>3</priority>
        <properties>
            <property name="xpath">
                <value>
                   
                        //PrimaryExpression[
                        (
                        (PrimarySuffix[
                                ends-with(@Image,'getDeclaredConstructors')
                                        or
                                ends-with(@Image,'getDeclaredConstructor')
                                        or
                                ends-with(@Image,'setAccessible')
                                ])
                        or
                        (PrimaryPrefix/Name[
                                ends-with(@Image,'getDeclaredConstructor')
                                or
                                ends-with(@Image,'getDeclaredConstructors')
                                or
                                starts-with(@Image,'AccessibleObject.setAccessible')
                                ])
                        )
                        and
                        (//ImportDeclaration/Name[
                                contains(@Image,'java.security.PrivilegedAction')])
                ]
                
                </value>
            </property>
        </properties>
        <example>
            

import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Method;
import java.security.PrivilegedAction;

public class Violation {
  public void invalidCallsInMethod() throws SecurityException, NoSuchMethodException {
    // Possible call to forbidden getDeclaredConstructors
    Class[] arrayOfClass = new Class[1];
    this.getClass().getDeclaredConstructors();
    this.getClass().getDeclaredConstructor(arrayOfClass);
    Class clazz = this.getClass();
    clazz.getDeclaredConstructor(arrayOfClass);
    clazz.getDeclaredConstructors();
      // Possible call to forbidden setAccessible
    clazz.getMethod("", arrayOfClass).setAccessible(false);
    AccessibleObject.setAccessible(null, false);
    Method.setAccessible(null, false);
    Method[] methodsArray = clazz.getMethods();
    int nbMethod;
    for ( nbMethod = 0; nbMethod &lt; methodsArray.length; nbMethod++ ) {
      methodsArray[nbMethod].setAccessible(false);
    }

      // Possible call to forbidden PrivilegedAction
    PrivilegedAction priv = (PrivilegedAction) new Object(); priv.run();
  }
}
          
      </example>
    </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_controversial.html#donotcallgarbagecollectionexplicitly"
         language="java"
         message="Do not explicitly trigger a garbage collection."
         name="DoNotCallGarbageCollectionExplicitly"
         since="4.2">
        <description>
Calls to System.gc(), Runtime.getRuntime().gc(), and System.runFinalization() are not advised. Code should have the
same behavior whether the garbage collection is disabled using the option -Xdisableexplicitgc or not.
Moreover, "modern" jvms do a very good job handling garbage collections. If memory usage issues unrelated to memory
leaks develop within an application, it should be dealt with JVM options rather than within the code itself.
        </description>
        <priority>2</priority>
        <properties>
            <property name="xpath">
                <value>
                    
//Name[
(starts-with(@Image, 'System.') and
(starts-with(@Image, 'System.gc') or
starts-with(@Image, 'System.runFinalization'))) or
(
starts-with(@Image,'Runtime.getRuntime') and
../../PrimarySuffix[ends-with(@Image,'gc')]
)
]

                </value>
            </property>
        </properties>
        <example>
            
public class GCCall {
    public GCCall() {
        // Explicit gc call !
        System.gc();
    }

    public void doSomething() {
        // Explicit gc call !
        Runtime.getRuntime().gc();
    }

    public explicitGCcall() {
        // Explicit gc call !
        System.gc();
    }

    public void doSomething() {
        // Explicit gc call !
        Runtime.getRuntime().gc();
    }
}
      
    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_controversial.html#onedeclarationperline"
         language="java"
         message="Use one line for each declaration, it enhances code readability."
         name="OneDeclarationPerLine"
         since="5.0">
        <description>
Java allows the use of several variables declaration of the same type on one line. However, it
can lead to quite messy code. This rule looks for several declarations on the same line.
        </description>
       <priority>4</priority>
       <properties>
            <property name="xpath">
                <value>
                    
//LocalVariableDeclaration
   [count(VariableDeclarator) &gt; 1]
   [$strictMode or count(distinct-values(VariableDeclarator/@BeginLine)) != count(VariableDeclarator)]
                    
                </value>
            </property>
            <property name="version" value="2.0"/>
            <property description="If true, mark combined declaration even if the declarations are on separate lines."
                   name="strictMode"
                   type="Boolean"
                   value="false"/>
        </properties>
        <example>
          
String name;            // separate declarations
String lastname;

String name, lastname;  // combined declaration, a violation

String name,
       lastname;        // combined declaration on multiple lines, no violation by default.
                        // Set property strictMode to true to mark this as violation.
          
        </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_controversial.html#avoidprefixingmethodparameters"
         language="java"
         message="Avoid prefixing parameters by in, out or inOut. Uses Javadoc to document this behavior."
         name="AvoidPrefixingMethodParameters"
         since="5.0">
        <description>
            
Prefixing parameters by 'in' or 'out' pollutes the name of the parameters and reduces code readability.
To indicate whether or not a parameter will be modify in a method, its better to document method
behavior with Javadoc.
            
        </description>
       <priority>4</priority>
       <properties>
            <property name="xpath">
                <value>
                    
//MethodDeclaration/MethodDeclarator/FormalParameters/FormalParameter/VariableDeclaratorId[
        pmd:matches(@Image,'^in[A-Z].*','^out[A-Z].*','^in$','^out$')
]
                    
                </value>
            </property>
        </properties>
        <example>
// Not really clear
public class Foo {
  public void bar(
      int inLeftOperand,
      Result outRightOperand) {
      outRightOperand.setValue(inLeftOperand * outRightOperand.getValue());
  }
}
        </example>
        <example>
// Far more useful
public class Foo {
  /**
   *
   * @param leftOperand, (purpose), not modified by method.
   * @param rightOperand (purpose), will be modified by the method: contains the result.
   */
  public void bar(
        int leftOperand,
        Result rightOperand) {
        rightOperand.setValue(leftOperand * rightOperand.getValue());
  }
}
        </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_controversial.html#avoidliteralsinifcondition"
         language="java"
         message="Avoid using Literals in Conditional Statements"
         name="AvoidLiteralsInIfCondition"
         since="4.2.6">
      <description>
Avoid using hard-coded literals in conditional statements. By declaring them as static variables
or private members with descriptive names maintainability is enhanced. By default, the literals "-1" and "0" are ignored.
More exceptions can be defined with the property "ignoreMagicNumbers".
    </description>
      <priority>3</priority>
      <properties>
         <property description="Comma-separated list of magic numbers, that should be ignored"
                   name="ignoreMagicNumbers"
                   type="String"
                   value="-1,0"/>
         <property name="xpath">
            <value>

//IfStatement/Expression/*/PrimaryExpression/PrimaryPrefix/Literal
[not(NullLiteral)]
[not(BooleanLiteral)]
[empty(index-of(tokenize($ignoreMagicNumbers, '\s*,\s*'), @Image))]

        </value>
         </property>
         <property name="version" value="2.0"/>
      </properties>
      <example>

private static final int MAX_NUMBER_OF_REQUESTS = 10;

public void checkRequests() {

    if (i == 10) {                        // magic number, buried in a method
      doSomething();
    }

    if (i == MAX_NUMBER_OF_REQUESTS) {    // preferred approach
      doSomething();
    }

    if (aString.indexOf('.') != -1) {}     // magic number -1, by default ignored
    if (aString.indexOf('.') &gt;= 0) { }     // alternative approach

    if (aDouble &gt; 0.0) {}                  // magic number 0.0
    if (aDouble &gt;= Double.MIN_VALUE) {}    // preferred approach
}

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_controversial.html#useobjectforclearerapi"
         language="java"
         message="Rather than using a lot of String arguments, consider using a container object for those values."
         name="UseObjectForClearerAPI"
         since="4.2.6">
      <description>
When you write a public method, you should be thinking in terms of an API. If your method is public, it means other class
will use it, therefore, you want (or need) to offer a comprehensive and evolutive API. If you pass a lot of information
as a simple series of Strings, you may think of using an Object to represent all those information. You'll get a simpler
API (such as doWork(Workload workload), rather than a tedious series of Strings) and more importantly, if you need at some
point to pass extra data, you'll be able to do so by simply modifying or extending Workload without any modification to
your API.
    </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>

//MethodDeclaration[@Public]/MethodDeclarator/FormalParameters[
     count(FormalParameter/Type/ReferenceType/ClassOrInterfaceType[@Image = 'String']) &gt; 3
]

        </value>
         </property>
      </properties>
      <example>

public class MyClass {
    public void connect(String username,
        String pssd,
        String databaseName,
        String databaseAdress)
        // Instead of those parameters object
        // would ensure a cleaner API and permit
        // to add extra data transparently (no code change):
        // void connect(UserData data);
    {

    }
}

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_controversial.html#useconcurrenthashmap"
         language="java"
         message="If you run in Java5 or newer and have concurrent access, you should use the ConcurrentHashMap implementation"
         name="UseConcurrentHashMap"
         since="4.2.6">
      <description>
Since Java5 brought a new implementation of the Map designed for multi-threaded access, you can
perform efficient map reads without blocking other threads.
    </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>

//Type[../VariableDeclarator/VariableInitializer//AllocationExpression/ClassOrInterfaceType[@Image != 'ConcurrentHashMap']]
/ReferenceType/ClassOrInterfaceType[@Image = 'Map']

        </value>
         </property>
      </properties>
      <example>

public class ConcurrentApp {
  public void getMyInstance() {
    Map map1 = new HashMap();           // fine for single-threaded access
    Map map2 = new ConcurrentHashMap(); // preferred for use with multiple threads

    // the following case will be ignored by this rule
    Map map3 = someModule.methodThatReturnMap(); // might be OK, if the returned map is already thread-safe
  }
}

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_finalizers.html#emptyfinalizer"
         language="java"
         message="Avoid empty finalize methods"
         name="EmptyFinalizer"
         since="1.5">
       <description>
Empty finalize methods serve no purpose and should be removed.
       </description>
       <priority>3</priority>
        <properties>
            <property name="xpath">
                <value>

//MethodDeclaration[MethodDeclarator[@Image='finalize'][not(FormalParameters/*)]]
  /Block[count(*)=0]

                </value>
            </property>
        </properties>
       <example>

public class Foo {
   protected void finalize() {}
}

       </example>
     </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_finalizers.html#finalizeonlycallssuperfinalize"
         language="java"
         message="Finalize should do something besides just calling super.finalize()"
         name="FinalizeOnlyCallsSuperFinalize"
         since="1.5">
       <description>
If the finalize() is implemented, it should do something besides just calling super.finalize().
       </description>
       <priority>3</priority>
        <properties>
            <property name="xpath">
                <value>

//MethodDeclaration[MethodDeclarator[@Image="finalize"][not(FormalParameters/*)]]
   /Block[count(BlockStatement)=1]
     /BlockStatement[
       Statement/StatementExpression/PrimaryExpression
       [./PrimaryPrefix[@SuperModifier='true']]
       [./PrimarySuffix[@Image='finalize']]
     ]

                </value>
            </property>
        </properties>
       <example>
           
protected void finalize() {
    super.finalize();
}
           
       </example>
     </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_finalizers.html#finalizeoverloaded"
         language="java"
         message="Finalize methods should not be overloaded"
         name="FinalizeOverloaded"
         since="1.5">
      <description>
Methods named finalize() should not have parameters.  It is confusing and most likely an attempt to
overload Object.finalize(). It will not be called by the VM.
   </description>
      <priority>3</priority>
      <properties>
        <property name="xpath">
            <value>

//MethodDeclaration
 /MethodDeclarator[@Image='finalize'][FormalParameters[count(*)&gt;0]]

            </value>
        </property>
      </properties>
      <example>

public class Foo {
    // this is confusing and probably a bug
    protected void finalize(int a) {
    }
}

   </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_finalizers.html#finalizedoesnotcallsuperfinalize"
         language="java"
         message="Last statement in finalize method should be a call to super.finalize()"
         name="FinalizeDoesNotCallSuperFinalize"
         since="1.5">
       <description>
If the finalize() is implemented, its last action should be to call super.finalize.
       </description>
       <priority>3</priority>
        <properties>
            <property name="xpath">
                <value>
<!-- in English: a method declaration of finalize(), with no arguments, containing
a block whose last statement is NOT a call to super.finalize -->

//MethodDeclaration[MethodDeclarator[@Image='finalize'][not(FormalParameters/*)]]
   /Block
      /BlockStatement[last()]
      [not(Statement/StatementExpression/PrimaryExpression
            [./PrimaryPrefix[@SuperModifier='true']]
            [./PrimarySuffix[@Image='finalize']]
          )
      ]
      [not(Statement/TryStatement/FinallyStatement
       /Block/BlockStatement/Statement/StatementExpression/PrimaryExpression
            [./PrimaryPrefix[@SuperModifier='true']]
            [./PrimarySuffix[@Image='finalize']]
          )
      ]

                </value>
            </property>
        </properties>
       <example>

protected void finalize() {
    something();
    // neglected to call super.finalize()
}

       </example>
     </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_finalizers.html#finalizeshouldbeprotected"
         language="java"
         message="If you override finalize(), make it protected"
         name="FinalizeShouldBeProtected"
         since="1.1">
      <description>
When overriding the finalize(), the new method should be set as protected.  If made public, 
other classes may invoke it at inappropriate times.
      </description>
      <priority>3</priority>
        <properties>
            <property name="xpath">
                <value>
                    
//MethodDeclaration[@Protected="false"]
  /MethodDeclarator[@Image="finalize"]
  [not(FormalParameters/*)]
                    
                </value>
            </property>
        </properties>
      <example>
  
public void finalize() {
    // do something
}
  
      </example>
    </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.finalizers.AvoidCallingFinalizeRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_finalizers.html#avoidcallingfinalize"
         message="Avoid calling finalize() explicitly"
         name="AvoidCallingFinalize"
         since="3.0">
      <description>
The method Object.finalize() is called by the garbage collector on an object when garbage collection determines
that there are no more references to the object. It should not be invoked by application logic.
      </description>
        <priority>3</priority>
      <example>

void foo() {
    Bar b = new Bar();
    b.finalize();
}

      </example>
    </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_empty.html#emptycatchblock"
         language="java"
         message="Avoid empty catch blocks"
         name="EmptyCatchBlock"
         since="0.1">
      <description>
Empty Catch Block finds instances where an exception is caught, but nothing is done.  
In most circumstances, this swallows an exception which should either be acted on 
or reported.
      </description>
      <priority>3</priority>
      <properties>
          <property name="xpath">
              <value>
    
//CatchStatement
 [count(Block/BlockStatement) = 0 and ($allowCommentedBlocks != 'true' or Block/@containsComment = 'false')]
 [FormalParameter/Type/ReferenceType
   /ClassOrInterfaceType[@Image != 'InterruptedException' and @Image != 'CloneNotSupportedException']
 ]
 [FormalParameter/VariableDeclaratorId[not(matches(@Image, $allowExceptionNameRegex))]]
 
             </value>
          </property>
          <property description="Empty blocks containing comments will be skipped"
                   name="allowCommentedBlocks"
                   type="Boolean"
                   value="false"/>
          <property description="Empty blocks catching exceptions with names matching this regular expression will be skipped"
                   name="allowExceptionNameRegex"
                   type="String"
                   value="^$"/>
      </properties>
      <example>
  
public void doSomething() {
    try {
        FileInputStream fis = new FileInputStream("/tmp/bugger");
    } catch (IOException ioe) {
        // not good
    }
}
 
      </example>
    </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_empty.html#emptyifstmt"
         language="java"
         message="Avoid empty 'if' statements"
         name="EmptyIfStmt"
         since="0.1">
      <description>
Empty If Statement finds instances where a condition is checked but nothing is done about it.
    </description>
        <priority>3</priority>
      <properties>
          <property name="xpath">
              <value>

//IfStatement/Statement
 [EmptyStatement or Block[count(*) = 0]]
 
              </value>
          </property>
      </properties>
      <example>
    
public class Foo {
 void bar(int x) {
  if (x == 0) {
   // empty!
  }
 }
}
 
       </example>
    </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_empty.html#emptywhilestmt"
         language="java"
         message="Avoid empty 'while' statements"
         name="EmptyWhileStmt"
         since="0.2">
       <description>
Empty While Statement finds all instances where a while statement does nothing.  
If it is a timing loop, then you should use Thread.sleep() for it; if it is
a while loop that does a lot in the exit expression, rewrite it to make it clearer.
       </description>
       <priority>3</priority>
      <properties>
          <property name="xpath">
              <value>

//WhileStatement/Statement[./Block[count(*) = 0]  or ./EmptyStatement]

              </value>
          </property>
      </properties>
       <example>
  
void bar(int a, int b) {
    while (a == b) {
        // empty!
    }
}
 
       </example>
    </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_empty.html#emptytryblock"
         language="java"
         message="Avoid empty try blocks"
         name="EmptyTryBlock"
         since="0.4">
      <description>
Avoid empty try blocks - what's the point?
      </description>
      <priority>3</priority>
      <properties>
          <property name="xpath">
              <value>

//TryStatement[not(ResourceSpecification)]/Block[1][count(*) = 0]

              </value>
          </property>
      </properties>
      <example>
  
public class Foo {
    public void bar() {
        try {
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}

      </example>
    </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_empty.html#emptyfinallyblock"
         language="java"
         message="Avoid empty finally blocks"
         name="EmptyFinallyBlock"
         since="0.4">
      <description>
Empty finally blocks serve no purpose and should be removed.
      </description>
      <priority>3</priority>
      <properties>
          <property name="xpath">
              <value>

//FinallyStatement[count(Block/BlockStatement) = 0]
 
              </value>
          </property>
      </properties>
      <example>
  
public class Foo {
    public void bar() {
        try {
            int x=2;
        } finally {
            // empty!
        }
    }
}
 
      </example>
    </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_empty.html#emptyswitchstatements"
         language="java"
         message="Avoid empty switch statements"
         name="EmptySwitchStatements"
         since="1.0">
      <description>
Empty switch statements serve no purpose and should be removed.
      </description>
      <priority>3</priority>
      <properties>
          <property name="xpath">
              <value>

//SwitchStatement[count(*) = 1]
 
              </value>
          </property>
      </properties>
      <example>
  
public void bar() {
    int x = 2;
    switch (x) {
        // once there was code here
        // but it's been commented out or something
    }
}

      </example>
      </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_empty.html#emptysynchronizedblock"
         language="java"
         message="Avoid empty synchronized blocks"
         name="EmptySynchronizedBlock"
         since="1.3">
      <description>
Empty synchronized blocks serve no purpose and should be removed.
      </description>
      <priority>3</priority>
      <properties>
          <property name="xpath">
              <value>

//SynchronizedStatement/Block[1][count(*) = 0]

              </value>
          </property>
      </properties>
      <example>

public class Foo {
    public void bar() {
        synchronized (this) {
            // empty!
        }
    }
}

      </example>
    </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_empty.html#emptystatementnotinloop"
         language="java"
         message="An empty statement (semicolon) not part of a loop"
         name="EmptyStatementNotInLoop"
         since="1.5">
       <description>
An empty statement (or a semicolon by itself) that is not used as the sole body of a 'for' 
or 'while' loop is probably a bug.  It could also be a double semicolon, which has no purpose
and should be removed.
       </description>
       <priority>3</priority>
        <properties>
            <property name="xpath">
                <value>

//EmptyStatement
 [not(
       ../../../ForStatement
       or ../../../WhileStatement
       or ../../../BlockStatement/ClassOrInterfaceDeclaration
       or ../../../../../../ForStatement/Statement[1]
        /Block[1]/BlockStatement[1]/Statement/EmptyStatement
       or ../../../../../../WhileStatement/Statement[1]
        /Block[1]/BlockStatement[1]/Statement/EmptyStatement)
 ]

                </value>
            </property>
        </properties>
       <example>

public void doit() {
      // this is probably not what you meant to do
      ;
      // the extra semicolon here this is not necessary
      System.out.println("look at the extra semicolon");;
}

       </example>
     </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_empty.html#emptyinitializer"
         language="java"
         message="Empty initializer was found"
         name="EmptyInitializer"
         since="5.0">
       <description>
Empty initializers serve no purpose and should be removed.
       </description>
       <priority>3</priority>
         <properties>
             <property name="xpath">
                 <value>

//Initializer/Block[count(*)=0]

                 </value>
             </property>
         </properties>
       <example>
   
public class Foo {

   static {} // Why ?

   {} // Again, why ?

}
    
    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_empty.html#emptystatementblock"
         language="java"
         message="Avoid empty block statements."
         name="EmptyStatementBlock"
         since="5.0">
      <description>
Empty block statements serve no purpose and should be removed.
    </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>
          
//BlockStatement/Statement/Block[count(*) = 0]
          
          </value>
         </property>
      </properties>
      <example>
    
public class Foo {

   private int _bar;

   public void setBar(int bar) {
      { _bar = bar; } // Why not?
      {} // But remove this.
   }

}
    
    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_empty.html#emptystaticinitializer"
         language="java"
         message="Empty static initializer was found"
         name="EmptyStaticInitializer"
         since="1.5">
       <description>
An empty static initializer serve no purpose and should be removed.
       </description>
       <priority>3</priority>
         <properties>
             <property name="xpath">
                 <value>

//Initializer[@Static='true']/Block[count(*)=0]

                 </value>
             </property>
         </properties>
       <example>
   
public class Foo {
    static {
        // empty
    }
}

       </example>
     </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_android.html#callsuperfirst"
         language="java"
         message="super should be called at the start of the method"
         name="CallSuperFirst"
         since="4.2.5">
      <description>Super should be called at the start of the method</description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>
//MethodDeclaration[MethodDeclarator[
  @Image='onCreate' or
  @Image='onConfigurationChanged' or
  @Image='onPostCreate' or
  @Image='onPostResume' or
  @Image='onRestart' or
  @Image='onRestoreInstanceState' or
  @Image='onResume' or
  @Image='onStart'
  ]]
    /Block[not(
      (BlockStatement[1]/Statement/StatementExpression/PrimaryExpression[./PrimaryPrefix[@SuperModifier='true']]/PrimarySuffix[@Image= ancestor::MethodDeclaration/MethodDeclarator/@Image]))]
[ancestor::ClassOrInterfaceDeclaration[ExtendsList/ClassOrInterfaceType[
  typeof(@Image, 'android.app.Activity', 'Activity') or
  typeof(@Image, 'android.app.Application', 'Application') or
  typeof(@Image, 'android.app.Service', 'Service')
]]]

        </value>
         </property>
      </properties>
      <example>
public class DummyActivity extends Activity {
    public void onCreate(Bundle bundle) {
        // missing call to super.onCreate(bundle)
        foo();
    }
}

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_android.html#callsuperlast"
         language="java"
         message="super should be called at the end of the method"
         name="CallSuperLast"
         since="4.2.5">
      <description>Super should be called at the end of the method</description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>
          
//MethodDeclaration[MethodDeclarator[
  @Image='finish' or
  @Image='onDestroy' or
  @Image='onPause' or
  @Image='onSaveInstanceState' or
  @Image='onStop' or
  @Image='onTerminate'
  ]]
   /Block/BlockStatement[last()]
    [not(Statement/StatementExpression/PrimaryExpression[./PrimaryPrefix[@SuperModifier='true']]/PrimarySuffix[@Image= ancestor::MethodDeclaration/MethodDeclarator/@Image])]
[ancestor::ClassOrInterfaceDeclaration[ExtendsList/ClassOrInterfaceType[
  typeof(@Image, 'android.app.Activity', 'Activity') or
  typeof(@Image, 'android.app.Application', 'Application') or
  typeof(@Image, 'android.app.Service', 'Service')
]]]

        </value>
         </property>
      </properties>
      <example>
      
public class DummyActivity extends Activity {
    public void onPause() {
        foo();
        // missing call to super.onPause()
    }
}

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_android.html#donothardcodesdcard"
         language="java"
         message="Do not hardcode /sdcard."
         name="DoNotHardCodeSDCard"
         since="4.2.6">
      <description>Use Environment.getExternalStorageDirectory() instead of "/sdcard"</description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>//Literal[starts-with(@Image,'"/sdcard')]</value>
         </property>
      </properties>
      <example>
      
public class MyActivity extends Activity {
    protected void foo() {
        String storageLocation = "/sdcard/mypackage";   // hard-coded, poor approach

       storageLocation = Environment.getExternalStorageDirectory() + "/mypackage"; // preferred approach
    }
}

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.strictexception.AvoidCatchingThrowableRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_strictexception.html#avoidcatchingthrowable"
         message="A catch statement should never catch throwable since it includes errors."
         name="AvoidCatchingThrowable"
         since="1.2">
      <description>
Catching Throwable errors is not recommended since its scope is very broad. It includes runtime issues such as 
OutOfMemoryError that should be exposed and managed separately.
    </description>
      <priority>3</priority>
      <example>

public void bar() {
    try {
        // do something
    } catch (Throwable th) {  // should not catch Throwable
        th.printStackTrace();
    }
}

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.strictexception.SignatureDeclareThrowsExceptionRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_strictexception.html#signaturedeclarethrowsexception"
         message="A method/constructor shouldn't explicitly throw java.lang.Exception"
         name="SignatureDeclareThrowsException"
         since="1.2">
      <description>
Methods that declare the generic Exception as a possible throwable are not very helpful since their
failure modes are unclear. Use a class derived from RuntimeException or a more specific checked exception.
    </description>
      <priority>3</priority>
      <example>

public void foo() throws Exception {
}

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.strictexception.ExceptionAsFlowControlRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_strictexception.html#exceptionasflowcontrol"
         message="Avoid using exceptions as flow control."
         name="ExceptionAsFlowControl"
         since="1.8">
      <description>
Using Exceptions as form of flow control is not recommended as they obscure true exceptions when debugging.
Either add the necessary validation or use an alternate control structure.
    </description>
      <priority>3</priority>
      <example>

public void bar() {
    try {
        try {
        } catch (Exception e) {
            throw new WrapperException(e);
            // this is essentially a GOTO to the WrapperException catch block
        }
    } catch (WrapperException e) {
        // do some more stuff
    }
}

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_strictexception.html#avoidcatchingnpe"
         language="java"
         message="Avoid catching NullPointerException; consider removing the cause of the NPE."
         name="AvoidCatchingNPE"
         since="1.8">
      <description>
Code should never throw NullPointerExceptions under normal circumstances.  A catch block may hide the 
original error, causing other, more subtle problems later on.
    </description>
      <priority>3</priority>
      <properties>
        <property name="xpath">
            <value>

//CatchStatement/FormalParameter/Type
 /ReferenceType/ClassOrInterfaceType[@Image='NullPointerException']

            </value>
        </property>
      </properties>
      <example>

public class Foo {
    void bar() {
        try {
            // do something
        } catch (NullPointerException npe) {
        }
    }
}

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_strictexception.html#avoidthrowingrawexceptiontypes"
         language="java"
         message="Avoid throwing raw exception types."
         name="AvoidThrowingRawExceptionTypes"
         since="1.8">
      <description>
Avoid throwing certain exception types. Rather than throw a raw RuntimeException, Throwable,
Exception, or Error, use a subclassed exception or error instead.
    </description>
      <priority>1</priority>
      <properties>
        <property name="xpath">
            <value>

//ThrowStatement//AllocationExpression
 /ClassOrInterfaceType[
 (@Image='Throwable' and count(//ImportDeclaration/Name[ends-with(@Image,'Throwable')]) = 0)
or
 (@Image='Exception' and count(//ImportDeclaration/Name[ends-with(@Image,'Exception')]) = 0)
or
 (@Image='Error'  and count(//ImportDeclaration/Name[ends-with(@Image,'Error')]) = 0)
or
( @Image='RuntimeException'  and count(//ImportDeclaration/Name[ends-with(@Image,'RuntimeException')]) = 0)
]

            </value>
        </property>
      </properties>
      <example>

public class Foo {
    public void bar() throws Exception {
        throw new Exception();
    }
}

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_strictexception.html#avoidthrowingnullpointerexception"
         language="java"
         message="Avoid throwing null pointer exceptions."
         name="AvoidThrowingNullPointerException"
         since="1.8">
      <description>
Avoid throwing NullPointerExceptions. These are confusing because most people will assume that the
virtual machine threw it. Consider using an IllegalArgumentException instead; this will be
clearly seen as a programmer-initiated exception.
    </description>
      <priority>1</priority>
      <properties>
        <property name="xpath">
            <value>

//AllocationExpression/ClassOrInterfaceType[@Image='NullPointerException']

            </value>
        </property>
      </properties>
      <example>

public class Foo {
    void bar() {
        throw new NullPointerException();
    }
}

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_strictexception.html#avoidrethrowingexception"
         language="java"
         message="A catch statement that catches an exception only to rethrow it should be avoided."
         name="AvoidRethrowingException"
         since="3.8">
      <description>
Catch blocks that merely rethrow a caught exception only add to code size and runtime complexity.
    </description>
      <priority>3</priority>
      <properties>
        <property name="xpath">
            <value>

//CatchStatement[FormalParameter
 /VariableDeclaratorId/@Image = Block/BlockStatement/Statement
 /ThrowStatement/Expression/PrimaryExpression[count(PrimarySuffix)=0]/PrimaryPrefix/Name/@Image
 and count(Block/BlockStatement/Statement) =1]

            </value>
        </property>
      </properties>
      <example>

public void bar() {
    try {
        // do something
    }  catch (SomeException se) {
       throw se;
    }
}

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_strictexception.html#donotextendjavalangerror"
         language="java"
         message="Exceptions should not extend java.lang.Error"
         name="DoNotExtendJavaLangError"
         since="4.0">
      <description>
Errors are system exceptions. Do not extend them.
    </description>
      <priority>3</priority>
      <properties>
        <property name="xpath">
            <value>

//ClassOrInterfaceDeclaration/ExtendsList/ClassOrInterfaceType
  [@Image="Error" or @Image="java.lang.Error"]

            </value>
        </property>
      </properties>
      <example>
public class Foo extends Error { }
    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_strictexception.html#donotthrowexceptioninfinally"
         language="java"
         message="A throw statement in a finally block makes the control flow hard to understand."
         name="DoNotThrowExceptionInFinally"
         since="4.2">
      <description>
Throwing exceptions within a 'finally' block is confusing since they may mask other exceptions 
or code defects.
Note: This is a PMD implementation of the Lint4j rule "A throw in a finally block"
    </description>
      <priority>4</priority>
      <properties>
        <property name="xpath">
            <value>

//FinallyStatement[descendant::ThrowStatement]

            </value>
        </property>
      </properties>
      <example>

public class Foo {
    public void bar() {
        try {
            // Here do some stuff
        } catch( Exception e) {
            // Handling the issue
        } finally {
            // is this really a good idea ?
            throw new Exception();
        }
    }
}

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_strictexception.html#avoidthrowingnewinstanceofsameexception"
         language="java"
         message="A catch statement that catches an exception only to wrap it in a new instance of the same type of exception and throw it should be avoided"
         name="AvoidThrowingNewInstanceOfSameException"
         since="4.2.5">
      <description>
Catch blocks that merely rethrow a caught exception wrapped inside a new instance of the same type only add to
code size and runtime complexity.
    </description>
      <priority>3</priority>
      <properties>
        <property name="xpath">
            <value>

//CatchStatement[
  count(Block/BlockStatement/Statement) = 1
  and
  FormalParameter/Type/ReferenceType/ClassOrInterfaceType/@Image = Block/BlockStatement/Statement/ThrowStatement/Expression/PrimaryExpression/PrimaryPrefix/AllocationExpression/ClassOrInterfaceType/@Image
  and
  count(Block/BlockStatement/Statement/ThrowStatement/Expression/PrimaryExpression/PrimaryPrefix/AllocationExpression/Arguments/ArgumentList/Expression) = 1
  and
  FormalParameter/VariableDeclaratorId = Block/BlockStatement/Statement/ThrowStatement/Expression/PrimaryExpression/PrimaryPrefix/AllocationExpression/Arguments/ArgumentList/Expression/PrimaryExpression/PrimaryPrefix/Name
  ]

            </value>
        </property>
      </properties>
      <example>

public void bar() {
    try {
        // do something
    } catch (SomeException se) {
        // harmless comment
        throw new SomeException(se);
    }
}

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_strictexception.html#avoidcatchinggenericexception"
         language="java"
         message="Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block"
         name="AvoidCatchingGenericException"
         since="4.2.6">
      <description>
Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block
    </description>
      <priority>3</priority>
      <properties>
        <property name="xpath">
            <value>

//CatchStatement/FormalParameter/Type/ReferenceType/ClassOrInterfaceType[
    @Image='NullPointerException' or
    @Image='Exception' or
    @Image='RuntimeException']

            </value>
        </property>
      </properties>
      <example>

package com.igate.primitive;

public class PrimitiveType {

    public void downCastPrimitiveType() {
        try {
            System.out.println(" i [" + i + "]");
        } catch(Exception e) {
            e.printStackTrace();
        } catch(RuntimeException e) {
            e.printStackTrace();
        } catch(NullPointerException e) {
            e.printStackTrace();
        }
    }
}

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_strictexception.html#avoidlosingexceptioninformation"
         language="java"
         message="Avoid statements in a catch block that invoke accessors on the exception without using the information"
         name="AvoidLosingExceptionInformation"
         since="4.2.6">
      <description>
Statements in a catch block that invoke accessors on the exception without using the information
only add to code size.  Either remove the invocation, or use the return result.
    </description>
      <priority>2</priority>
      <properties>
        <property name="xpath">
            <value>

//CatchStatement/Block/BlockStatement/Statement/StatementExpression/PrimaryExpression/PrimaryPrefix/Name
[
   @Image = concat(../../../../../../../FormalParameter/VariableDeclaratorId/@Image, '.getMessage')
   or
   @Image = concat(../../../../../../../FormalParameter/VariableDeclaratorId/@Image, '.getLocalizedMessage')
   or
   @Image = concat(../../../../../../../FormalParameter/VariableDeclaratorId/@Image, '.getCause')
   or
   @Image = concat(../../../../../../../FormalParameter/VariableDeclaratorId/@Image, '.getStackTrace')
   or
   @Image = concat(../../../../../../../FormalParameter/VariableDeclaratorId/@Image, '.toString')
]

            </value>
        </property>
      </properties>
      <example>

public void bar() {
    try {
        // do something
    } catch (SomeException se) {
        se.getMessage();
    }
}

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_clone.html#propercloneimplementation"
         language="java"
         message="Object clone() should be implemented with super.clone()"
         name="ProperCloneImplementation"
         since="1.4">
     <description>
Object clone() should be implemented with super.clone().
     </description>
     <priority>2</priority>
     <properties>
         <property name="xpath">
             <value>
                 
//MethodDeclarator
[@Image = 'clone']
[count(FormalParameters/*) = 0]
[count(../Block//*[
    (self::AllocationExpression) and
    (./ClassOrInterfaceType/@Image = ancestor::
ClassOrInterfaceDeclaration[1]/@Image)
  ])&gt; 0
]
                
             </value>
         </property>
     </properties>
     <example>
 
class Foo{
    public Object clone(){
        return new Foo(); // This is bad
    }
}

     </example>
     </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_clone.html#clonethrowsclonenotsupportedexception"
         language="java"
         message="clone() method should throw CloneNotSupportedException"
         name="CloneThrowsCloneNotSupportedException"
         since="1.9">
         <description>
The method clone() should throw a CloneNotSupportedException.
         </description>
         <priority>3</priority>
         <properties>
             <property name="xpath">
                 <value>
                     
//MethodDeclaration
[
MethodDeclarator/@Image = 'clone'
and count(MethodDeclarator/FormalParameters/*) = 0
and count(NameList/Name[contains
(@Image,'CloneNotSupportedException')]) = 0
]
[
../../../../ClassOrInterfaceDeclaration[@Final = 'false']
]
                     
                 </value>
             </property>
         </properties>
         <example>
             
public class MyClass implements Cloneable{
    public Object clone() { // will cause an error
         MyClass clone = (MyClass)super.clone();
         return clone;
    }
}
    
         </example>
     </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_clone.html#clonemethodmustimplementcloneable"
         language="java"
         message="clone() method should be implemented only if implementing Cloneable interface"
         name="CloneMethodMustImplementCloneable"
         since="1.9">
        <description>
The method clone() should only be implemented if the class implements the Cloneable interface with the exception of a final method that only throws CloneNotSupportedException.
        </description>
        <priority>3</priority>
        <properties>
            <property name="xpath">
                <value>
                    
//ClassOrInterfaceDeclaration
[not(./ExtendsList/ClassOrInterfaceType[@Image='Cloneable'])]
[not(./ImplementsList/ClassOrInterfaceType[@Image='Cloneable'])]
/ClassOrInterfaceBody/ClassOrInterfaceBodyDeclaration
[MethodDeclaration
[MethodDeclarator[@Image
= 'clone' and count(FormalParameters/*) = 0]]
[not((../MethodDeclaration[@Final = 'true'] or ancestor::ClassOrInterfaceDeclaration[1][@Final = 'true'])
and Block[count(BlockStatement)=1]
/BlockStatement/Statement/ThrowStatement/Expression
/PrimaryExpression/PrimaryPrefix/AllocationExpression
/ClassOrInterfaceType[@Image = 'CloneNotSupportedException'])]]
                    
                </value>
            </property>
        </properties>
        <example>
            
public class MyClass {
 public Object clone() throws CloneNotSupportedException {
  return foo;
 }
}
   
        </example>
    </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_clone.html#clonemethodreturntypemustmatchclassname"
         language="java"
         message="The return type of the clone() method must be the class name when implements Cloneable"
         minimumLanguageVersion="1.5"
         name="CloneMethodReturnTypeMustMatchClassName"
         since="5.4.0">
        <description>
If a class implements cloneable the return type of the method clone() must be the class name. That way, the caller
of the clone method doesn't need to cast the returned clone to the correct type.

Note: This is only possible with Java 1.5 or higher.
        </description>
        <priority>3</priority>
        <properties>
            <property name="xpath">
                <value>
                    
//MethodDeclaration
[
MethodDeclarator/@Image = 'clone'
and MethodDeclarator/FormalParameters/@ParameterCount = 0
and not (ResultType//ClassOrInterfaceType/@Image = ancestor::ClassOrInterfaceDeclaration[1]/@Image)
]
                    
                </value>
            </property>
        </properties>
        <example>
            
public class Foo implements Cloneable {
    @Override
    protected Object clone() { // Violation, Object must be Foo
    }
}

public class Foo implements Cloneable {
    @Override
    public Foo clone() { //Ok
    }
}
            
        </example>
    </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_clone.html#clonemethodmustbepublic"
         language="java"
         message="clone() method must be public if the class implements Cloneable"
         name="CloneMethodMustBePublic"
         since="5.4.0">
        <description>
The java Manual says "By convention, classes that implement this interface should override
Object.clone (which is protected) with a public method."
        </description>
        <priority>3</priority>
        <properties>
            <property name="xpath">
                <value>
                    
//MethodDeclaration[@Public='false']
  [MethodDeclarator/@Image = 'clone']
  [MethodDeclarator/FormalParameters/@ParameterCount = 0]
                    
                </value>
            </property>
        </properties>
        <example>
            
public class Foo implements Cloneable {
    @Override
    protected Object clone() throws CloneNotSupportedException { // Violation, must be public
    }
}

public class Foo implements Cloneable {
    @Override
    protected Foo clone() { // Violation, must be public
    }
}

public class Foo implements Cloneable {
    @Override
    public Object clone() // Ok
}
</example>
    </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_migrating.html#replacevectorwithlist"
         language="java"
         message="Consider replacing this Vector with the newer java.util.List"
         name="ReplaceVectorWithList"
         since="3.4">
      <description>
Consider replacing Vector usages with the newer java.util.ArrayList if expensive thread-safe operations are not required.
    </description>
      <priority>3</priority>
      <properties>
        <property name="xpath">
            <value>

//Type/ReferenceType/ClassOrInterfaceType[@Image='Vector']

            </value>
        </property>
      </properties>
      <example>

public class Foo {
    void bar() {
        Vector v = new Vector();
    }
}

  </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_migrating.html#replacehashtablewithmap"
         language="java"
         message="Consider replacing this Hashtable with the newer java.util.Map"
         name="ReplaceHashtableWithMap"
         since="3.4">
      <description>
Consider replacing Hashtable usage with the newer java.util.Map if thread safety is not required.
    </description>
      <priority>3</priority>
      <properties>
        <property name="xpath">
            <value>
    
//Type/ReferenceType/ClassOrInterfaceType[@Image='Hashtable']
     
            </value>
        </property>
      </properties>
      <example>
    
public class Foo {
    void bar() {
        Hashtable h = new Hashtable();
    }
}
    
    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_migrating.html#replaceenumerationwithiterator"
         language="java"
         message="Consider replacing this Enumeration with the newer java.util.Iterator"
         name="ReplaceEnumerationWithIterator"
         since="3.4">
      <description>
Consider replacing Enumeration usages with the newer java.util.Iterator
    </description>
      <priority>3</priority>
      <properties>
        <property name="xpath">
            <value>

//ImplementsList/ClassOrInterfaceType[@Image='Enumeration']

            </value>
        </property>
      </properties>
      <example>

public class Foo implements Enumeration {
    private int x = 42;
    public boolean hasMoreElements() {
        return true;
    }
    public Object nextElement() {
        return String.valueOf(i++);
    }
}

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_migrating.html#avoidenumasidentifier"
         language="java"
         message="Avoid using enum as an identifier; it's a reserved word in JDK 1.5"
         name="AvoidEnumAsIdentifier"
         since="3.4">
      <description>
Use of the term 'enum' will conflict with newer versions of Java since it is a reserved word.
    </description>
      <priority>2</priority>
      <properties>
        <property name="xpath">
            <value>

//VariableDeclaratorId[@Image='enum']

            </value>
        </property>
      </properties>
      <example>

public class A {
    public class Foo {
        String enum = "foo";
    }
}

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_migrating.html#avoidassertasidentifier"
         language="java"
         message="Avoid using assert as an identifier; it became a reserved word in JDK 1.4"
         name="AvoidAssertAsIdentifier"
         since="3.4">
      <description>
Use of the term 'assert' will conflict with newer versions of Java since it is a reserved word.
    </description>
      <priority>2</priority>
      <properties>
        <property name="xpath">
            <value>

//VariableDeclaratorId[@Image='assert']

            </value>
        </property>
      </properties>
      <example>

public class A {
    public class Foo {
        String assert = "foo";
    }
}

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_migrating.html#integerinstantiation"
         language="java"
         message="Avoid instantiating Integer objects. Call Integer.valueOf() instead."
         name="IntegerInstantiation"
         since="3.5">
      <description>
Calling new Integer() causes memory allocation that can be avoided by the static Integer.valueOf().
It makes use of an internal cache that recycles earlier instances making it more memory efficient.
    </description>
      <priority>2</priority>
      <properties>
        <property name="xpath">
            <value>

//PrimaryPrefix
 /AllocationExpression
  [not (ArrayDimsAndInits)
   and (ClassOrInterfaceType/@Image='Integer'
    or ClassOrInterfaceType/@Image='java.lang.Integer')]

            </value>
        </property>
      </properties>
      <example>

public class Foo {
    private Integer i = new Integer(0); // change to Integer i = Integer.valueOf(0);
}

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_migrating.html#byteinstantiation"
         language="java"
         message="Avoid instantiating Byte objects. Call Byte.valueOf() instead"
         name="ByteInstantiation"
         since="4.0">
      <description>
Calling new Byte() causes memory allocation that can be avoided by the static Byte.valueOf().
It makes use of an internal cache that recycles earlier instances making it more memory efficient.
    </description>
      <priority>2</priority>
      <properties>
        <property name="xpath">
            <value>

//PrimaryPrefix/AllocationExpression
[not (ArrayDimsAndInits)
and (ClassOrInterfaceType/@Image='Byte'
or ClassOrInterfaceType/@Image='java.lang.Byte')]

            </value>
        </property>
      </properties>
      <example>

public class Foo {
    private Byte i = new Byte(0); // change to Byte i = Byte.valueOf(0);
}

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_migrating.html#shortinstantiation"
         language="java"
         message="Avoid instantiating Short objects. Call Short.valueOf() instead"
         name="ShortInstantiation"
         since="4.0">
      <description>
Calling new Short() causes memory allocation that can be avoided by the static Short.valueOf().
It makes use of an internal cache that recycles earlier instances making it more memory efficient.
    </description>
      <priority>2</priority>
      <properties>
        <property name="xpath">
            <value>

//PrimaryPrefix
/AllocationExpression
[not (ArrayDimsAndInits)
and (ClassOrInterfaceType/@Image='Short'
or ClassOrInterfaceType/@Image='java.lang.Short')]

            </value>
        </property>
      </properties>
      <example>

public class Foo {
    private Short i = new Short(0); // change to Short i = Short.valueOf(0);
}

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_migrating.html#longinstantiation"
         language="java"
         message="Avoid instantiating Long objects.Call Long.valueOf() instead"
         name="LongInstantiation"
         since="4.0">
      <description>
Calling new Long() causes memory allocation that can be avoided by the static Long.valueOf().
It makes use of an internal cache that recycles earlier instances making it more memory efficient.
    </description>
      <priority>2</priority>
      <properties>
        <property name="xpath">
            <value>

//PrimaryPrefix
/AllocationExpression
[not (ArrayDimsAndInits)
and (ClassOrInterfaceType/@Image='Long'
or ClassOrInterfaceType/@Image='java.lang.Long')]

            </value>
        </property>
      </properties>
      <example>

public class Foo {
    private Long i = new Long(0); // change to Long i = Long.valueOf(0);
}

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_migrating.html#junit4testshouldusebeforeannotation"
         language="java"
         message="JUnit 4 tests that set up tests should use the @Before annotation"
         name="JUnit4TestShouldUseBeforeAnnotation"
         since="4.0">
      <description>
In JUnit 3, the setUp method was used to set up all data entities required in running tests. 
JUnit 4 skips the setUp method and executes all methods annotated with @Before before all tests
    </description>
      <priority>3</priority>
      <properties>
        <property name="xpath">
            <value>

//CompilationUnit[not(ImportDeclaration/Name[starts-with(@Image, "org.testng")])]
//ClassOrInterfaceBodyDeclaration[MethodDeclaration/MethodDeclarator[@Image='setUp']]
[count(Annotation//Name[@Image='Before'])=0]

            </value>
        </property>
      </properties>
      <example>

public class MyTest {
    public void setUp() {
        bad();
    }
}
public class MyTest2 {
    @Before public void setUp() {
        good();
    }
}

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_migrating.html#junit4testshoulduseafterannotation"
         language="java"
         message="JUnit 4 tests that clean up tests should use the @After annotation"
         name="JUnit4TestShouldUseAfterAnnotation"
         since="4.0">
      <description>
In JUnit 3, the tearDown method was used to clean up all data entities required in running tests. 
JUnit 4 skips the tearDown method and executes all methods annotated with @After after running each test
    </description>
      <priority>3</priority>
      <properties>
        <property name="xpath">
            <value>

//CompilationUnit[not(ImportDeclaration/Name[starts-with(@Image, "org.testng")])]
//ClassOrInterfaceBodyDeclaration[MethodDeclaration/MethodDeclarator[@Image='tearDown']]
[count(Annotation//Name[@Image='After'])=0]

            </value>
        </property>
      </properties>
      <example>

public class MyTest {
    public void tearDown() {
        bad();
    }
}
public class MyTest2 {
    @After public void tearDown() {
        good();
    }
}

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_migrating.html#junit4testshouldusetestannotation"
         language="java"
         message="JUnit 4 tests that execute tests should use the @Test annotation"
         name="JUnit4TestShouldUseTestAnnotation"
         since="4.0">
      <description>
In JUnit 3, the framework executed all methods which started with the word test as a unit test. 
In JUnit 4, only methods annotated with the @Test annotation are executed.
    </description>
      <priority>3</priority>
      <properties>
        <property name="xpath">
            <value>

//ClassOrInterfaceBodyDeclaration[MethodDeclaration[@Public='true']/MethodDeclarator[starts-with(@Image,'test')]]
[count(Annotation//Name[@Image='Test'])=0]

            </value>
        </property>
      </properties>
      <example>

public class MyTest {
    public void testBad() {
        doSomething();
    }

    @Test
    public void testGood() {
        doSomething();
    }
}

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_migrating.html#junit4suitesshouldusesuiteannotation"
         language="java"
         message="JUnit 4 indicates test suites via annotations, not the suite method."
         name="JUnit4SuitesShouldUseSuiteAnnotation"
         since="4.0">
      <description>
In JUnit 3, test suites are indicated by the suite() method. In JUnit 4, suites are indicated
through the @RunWith(Suite.class) annotation.
    </description>
      <priority>3</priority>
      <properties>
        <property name="xpath">
            <value>

//ClassOrInterfaceBodyDeclaration[MethodDeclaration/MethodDeclarator[@Image='suite']]
[MethodDeclaration/ResultType/Type/ReferenceType/ClassOrInterfaceType[@Image='Test' or @Image = 'junit.framework.Test']]
[not(MethodDeclaration/Block//ClassOrInterfaceType[@Image='JUnit4TestAdapter'])]

            </value>
        </property>
      </properties>
      <example>

public class BadExample extends TestCase{

    public static Test suite(){
        return new Suite();
    }
}

@RunWith(Suite.class)
@SuiteClasses( { TestOne.class, TestTwo.class })
public class GoodTest {
}
    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.migrating.JUnitUseExpectedRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_migrating.html#junituseexpected"
         message="In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions"
         name="JUnitUseExpected"
         since="4.0">
      <description>
In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions.
    </description>
      <priority>3</priority>
      <example>

public class MyTest {
    @Test
    public void testBad() {
        try {
            doSomething();
            fail("should have thrown an exception");
        } catch (Exception e) {
        }
    }

    @Test(expected=Exception.class)
    public void testGood() {
        doSomething();
    }
}

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.migrating.ForLoopCanBeForeachRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_migrating.html#forloopcanbeforeach"
         language="java"
         message="This 'for' loop can be replaced by a 'foreach' loop"
         minimumLanguageVersion="1.5"
         name="ForLoopCanBeForeach"
         since="6.0"
         typeResolution="true">
        <description>
            Reports loops that can be safely replaced with the foreach syntax. The rule considers loops over
            lists, arrays and iterators. A loop is safe to replace if it only uses the index variable to
            access an element of the list or array, only has one update statement, and loops through *every*
            element of the list or array left to right.
        </description>
        <priority>3</priority>
        <example>
public class MyClass {
  void loop(List&lt;String&gt; l) {
    for (int i = 0; i &lt; l.size(); i++) { // pre Java 1.5
      System.out.println(l.get(i));
    }

    for (String s : l) {        // post Java 1.5
      System.out.println(s);
    }
  }
}
        </example>
    </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.coupling.CouplingBetweenObjectsRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_coupling.html#couplingbetweenobjects"
         message="High amount of different objects as members denotes a high coupling"
         name="CouplingBetweenObjects"
         since="1.04">
      <description>
This rule counts the number of unique attributes, local variables, and return types within an object. 
A number higher than the specified threshold can indicate a high degree of coupling.
    </description>
      <priority>3</priority>
      <example>

import com.Blah;
import org.Bar;
import org.Bardo;

public class Foo {
    private Blah var1;
    private Bar var2;

    //followed by many imports of unique objects
    void ObjectC doWork() {
        Bardo var55;
        ObjectA var44;
        ObjectZ var93;
        return something;
    }
}

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.coupling.ExcessiveImportsRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_coupling.html#excessiveimports"
         message="A high number of imports can indicate a high degree of coupling within an object."
         name="ExcessiveImports"
         since="1.04">
     <description>
A high number of imports can indicate a high degree of coupling within an object. This rule 
counts the number of unique imports and reports a violation if the count is above the 
user-specified threshold.
  </description>
      <priority>3</priority>
      <example>
      
import blah.blah.Baz;
import blah.blah.Bif;
// 18 others from the same package elided
public class Foo {
    public void doWork() {}
}
      
  </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.coupling.LooseCouplingRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_coupling.html#loosecoupling"
         message="Avoid using implementation types like ''{0}''; use the interface instead"
         name="LooseCoupling"
         since="0.7">
      <description>
The use of implementation types as object references limits your ability to use alternate
implementations in the future as requirements change. Whenever available, referencing objects 
by their interface types provides much more flexibility.
      </description>
        <priority>3</priority>
      <example>

// sub-optimal approach
private ArrayList&lt;SomeType&gt; list = new ArrayList&lt;&gt;();

public HashSet&lt;SomeType&gt; getFoo() {
    return new HashSet&lt;SomeType&gt;();
}

// preferred approach
private List&lt;SomeType&gt; list = new ArrayList&lt;&gt;();

public Set&lt;SomeType&gt; getFoo() {
    return new HashSet&lt;SomeType&gt;();
}

      </example>
    </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.coupling.LoosePackageCouplingRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_coupling.html#loosepackagecoupling"
         message="Use of ''{0}'' outside of package hierarchy ''{1}'' is not recommended; use recommended classes instead"
         name="LoosePackageCoupling"
         since="5.0">
      <description>
Avoid using classes from the configured package hierarchy outside of the package hierarchy, 
except when using one of the configured allowed classes.
      </description>
        <priority>3</priority>
      <example>

package some.package;

import some.other.package.subpackage.subsubpackage.DontUseThisClass;

public class Bar {
    DontUseThisClass boo = new DontUseThisClass();
}
  
      </example>
    </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.coupling.LawOfDemeterRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_coupling.html#lawofdemeter"
         language="java"
         message="Potential violation of Law of Demeter"
         name="LawOfDemeter"
         since="5.0">
        <description>
The Law of Demeter is a simple rule, that says "only talk to friends". It helps to reduce coupling between classes
or objects.

See also the references:

*   Andrew Hunt, David Thomas, and Ward Cunningham. The Pragmatic Programmer. From Journeyman to Master. Addison-Wesley Longman, Amsterdam, October 1999.;
*   K.J. Lieberherr and I.M. Holland. Assuring good style for object-oriented programs. Software, IEEE, 6(5):38–48, 1989.;
*   &lt;http://www.ccs.neu.edu/home/lieber/LoD.html&gt;
*   &lt;http://en.wikipedia.org/wiki/Law_of_Demeter&gt;
        </description>
        <priority>3</priority>
        <example>

public class Foo {
    /**
     * This example will result in two violations.
     */
    public void example(Bar b) {
        // this method call is ok, as b is a parameter of "example"
        C c = b.getC();

        // this method call is a violation, as we are using c, which we got from B.
        // We should ask b directly instead, e.g. "b.doItOnC();"
        c.doIt();

        // this is also a violation, just expressed differently as a method chain without temporary variables.
        b.getC().doIt();

        // a constructor call, not a method call.
        D d = new D();
        // this method call is ok, because we have create the new instance of D locally.
        d.doSomethingElse(); 
    }
}

        </example>
    </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_basic.html#jumbledincrementer"
         language="java"
         message="Avoid modifying an outer loop incrementer in an inner loop for update expression"
         name="JumbledIncrementer"
         since="1.0">
     <description>
Avoid jumbled loop incrementers - its usually a mistake, and is confusing even if intentional.
     </description>
     <priority>3</priority>
     <properties>
         <property name="xpath">
             <value>
//ForStatement
  [
    ForUpdate/StatementExpressionList/StatementExpression/PostfixExpression/PrimaryExpression/PrimaryPrefix/Name/@Image
    =
    ancestor::ForStatement/ForInit//VariableDeclaratorId/@Image
  ]
</value>
         </property>
     </properties>
     <example>
 
public class JumbledIncrementerRule1 {
    public void foo() {
        for (int i = 0; i &lt; 10; i++) {          // only references 'i'
            for (int k = 0; k &lt; 20; i++) {      // references both 'i' and 'k'
                System.out.println("Hello");
            }
        }
    }
}

     </example>
     </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_basic.html#forloopshouldbewhileloop"
         language="java"
         message="This for loop could be simplified to a while loop"
         name="ForLoopShouldBeWhileLoop"
         since="1.02">
      <description>
Some for loops can be simplified to while loops, this makes them more concise.
      </description>
      <priority>3</priority>
      <properties>
        <property name="xpath">
            <value>
//ForStatement
  [count(*) &gt; 1]
  [not(LocalVariableDeclaration)]
  [not(ForInit)]
  [not(ForUpdate)]
  [not(Type and Expression and Statement)]
</value>
        </property>
      </properties>
      <example>
  
public class Foo {
    void bar() {
        for (;true;) true; // No Init or Update part, may as well be: while (true)
    }
}
 
      </example>
    </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.basic.OverrideBothEqualsAndHashcodeRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_basic.html#overridebothequalsandhashcode"
         language="java"
         message="Ensure you override both equals() and hashCode()"
         name="OverrideBothEqualsAndHashcode"
         since="0.4">
      <description>
Override both public boolean Object.equals(Object other), and public int Object.hashCode(), or override neither.  Even if you are inheriting a hashCode() from a parent class, consider implementing hashCode and explicitly delegating to your superclass.
      </description>
      <priority>3</priority>
      <example>
  
public class Bar {        // poor, missing a hashcode() method
    public boolean equals(Object o) {
      // do some comparison
    }
}

public class Baz {        // poor, missing an equals() method
    public int hashCode() {
      // return some hash value
    }
}

public class Foo {        // perfect, both methods provided
    public boolean equals(Object other) {
      // do some comparison
    }
    public int hashCode() {
      // return some hash value
    }
}
 
      </example>
    </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.basic.DoubleCheckedLockingRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_basic.html#doublecheckedlocking"
         language="java"
         message="Double checked locking is not thread safe in Java."
         name="DoubleCheckedLocking"
         since="1.04">
      <description>
Partially created objects can be returned by the Double Checked Locking pattern when used in Java.
An optimizing JRE may assign a reference to the baz variable before it calls the constructor of the object the
reference points to.

Note: With Java 5, you can make Double checked locking work, if you declare the variable to be `volatile`.

For more details refer to: &lt;http://www.javaworld.com/javaworld/jw-02-2001/jw-0209-double.html&gt;
or &lt;http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html&gt;
      </description>
        <priority>1</priority>
      <example>
  
public class Foo {
    /*volatile */ Object baz = null; // fix for Java5 and later: volatile
    Object bar() {
        if (baz == null) { // baz may be non-null yet not fully created
            synchronized(this) {
                if (baz == null) {
                    baz = new Object();
                }
              }
        }
        return baz;
    }
}
 
      </example>
    </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_basic.html#returnfromfinallyblock"
         language="java"
         message="Avoid returning from a finally block"
         name="ReturnFromFinallyBlock"
         since="1.05">
      <description>
Avoid returning from a finally block, this can discard exceptions.
      </description>
      <priority>3</priority>
      <properties>
          <property name="xpath">
              <value>

//FinallyStatement//ReturnStatement

              </value>
          </property>
      </properties>
      <example>
  
public class Bar {
    public String foo() {
        try {
            throw new Exception( "My Exception" );
        } catch (Exception e) {
            throw e;
        } finally {
            return "A. O. K."; // return not recommended here
        }
    }
}

      </example>
    </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_basic.html#unconditionalifstatement"
         language="java"
         message="Do not use 'if' statements that are always true or always false"
         name="UnconditionalIfStatement"
         since="1.5">
      <description>
Do not use "if" statements whose conditionals are always true or always false.
      </description>
      <priority>3</priority>
        <properties>
            <property name="xpath">
                <value>
 
//IfStatement/Expression
 [count(PrimaryExpression)=1]
 /PrimaryExpression/PrimaryPrefix/Literal/BooleanLiteral

                </value>
            </property>
        </properties>
      <example>
  
public class Foo {
    public void close() {
        if (true) {        // fixed conditional, not recommended
            // ...
        }
    }
}

      </example>
    </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.basic.BooleanInstantiationRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_basic.html#booleaninstantiation"
         message="Avoid instantiating Boolean objects; reference Boolean.TRUE or Boolean.FALSE or call Boolean.valueOf() instead."
         name="BooleanInstantiation"
         since="1.2">
      <description>
Avoid instantiating Boolean objects; you can reference Boolean.TRUE, Boolean.FALSE, or call Boolean.valueOf() instead.
   </description>
      <priority>2</priority>
      <example>
   
Boolean bar = new Boolean("true");        // unnecessary creation, just reference Boolean.TRUE;
Boolean buz = Boolean.valueOf(false);    // ...., just reference Boolean.FALSE;
   
   </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_basic.html#collapsibleifstatements"
         language="java"
         message="These nested if statements could be combined"
         name="CollapsibleIfStatements"
         since="3.1">
      <description>
Sometimes two consecutive 'if' statements can be consolidated by separating their conditions with a boolean short-circuit operator.
      </description>
      <priority>3</priority>
      <properties>
        <property name="xpath">
            <value>
                
//IfStatement[@Else='false']/Statement
 /IfStatement[@Else='false']
 |
//IfStatement[@Else='false']/Statement
 /Block[count(BlockStatement)=1]/BlockStatement
  /Statement/IfStatement[@Else='false']
            </value>
        </property>
      </properties>
      <example>
  
void bar() {
    if (x) {            // original implementation
        if (y) {
            // do stuff
        }
    }
}

void bar() {
    if (x &amp;&amp; y) {        // optimized implementation
        // do stuff
    }
}
 
      </example>
    </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_basic.html#classcastexceptionwithtoarray"
         language="java"
         message="This usage of the Collection.toArray() method will throw a ClassCastException."
         name="ClassCastExceptionWithToArray"
         since="3.4">
      <description>
When deriving an array of a specific class from your Collection, one should provide an array of
the same class as the parameter of the toArray() method. Doing otherwise you will will result
in a ClassCastException.
  </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>

//CastExpression[Type/ReferenceType/ClassOrInterfaceType[@Image !=
"Object"]]/PrimaryExpression
[
 PrimaryPrefix/Name[ends-with(@Image, '.toArray')]
 and
 PrimarySuffix/Arguments[count(*) = 0]
and
count(PrimarySuffix) = 1
]

    </value>
         </property>
      </properties>
      <example>

Collection c = new ArrayList();
Integer obj = new Integer(1);
c.add(obj);

    // this would trigger the rule (and throw a ClassCastException if executed)
Integer[] a = (Integer [])c.toArray();

   // this is fine and will not trigger the rule
Integer[] b = (Integer [])c.toArray(new Integer[c.size()]);

  </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_basic.html#avoiddecimalliteralsinbigdecimalconstructor"
         language="java"
         message="Avoid creating BigDecimal with a decimal (float/double) literal. Use a String literal"
         name="AvoidDecimalLiteralsInBigDecimalConstructor"
         since="3.4">
      <description>
One might assume that the result of "new BigDecimal(0.1)" is exactly equal to 0.1, but it is actually
equal to .1000000000000000055511151231257827021181583404541015625.
This is because 0.1 cannot be represented exactly as a double (or as a binary fraction of any finite
length). Thus, the long value that is being passed in to the constructor is not exactly equal to 0.1,
appearances notwithstanding.

The (String) constructor, on the other hand, is perfectly predictable: 'new BigDecimal("0.1")' is
exactly equal to 0.1, as one would expect.  Therefore, it is generally recommended that the
(String) constructor be used in preference to this one.
  </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>

//AllocationExpression
[ClassOrInterfaceType[@Image="BigDecimal"]]
[Arguments/ArgumentList/Expression/PrimaryExpression/PrimaryPrefix
    [
        Literal[(not(ends-with(@Image,'"'))) and contains(@Image,".")]
        or
        Name[ancestor::Block/BlockStatement/LocalVariableDeclaration
                [Type[PrimitiveType[@Image='double' or @Image='float']
                      or ReferenceType/ClassOrInterfaceType[@Image='Double' or @Image='Float']]]
                /VariableDeclarator/VariableDeclaratorId/@Image = @Image
            ]
        or
        Name[ancestor::MethodDeclaration/MethodDeclarator/FormalParameters/FormalParameter
                [Type[PrimitiveType[@Image='double' or @Image='float']
                      or ReferenceType/ClassOrInterfaceType[@Image='Double' or @Image='Float']]]
                /VariableDeclaratorId/@Image = @Image
            ]
    ]
]
 
    </value>
         </property>
      </properties>
      <example>

BigDecimal bd = new BigDecimal(1.123);       // loss of precision, this would trigger the rule

BigDecimal bd = new BigDecimal("1.123");     // preferred approach

BigDecimal bd = new BigDecimal(12);          // preferred approach, ok for integer values

  </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_basic.html#misplacednullcheck"
         language="java"
         message="The null check here is misplaced; if the variable is null there will be a NullPointerException"
         name="MisplacedNullCheck"
         since="3.5">
      <description>
The null check here is misplaced. If the variable is null a NullPointerException will be thrown.
Either the check is useless (the variable will never be "null") or it is incorrect.
      </description>
      <priority>3</priority>
      <properties>
        <property name="xpath">
            <value>
    
//Expression
    /*[self::ConditionalOrExpression or self::ConditionalAndExpression]
    /descendant::PrimaryExpression/PrimaryPrefix
    /Name[starts-with(@Image,
        concat(ancestor::PrimaryExpression/following-sibling::EqualityExpression
            [./PrimaryExpression/PrimaryPrefix/Literal/NullLiteral]
            /PrimaryExpression/PrimaryPrefix
            /Name[count(../../PrimarySuffix)=0]/@Image,".")
        )
     ]
     [count(ancestor::ConditionalAndExpression/EqualityExpression
            [@Image='!=']
            [./PrimaryExpression/PrimaryPrefix/Literal/NullLiteral]
            [starts-with(following-sibling::*/PrimaryExpression/PrimaryPrefix/Name/@Image,
                concat(./PrimaryExpression/PrimaryPrefix/Name/@Image, '.'))]
      ) = 0
     ]
    
        </value>
        </property>
      </properties>
      <example>
    
public class Foo {
    void bar() {
        if (a.equals(baz) &amp;&amp; a != null) {}
        }
}
    
      </example>
      <example>
public class Foo {
    void bar() {
        if (a.equals(baz) || a == null) {}
    }
}
   </example>
    </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_basic.html#avoidthreadgroup"
         language="java"
         message="Avoid using java.lang.ThreadGroup; it is not thread safe"
         name="AvoidThreadGroup"
         since="3.6"
         typeResolution="true">
      <description>
Avoid using java.lang.ThreadGroup; although it is intended to be used in a threaded environment
it contains methods that are not thread-safe.
      </description>
      <priority>3</priority>
      <properties>
        <property name="xpath">
            <value>

//AllocationExpression/ClassOrInterfaceType[pmd-java:typeof(@Image, 'java.lang.ThreadGroup')]|
//PrimarySuffix[contains(@Image, 'getThreadGroup')]

        </value>
        </property>
      </properties>
      <example>
    
public class Bar {
    void buz() {
        ThreadGroup tg = new ThreadGroup("My threadgroup");
        tg = new ThreadGroup(tg, "my thread group");
        tg = Thread.currentThread().getThreadGroup();
        tg = System.getSecurityManager().getThreadGroup();
    }
}
    
      </example>
    </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.basic.BrokenNullCheckRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_basic.html#brokennullcheck"
         message="Method call on object which may be null"
         name="BrokenNullCheck"
         since="3.8">
        <description>
The null check is broken since it will throw a NullPointerException itself.
It is likely that you used || instead of &amp;&amp; or vice versa.
     </description>
        <priority>2</priority>
        <example>

public String bar(String string) {
  // should be &amp;&amp;
    if (string!=null || !string.equals(""))
        return string;
  // should be ||
    if (string==null &amp;&amp; string.equals(""))
        return string;
}
        
        </example>
    </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.basic.BigIntegerInstantiationRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_basic.html#bigintegerinstantiation"
         message="Don't create instances of already existing BigInteger and BigDecimal (ZERO, ONE, TEN)"
         name="BigIntegerInstantiation"
         since="3.9">
      <description>
Don't create instances of already existing BigInteger (BigInteger.ZERO, BigInteger.ONE) and
for Java 1.5 onwards, BigInteger.TEN and BigDecimal (BigDecimal.ZERO, BigDecimal.ONE, BigDecimal.TEN)
  </description>
      <priority>3</priority>
      <example>

BigInteger bi = new BigInteger(1);       // reference BigInteger.ONE instead
BigInteger bi2 = new BigInteger("0");    // reference BigInteger.ZERO instead
BigInteger bi3 = new BigInteger(0.0);    // reference BigInteger.ZERO instead
BigInteger bi4;
bi4 = new BigInteger(0);                 // reference BigInteger.ZERO instead

  </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.basic.AvoidUsingOctalValuesRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_basic.html#avoidusingoctalvalues"
         message="Do not start a literal by 0 unless it's an octal value"
         name="AvoidUsingOctalValues"
         since="3.9">
      <description>
        
Integer literals should not start with zero since this denotes that the rest of literal will be
interpreted as an octal value.
        
    </description>
      <priority>3</priority>
      <example>
            
int i = 012;    // set i with 10 not 12
int j = 010;    // set j with 8 not 10
k = i * j;      // set k with 80 not 120
            
    </example>
    </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.basic.AvoidUsingHardCodedIPRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_basic.html#avoidusinghardcodedip"
         message="Do not hard code the IP address ${variableName}"
         name="AvoidUsingHardCodedIP"
         since="4.1">
        <description>
            
Application with hard-coded IP addresses can become impossible to deploy in some cases.
Externalizing IP adresses is preferable.
            
        </description>
        <priority>3</priority>
         <properties>
            <property description="Regular Expression" name="pattern" type="String"
                   value="^&#34;[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}&#34;$"/>
        </properties>
        <example>
        
public class Foo {
    private String ip = "127.0.0.1";     // not recommended
}
        
        </example>
    </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.basic.CheckResultSetRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_basic.html#checkresultset"
         language="java"
         message="Always check the return of one of the navigation method (next,previous,first,last) of a ResultSet."
         name="CheckResultSet"
         since="4.1">
        <description>
            
Always check the return values of navigation methods (next, previous, first, last) of a ResultSet.
If the value return is 'false', it should be handled properly.
            
        </description>
        <priority>3</priority>
        <example>
            
Statement stat = conn.createStatement();
ResultSet rst = stat.executeQuery("SELECT name FROM person");
rst.next();     // what if it returns false? bad form
String firstName = rst.getString(1);

Statement stat = conn.createStatement();
ResultSet rst = stat.executeQuery("SELECT name FROM person");
if (rst.next()) {    // result is properly examined and used
    String firstName = rst.getString(1);
    } else  {
        // handle missing data
}
            
        </example>
    </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.basic.AvoidMultipleUnaryOperatorsRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_basic.html#avoidmultipleunaryoperators"
         message="Using multiple unary operators may be a bug, and/or is confusing."
         name="AvoidMultipleUnaryOperators"
         since="4.2">
        <description>
            
The use of multiple unary operators may be problematic, and/or confusing.
Ensure that the intended usage is not a bug, or consider simplifying the expression.
            
        </description>
        <priority>2</priority>
        <example>
            
// These are typo bugs, or at best needlessly complex and confusing:
int i = - -1;
int j = + - +1;
int z = ~~2;
boolean b = !!true;
boolean c = !!!true;

// These are better:
int i = 1;
int j = -1;
int z = 2;
boolean b = true;
boolean c = false;

// And these just make your brain hurt:
int i = ~-2;
int j = -~7;
            
        </example>
    </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_basic.html#extendsobject"
         language="java"
         message="No need to explicitly extend Object."
         name="ExtendsObject"
         since="5.0">
      <description>No need to explicitly extend Object.</description>
      <priority>4</priority>
      <properties>
         <property name="xpath">
            <value>
          
//ExtendsList/ClassOrInterfaceType[@Image='Object' or @Image='java.lang.Object']
          
          </value>
         </property>
      </properties>
      <example>
    
public class Foo extends Object {     // not required
}
    
    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.basic.CheckSkipResultRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_basic.html#checkskipresult"
         language="java"
         message="Check the value returned by the skip() method of an InputStream to see if the requested number of bytes has been skipped."
         name="CheckSkipResult"
         since="5.0">
        <description>The skip() method may skip a smaller number of bytes than requested. Check the returned value to find out if it was the case or not.</description>
        <priority>3</priority>
        <example>
        
public class Foo {

   private FileInputStream _s = new FileInputStream("file");

   public void skip(int n) throws IOException {
      _s.skip(n); // You are not sure that exactly n bytes are skipped
   }

   public void skipExactly(int n) throws IOException {
      while (n != 0) {
         long skipped = _s.skip(n);
         if (skipped == 0)
            throw new EOFException();
         n -= skipped;
      }
   }
        
        </example>
    </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.basic.AvoidBranchingStatementAsLastInLoopRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_basic.html#avoidbranchingstatementaslastinloop"
         message="Avoid using a branching statement as the last in a loop."
         name="AvoidBranchingStatementAsLastInLoop"
         since="5.0">
        <description>
            
Using a branching statement as the last part of a loop may be a bug, and/or is confusing.
Ensure that the usage is not a bug, or consider using another approach.
            
        </description>
        <priority>2</priority>
        <example>
            
  // unusual use of branching statement in a loop
for (int i = 0; i &lt; 10; i++) {
    if (i*i &lt;= 25) {
        continue;
    }
    break;
}

  // this makes more sense...
for (int i = 0; i &lt; 10; i++) {
    if (i*i &gt; 25) {
        break;
    }
}
            
        </example>
    </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_basic.html#dontcallthreadrun"
         language="java"
         message="Don't call Thread.run() explicitly, use Thread.start()"
         name="DontCallThreadRun"
         since="4.3">
      <description>
Explicitly calling Thread.run() method will execute in the caller's thread of control.  Instead, call Thread.start() for the intended behavior.
      </description>
      <priority>4</priority>
      <properties>
        <property name="xpath">
            <value>

//StatementExpression/PrimaryExpression
[
    PrimaryPrefix
    [
        ./Name[ends-with(@Image, '.run') or @Image = 'run']
        and substring-before(Name/@Image, '.') =//VariableDeclarator/VariableDeclaratorId/@Image
        [../../../Type/ReferenceType[ClassOrInterfaceType/@Image = 'Thread']]
        or (
        ./AllocationExpression/ClassOrInterfaceType[@Image = 'Thread']
        and ../PrimarySuffix[@Image = 'run'])
    ]
]

         </value>
        </property>
      </properties>
      <example>

Thread t = new Thread();
t.run();            // use t.start() instead
new Thread().run(); // same violation

      </example>
    </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_basic.html#dontusefloattypeforloopindices"
         language="java"
         message="Don't use floating point for loop indices. If you must use floating point, use double."
         name="DontUseFloatTypeForLoopIndices"
         since="4.3">
      <description>
Don't use floating point for loop indices. If you must use floating point, use double
unless you're certain that float provides enough precision and you have a compelling
performance need (space or time).
    </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>

//ForStatement/ForInit/LocalVariableDeclaration
/Type/PrimitiveType[@Image="float"]

       </value>
         </property>
      </properties>
      <example>

public class Count {
  public static void main(String[] args) {
    final int START = 2000000000;
    int count = 0;
    for (float f = START; f &lt; START + 50; f++)
      count++;
      //Prints 0 because (float) START == (float) (START + 50).
      System.out.println(count);
      //The termination test misbehaves due to floating point granularity.
    }
}

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_basic.html#simplifiedternary"
         language="java"
         message="Ternary operators that can be simplified with || or &amp;&amp;"
         name="SimplifiedTernary"
         since="5.4.0">
      <description>
        
Look for ternary operators with the form `condition ? literalBoolean : foo`
or `condition ? foo : literalBoolean`.

These expressions can be simplified respectively to
`condition || foo`  when the literalBoolean is true
`!condition &amp;&amp; foo` when the literalBoolean is false
or
`!condition || foo` when the literalBoolean is true
`condition &amp;&amp; foo`  when the literalBoolean is false
        
    </description>
      <priority>3</priority>
      <properties>
        <property name="xpath">
            <value>
//ConditionalExpression[@Ternary='true'][not(PrimaryExpression/*/Literal) and (Expression/PrimaryExpression/*/Literal/BooleanLiteral)]
|
//ConditionalExpression[@Ternary='true'][not(Expression/PrimaryExpression/*/Literal) and (PrimaryExpression/*/Literal/BooleanLiteral)]

            </value>
        </property>
      </properties>
      <example>
        
public class Foo {
    public boolean test() {
        return condition ? true : something(); // can be as simple as return condition || something();
    }

    public void test2() {
        final boolean value = condition ? false : something(); // can be as simple as value = !condition &amp;&amp; something();
    }

    public boolean test3() {
        return condition ? something() : true; // can be as simple as return !condition || something();
    }

    public void test4() {
        final boolean otherValue = condition ? something() : false; // can be as simple as condition &amp;&amp; something();
    }
}
        
    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.design.UseUtilityClassRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_design.html#useutilityclass"
         message="All methods are static.  Consider using a utility class instead. Alternatively, you could add a private constructor or make the class abstract to silence this warning."
         name="UseUtilityClass"
         since="0.3">
      <description>
For classes that only have static methods, consider making them utility classes.
Note that this doesn't apply to abstract classes, since their subclasses may
well include non-static methods.  Also, if you want this class to be a utility class,
remember to add a private constructor to prevent instantiation.
(Note, that this use was known before PMD 5.1.0 as UseSingleton).
    </description>
      <priority>3</priority>
      <example>

public class MaybeAUtility {
  public static void foo() {}
  public static void bar() {}
}

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.design.SimplifyBooleanReturnsRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_design.html#simplifybooleanreturns"
         message="Avoid unnecessary if..then..else statements when returning booleans"
         name="SimplifyBooleanReturns"
         since="0.9">
      <description>
Avoid unnecessary if-then-else statements when returning a boolean. The result of
the conditional test can be returned instead.
    </description>
      <priority>3</priority>
      <example>

public boolean isBarEqualTo(int x) {
    if (bar == x) {      // this bit of code...
        return true;
    } else {
        return false;
    }
}

public boolean isBarEqualTo(int x) {
    return bar == x;    // can be replaced with this
}

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_design.html#simplifybooleanexpressions"
         language="java"
         message="Avoid unnecessary comparisons in boolean expressions"
         name="SimplifyBooleanExpressions"
         since="1.05">
      <description>
Avoid unnecessary comparisons in boolean expressions, they serve no purpose and impacts readability.
      </description>
      <priority>3</priority>
      <properties>
          <property name="xpath">
              <value>

//EqualityExpression/PrimaryExpression
 /PrimaryPrefix/Literal/BooleanLiteral

              </value>
          </property>
      </properties>
      <example>
  
public class Bar {
  // can be simplified to
  // bar = isFoo();
  private boolean bar = (isFoo() == true);

  public isFoo() { return false;}
}
  
      </example>
    </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_design.html#switchstmtsshouldhavedefault"
         language="java"
         message="Switch statements should have a default label"
         name="SwitchStmtsShouldHaveDefault"
         since="1.0">
      <description>
All switch statements should include a default option to catch any unspecified values.
    </description>
      <priority>3</priority>
      <properties>
          <property name="xpath">
              <value>
                  
//SwitchStatement[not(SwitchLabel[@Default='true'])]
                  
              </value>
          </property>
      </properties>
      <example>

public void bar() {
    int x = 2;
    switch (x) {
      case 1: int j = 6;
      case 2: int j = 8;
          // missing default: here
    }
}

    </example>
    </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.design.AvoidDeeplyNestedIfStmtsRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_design.html#avoiddeeplynestedifstmts"
         message="Deeply nested if..then statements are hard to read"
         name="AvoidDeeplyNestedIfStmts"
         since="1.0">
      <description>
Avoid creating deeply nested if-then statements since they are harder to read and error-prone to maintain.
    </description>
      <priority>3</priority>
      <example>

public class Foo {
  public void bar(int x, int y, int z) {
    if (x&gt;y) {
      if (y&gt;z) {
        if (z==x) {
         // !! too deep
        }
      }
    }
  }
}

    </example>
    </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.design.AvoidReassigningParametersRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_design.html#avoidreassigningparameters"
         message="Avoid reassigning parameters such as ''{0}''"
         name="AvoidReassigningParameters"
         since="1.0">
      <description>
Reassigning values to incoming parameters is not recommended.  Use temporary local variables instead.
    </description>
        <priority>2</priority>
      <example>

public class Foo {
  private void foo(String bar) {
    bar = "something else";
  }
}

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.design.SwitchDensityRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_design.html#switchdensity"
         message="A high ratio of statements to labels in a switch statement.  Consider refactoring."
         name="SwitchDensity"
         since="1.02">
      <description>
A high ratio of statements to labels in a switch statement implies that the switch statement
is overloaded.  Consider moving the statements into new methods or creating subclasses based
on the switch variable.
      </description>
        <priority>3</priority>
      <example>
 
public class Foo {
  public void bar(int x) {
    switch (x) {
      case 1: {
        // lots of statements
        break;
      } case 2: {
        // lots of statements
        break;
      }
    }
  }
}
 
      </example>
    </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.design.ConstructorCallsOverridableMethodRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_design.html#constructorcallsoverridablemethod"
         message="Overridable {0} called during object construction"
         name="ConstructorCallsOverridableMethod"
         since="1.04">
      <description>
Calling overridable methods during construction poses a risk of invoking methods on an incompletely
constructed object and can be difficult to debug.
It may leave the sub-class unable to construct its superclass or forced to replicate the construction
process completely within itself, losing the ability to call super().  If the default constructor
contains a call to an overridable method, the subclass may be completely uninstantiable.   Note that
this includes method calls throughout the control flow graph - i.e., if a constructor Foo() calls a
private method bar() that calls a public method buz(), this denotes a problem.
      </description>
        <priority>1</priority>
      <example>
  
public class SeniorClass {
  public SeniorClass(){
      toString(); //may throw NullPointerException if overridden
  }
  public String toString(){
    return "IAmSeniorClass";
  }
}
public class JuniorClass extends SeniorClass {
  private String name;
  public JuniorClass(){
    super(); //Automatic call leads to NullPointerException
    name = "JuniorClass";
  }
  public String toString(){
    return name.toUpperCase();
  }
}
  
      </example>
    </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.design.AccessorClassGenerationRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_design.html#accessorclassgeneration"
         message="Avoid instantiation through private constructors from outside of the constructor's class."
         name="AccessorClassGeneration"
         since="1.04">
      <description>
Instantiation by way of private constructors from outside of the constructor's class often causes the
generation of an accessor. A factory method, or non-privatization of the constructor can eliminate this
situation. The generated class file is actually an interface.  It gives the accessing class the ability
to invoke a new hidden package scope constructor that takes the interface as a supplementary parameter.
This turns a private constructor effectively into one with package scope, and is challenging to discern.
      </description>
      <priority>3</priority>
      <example>
  
public class Outer {
 void method(){
  Inner ic = new Inner();//Causes generation of accessor class
 }
 public class Inner {
  private Inner(){}
 }
}
  
      </example>
    </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_design.html#finalfieldcouldbestatic"
         language="java"
         message="This final field could be made static"
         name="FinalFieldCouldBeStatic"
         since="1.1">
      <description>
If a final field is assigned to a compile-time constant, it could be made static, thus saving overhead
in each object at runtime.
      </description>
      <priority>3</priority>
        <properties>
            <property name="xpath">
                <value>
                    
//FieldDeclaration
 [@Final='true' and @Static='false']
   /VariableDeclarator/VariableInitializer/Expression
    /PrimaryExpression[not(PrimarySuffix)]/PrimaryPrefix/Literal
                    
                </value>
            </property>
        </properties>
      <example>
  
public class Foo {
  public final int BAR = 42; // this could be static and save some space
}
  
      </example>
    </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.design.CloseResourceRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_design.html#closeresource"
         message="Ensure that resources like this {0} object are closed after use"
         name="CloseResource"
         since="1.2.2">
      <description>
Ensure that resources (like Connection, Statement, and ResultSet objects) are always closed after use.
    </description>
      <priority>3</priority>
      <example>

public class Bar {
  public void foo() {
    Connection c = pool.getConnection();
    try {
      // do stuff
    } catch (SQLException ex) {
     // handle exception
    } finally {
      // oops, should close the connection using 'close'!
      // c.close();
    }
  }
}

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_design.html#nonstaticinitializer"
         language="java"
         message="Non-static initializers are confusing"
         name="NonStaticInitializer"
         since="1.5">
       <description>
A non-static initializer block will be called any time a constructor is invoked (just prior to
invoking the constructor).  While this is a valid language construct, it is rarely used and is
confusing.
       </description>
       <priority>3</priority>
         <properties>
             <property name="xpath">
                 <value>

//Initializer[@Static='false']

                 </value>
             </property>
         </properties>
       <example>
   
public class MyClass {
  // this block gets run before any call to a constructor
  {
    System.out.println("I am about to construct myself");
  }
}
   
       </example>
     </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_design.html#defaultlabelnotlastinswitchstmt"
         language="java"
         message="The default label should be the last label in a switch statement"
         name="DefaultLabelNotLastInSwitchStmt"
         since="1.5">
       <description>
By convention, the default label should be the last label in a switch statement.
       </description>
       <priority>3</priority>
         <properties>
             <property name="xpath">
                 <value>

//SwitchStatement
 [not(SwitchLabel[position() = last()][@Default='true'])]
 [SwitchLabel[@Default='true']]

                 </value>
             </property>
         </properties>
       <example>
   
public class Foo {
  void bar(int a) {
   switch (a) {
    case 1:  // do something
       break;
    default:  // the default case should be last, by convention
       break;
    case 2:
       break;
   }
  }
}   
       </example>
     </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_design.html#noncaselabelinswitchstatement"
         language="java"
         message="A non-case label was present in a switch statement"
         name="NonCaseLabelInSwitchStatement"
         since="1.5">
       <description>
A non-case label (e.g. a named break/continue label) was present in a switch statement.
This legal, but confusing. It is easy to mix up the case labels and the non-case labels.
       </description>
       <priority>3</priority>
         <properties>
             <property name="xpath">
                 <value>
 
//SwitchStatement//BlockStatement/Statement/LabeledStatement
 
                 </value>
             </property>
         </properties>
       <example>
   
public class Foo {
  void bar(int a) {
   switch (a) {
     case 1:
       // do something
       break;
     mylabel: // this is legal, but confusing!
       break;
     default:
       break;
    }
  }
}
   
       </example>
     </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_design.html#optimizabletoarraycall"
         language="java"
         message="This call to Collection.toArray() may be optimizable"
         name="OptimizableToArrayCall"
         since="1.8">
      <description>
Calls to a collection's toArray() method should specify target arrays sized to match the size of the
collection. Initial arrays that are too small are discarded in favour of new ones that have to be created
that are the proper size.
      </description>
      <priority>3</priority>
      <properties>
          <property name="xpath">
              <value>
                  
//PrimaryExpression
[PrimaryPrefix/Name[ends-with(@Image, 'toArray')]]
[
PrimarySuffix/Arguments/ArgumentList/Expression
 /PrimaryExpression/PrimaryPrefix/AllocationExpression
 /ArrayDimsAndInits/Expression/PrimaryExpression/PrimaryPrefix/Literal[@Image='0']
]
                  
              </value>
          </property>
      </properties>
      <example>
  
List foos = getFoos();

    // inefficient, the array will be discarded
Foo[] fooArray = foos.toArray(new Foo[0]);

    // much better; this one sizes the destination array,
    // avoiding of a new one via reflection
Foo[] fooArray = foos.toArray(new Foo[foos.size()]);
  
      </example>
    </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_design.html#badcomparison"
         language="java"
         message="Avoid equality comparisons with Double.NaN"
         name="BadComparison"
         since="1.8">
      <description>
Avoid equality comparisons with Double.NaN. Due to the implicit lack of representation
precision when comparing floating point numbers these are likely to cause logic errors.
      </description>
      <priority>3</priority>
      <properties>
          <property name="xpath">
              <value>
                  
//EqualityExpression[@Image='==']
 /PrimaryExpression/PrimaryPrefix
 /Name[@Image='Double.NaN' or @Image='Float.NaN']
                  
              </value>
          </property>
      </properties>
      <example>
  
boolean x = (y == Double.NaN);
  
      </example>
    </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_design.html#equalsnull"
         language="java"
         message="Avoid using equals() to compare against null"
         name="EqualsNull"
         since="1.9">
        <description>
Tests for null should not use the equals() method. The '==' operator should be used instead.
        </description>
        <priority>1</priority>
        <properties>
            <property name="xpath">
                <value>
    
//PrimaryExpression
  [
    PrimaryPrefix[Name[ends-with(@Image, 'equals')]]
      [following-sibling::node()/Arguments/ArgumentList[count(Expression)=1]
          /Expression/PrimaryExpression/PrimaryPrefix/Literal/NullLiteral]

    or

    PrimarySuffix[ends-with(@Image, 'equals')]
      [following-sibling::node()/Arguments/ArgumentList[count(Expression)=1]
          /Expression/PrimaryExpression/PrimaryPrefix/Literal/NullLiteral]

  ]
    
                </value>
            </property>
         </properties>
      <example>
       
String x = "foo";

if (x.equals(null)) {   // bad form
    doSomething();
}

if (x == null) {        // preferred
    doSomething();
}
    
        </example>
        </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.design.ConfusingTernaryRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_design.html#confusingternary"
         message="Avoid if (x != y) ..; else ..;"
         name="ConfusingTernary"
         since="1.9">
        <description>
Avoid negation within an "if" expression with an "else" clause.  For example, rephrase:
`if (x != y) diff(); else same();` as: `if (x == y) same(); else diff();`.

Most "if (x != y)" cases without an "else" are often return cases, so consistent use of this
rule makes the code easier to read.  Also, this resolves trivial ordering problems, such
as "does the error case go first?" or "does the common case go first?".
        </description>
        <priority>3</priority>
        <example>
          
boolean bar(int x, int y) {
    return (x != y) ? diff : same;
}
          
        </example>
      </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_design.html#instantiationtogetclass"
         language="java"
         message="Avoid instantiating an object just to call getClass() on it; use the .class public member instead"
         name="InstantiationToGetClass"
         since="2.0">
      <description>
Avoid instantiating an object just to call getClass() on it; use the .class public member instead.
      </description>
      <priority>4</priority>
        <properties>
          <property name="xpath">
            <value>
                
//PrimarySuffix
 [@Image='getClass']
 [parent::PrimaryExpression
  [PrimaryPrefix/AllocationExpression]
  [count(PrimarySuffix) = 2]
 ]
     
            </value>
          </property>
        </properties>
        <example>
    
// replace this
Class c = new String().getClass();

// with this:
Class c = String.class;
    
        </example>
      </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.design.IdempotentOperationsRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_design.html#idempotentoperations"
         message="Avoid idempotent operations (like assigning a variable to itself)."
         name="IdempotentOperations"
         since="2.0">
      <description>
Avoid idempotent operations - they have no effect.
      </description>
        <priority>3</priority>

      <example>
      
public class Foo {
 public void bar() {
  int x = 2;
  x = x;
 }
}
      
      </example>
    </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_design.html#simpledateformatneedslocale"
         language="java"
         message="When instantiating a SimpleDateFormat object, specify a Locale"
         name="SimpleDateFormatNeedsLocale"
         since="2.0">
        <description>
Be sure to specify a Locale when creating SimpleDateFormat instances to ensure that locale-appropriate
formatting is used.
        </description>
        <priority>3</priority>
        <properties>
            <property name="xpath">
                <value>

//AllocationExpression
 [ClassOrInterfaceType[@Image='SimpleDateFormat']]
 [Arguments[@ArgumentCount=1]]

                    </value>
                 </property>
              </properties>
        <example>
        
public class Foo {
  // Should specify Locale.US (or whatever)
  private SimpleDateFormat sdf = new SimpleDateFormat("pattern");
}
        
        </example>
    </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.design.ImmutableFieldRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_design.html#immutablefield"
         message="Private field ''{0}'' could be made final; it is only initialized in the declaration or constructor."
         name="ImmutableField"
         since="2.0">
      <description>
Identifies private fields whose values never change once they are initialized either in the declaration
of the field or by a constructor.  This helps in converting existing classes to becoming immutable ones.
      </description>
        <priority>3</priority>

      <example>
  
public class Foo {
  private int x; // could be final
  public Foo() {
      x = 7;
  }
  public void foo() {
     int a = x + 2;
  }
}
  
      </example>
    </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_design.html#uselocalewithcaseconversions"
         language="java"
         message="When doing a String.toLowerCase()/toUpperCase() call, use a Locale"
         name="UseLocaleWithCaseConversions"
         since="2.0">
      <description>
When doing String.toLowerCase()/toUpperCase() conversions, use Locales to avoids problems with languages that
have unusual conventions, i.e. Turkish.
      </description>
      <priority>3</priority>
        <properties>
          <property name="xpath">
            <value>
                
//PrimaryExpression
[
PrimaryPrefix
[Name[ends-with(@Image, 'toLowerCase') or ends-with(@Image, 'toUpperCase')]]
[following-sibling::PrimarySuffix[position() = 1]/Arguments[@ArgumentCount=0]]

or

PrimarySuffix
[ends-with(@Image, 'toLowerCase') or ends-with(@Image, 'toUpperCase')]
[following-sibling::PrimarySuffix[position() = 1]/Arguments[@ArgumentCount=0]]
]
[not(PrimaryPrefix/Name[ends-with(@Image, 'toHexString')])]

            </value>
          </property>
        </properties>
        <example>
    
class Foo {
    // BAD
    if (x.toLowerCase().equals("list")) { }

    /*
     * This will not match "LIST" when in Turkish locale
     * The above could be
     * if (x.toLowerCase(Locale.US).equals("list")) { }
     * or simply
     * if (x.equalsIgnoreCase("list")) { }
     */
    // GOOD
    String z = a.toLowerCase(Locale.EN);
}
    
        </example>
    </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_design.html#avoidprotectedfieldinfinalclass"
         language="java"
         message="Avoid protected fields in a final class.  Change to private or package access."
         name="AvoidProtectedFieldInFinalClass"
         since="2.1">
         <description>
Do not use protected fields in final classes since they cannot be subclassed.
Clarify your intent by using private or package access modifiers instead.
         </description>
         <priority>3</priority>
         <properties>
             <property name="xpath">
                 <value>

//ClassOrInterfaceDeclaration[@Final='true']
/ClassOrInterfaceBody/ClassOrInterfaceBodyDeclaration
/FieldDeclaration[@Protected='true']
 
                 </value>
             </property>
         </properties>
        <example>

public final class Bar {
  private int x;
  protected int y;  // bar cannot be subclassed, so is y really private or package visible?
  Bar() {}
}
 
         </example>
       </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.design.AssignmentToNonFinalStaticRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_design.html#assignmenttononfinalstatic"
         message="Possible unsafe assignment to a non-final static field in a constructor."
         name="AssignmentToNonFinalStatic"
         since="2.2">
       <description>
Identifies a possible unsafe usage of a static field.
       </description>
         <priority>3</priority>
       <example>
   
public class StaticField {
   static int x;
   public FinalFields(int y) {
    x = y; // unsafe
   }
}
   
       </example>
     </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_design.html#missingstaticmethodinnoninstantiatableclass"
         language="java"
         message="Class cannot be instantiated and does not provide any static methods or fields"
         name="MissingStaticMethodInNonInstantiatableClass"
         since="3.0">
      <description>
A class that has private constructors and does not have any static methods or fields cannot be used.
      </description>
      <priority>3</priority>
      <properties>
          <property name="xpath">
              <value>
    
//ClassOrInterfaceDeclaration[@Nested='false']
[
  (
    ./ClassOrInterfaceBody/ClassOrInterfaceBodyDeclaration/ConstructorDeclaration
    and
    count(./ClassOrInterfaceBody/ClassOrInterfaceBodyDeclaration/ConstructorDeclaration) = count(./ClassOrInterfaceBody/ClassOrInterfaceBodyDeclaration/ConstructorDeclaration[@Private='true'])
  )
  and
  not(.//MethodDeclaration[@Static='true'])
  and
  not(.//FieldDeclaration[@Private='false'][@Static='true'])
  and
  not(.//ClassOrInterfaceDeclaration[@Nested='true']
           [@Public='true']
           [@Static='true']
           [not(./ClassOrInterfaceBody/ClassOrInterfaceBodyDeclaration/ConstructorDeclaration) or ./ClassOrInterfaceBody/ClassOrInterfaceBodyDeclaration/ConstructorDeclaration[@Public='true']]
           [./ClassOrInterfaceBody/ClassOrInterfaceBodyDeclaration/MethodDeclaration
                [@Public='true']
                [./ResultType/Type/ReferenceType/ClassOrInterfaceType
                    [@Image = //ClassOrInterfaceDeclaration[@Nested='false']/@Image]
                ]
            ]
        )
]
    
              </value>
          </property>
      </properties>
      <example>

// This class is unusable, since it cannot be
// instantiated (private constructor),
// and no static method can be called.

public class Foo {
  private Foo() {}
  void foo() {}
}


      </example>
    </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_design.html#avoidsynchronizedatmethodlevel"
         language="java"
         message="Use block level rather than method level synchronization"
         name="AvoidSynchronizedAtMethodLevel"
         since="3.0">
      <description>
Method-level synchronization can cause problems when new code is added to the method.
Block-level synchronization helps to ensure that only the code that needs synchronization
gets it.
      </description>
      <priority>3</priority>
      <properties>
          <property name="xpath">
              <value>
    
//MethodDeclaration[@Synchronized='true']
    
              </value>
          </property>
      </properties>
      <example>

public class Foo {
  // Try to avoid this:
  synchronized void foo() {
  }
  // Prefer this:
  void bar() {
    synchronized(this) {
    }
  }

  // Try to avoid this for static methods:
  static synchronized void fooStatic() {
  }

  // Prefer this:
  static void barStatic() {
    synchronized(Foo.class) {
    }
  }
}

      </example>
    </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_design.html#missingbreakinswitch"
         language="java"
         message="A switch statement does not contain a break"
         name="MissingBreakInSwitch"
         since="3.0">
      <description>
Switch statements without break or return statements for each case option
may indicate problematic behaviour. Empty cases are ignored as these indicate an intentional fall-through.
      </description>
      <priority>3</priority>
      <properties>
          <property name="xpath">
              <value>
    
//SwitchStatement
[(count(.//BreakStatement)
 + count(BlockStatement//Statement/ReturnStatement)
 + count(BlockStatement//Statement/ContinueStatement)
 + count(BlockStatement//Statement/ThrowStatement)
 + count(BlockStatement//Statement/IfStatement[@Else='true' and Statement[2][ReturnStatement|ContinueStatement|ThrowStatement]]/Statement[1][ReturnStatement|ContinueStatement|ThrowStatement])
 + count(SwitchLabel[name(following-sibling::node()) = 'SwitchLabel'])
 + count(SwitchLabel[count(following-sibling::node()) = 0])
  &lt; count (SwitchLabel))]
    
              </value>
          </property>
      </properties>
      <example>

public void bar(int status) {
    switch(status) {
      case CANCELLED:
        doCancelled();
        // break; hm, should this be commented out?
      case NEW:
        doNew();
        // is this really a fall-through?
      case REMOVED:
        doRemoved();
        // what happens if you add another case after this one?
      case OTHER: // empty case - this is interpreted as an intentional fall-through
      case ERROR:
        doErrorHandling();
        break;
    }
}

      </example>
    </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_design.html#usenotifyallinsteadofnotify"
         language="java"
         message="Call Thread.notifyAll() rather than Thread.notify()"
         name="UseNotifyAllInsteadOfNotify"
         since="3.0">
      <description>
Thread.notify() awakens a thread monitoring the object. If more than one thread is monitoring, then only
one is chosen.  The thread chosen is arbitrary; thus its usually safer to call notifyAll() instead.
      </description>
      <priority>3</priority>
      <properties>
          <property name="xpath">
              <value>
    
//StatementExpression/PrimaryExpression
[PrimarySuffix/Arguments[@ArgumentCount = '0']]
[
    PrimaryPrefix[
        ./Name[@Image='notify' or ends-with(@Image,'.notify')]
        or ../PrimarySuffix/@Image='notify'
        or (./AllocationExpression and ../PrimarySuffix[@Image='notify'])
    ]
]
    
              </value>
          </property>
      </properties>
      <example>

  void bar() {
    x.notify();
    // If many threads are monitoring x, only one (and you won't know which) will be notified.
    // use instead:
    x.notifyAll();
  }

      </example>
    </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_design.html#avoidinstanceofchecksincatchclause"
         language="java"
         message="An instanceof check is being performed on the caught exception.  Create a separate catch clause for this exception type."
         name="AvoidInstanceofChecksInCatchClause"
         since="3.0">
      <description>
Each caught exception type should be handled in its own catch clause.
      </description>
      <priority>3</priority>
      <properties>
          <property name="xpath">
              <value>
    
//CatchStatement/FormalParameter
 /following-sibling::Block//InstanceOfExpression/PrimaryExpression/PrimaryPrefix
  /Name[
   @Image = ./ancestor::Block/preceding-sibling::FormalParameter
    /VariableDeclaratorId/@Image
  ]
    
              </value>
          </property>
      </properties>
      <example>

try { // Avoid this
    // do something
} catch (Exception ee) {
    if (ee instanceof IOException) {
        cleanup();
    }
}

try {  // Prefer this:
    // do something
} catch (IOException ee) {
    cleanup();
}

      </example>
    </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_design.html#abstractclasswithoutabstractmethod"
         language="java"
         message="This abstract class does not have any abstract methods"
         name="AbstractClassWithoutAbstractMethod"
         since="3.0">
      <description>
The abstract class does not contain any abstract methods. An abstract class suggests
an incomplete implementation, which is to be completed by subclasses implementing the
abstract methods. If the class is intended to be used as a base class only (not to be instantiated
directly) a protected constructor can be provided prevent direct instantiation.
      </description>
      <priority>3</priority>
      <properties>
          <property name="xpath">
              <value>
//ClassOrInterfaceDeclaration
 [@Abstract='true'
  and count( .//MethodDeclaration[@Abstract='true'] )=0 ]
  [count(ImplementsList)=0]
  [count(.//ExtendsList)=0]
              
              </value>
          </property>
      </properties>
      <example>

public abstract class Foo {
  void int method1() { ... }
  void int method2() { ... }
  // consider using abstract methods or removing
  // the abstract modifier and adding protected constructors
}

      </example>
    </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_design.html#simplifyconditional"
         language="java"
         message="No need to check for null before an instanceof"
         name="SimplifyConditional"
         since="3.1">
          <description>
No need to check for null before an instanceof; the instanceof keyword returns false when given a null argument.
          </description>
          <priority>3</priority>
          <properties>
              <property name="xpath">
                  <value>
                      
//Expression
 [ConditionalOrExpression
 [EqualityExpression[@Image='==']
  //NullLiteral
  and
  UnaryExpressionNotPlusMinus
   [@Image='!']//InstanceOfExpression[PrimaryExpression
     //Name/@Image = ancestor::ConditionalOrExpression/EqualityExpression
      /PrimaryExpression/PrimaryPrefix/Name/@Image]
  and
  (count(UnaryExpressionNotPlusMinus) + 1 = count(*))
 ]
or
ConditionalAndExpression
 [EqualityExpression[@Image='!=']//NullLiteral
 and
InstanceOfExpression
 [PrimaryExpression[count(PrimarySuffix[@ArrayDereference='true'])=0]
  //Name[not(contains(@Image,'.'))]/@Image = ancestor::ConditionalAndExpression
   /EqualityExpression/PrimaryExpression/PrimaryPrefix/Name/@Image]
 and
(count(InstanceOfExpression) + 1 = count(*))
 ]
]
 
                  </value>
              </property>
          </properties>
           <example>
      
class Foo {
  void bar(Object x) {
    if (x != null &amp;&amp; x instanceof Bar) {
      // just drop the "x != null" check
    }
  }
}      
           </example>
        </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.design.CompareObjectsWithEqualsRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_design.html#compareobjectswithequals"
         message="Use equals() to compare object references."
         name="CompareObjectsWithEquals"
         since="3.2">
      <description>
Use equals() to compare object references; avoid comparing them with ==.
  </description>
      <priority>3</priority>
      <example>

class Foo {
  boolean bar(String a, String b) {
    return a == b;
  }
}


  </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_design.html#positionliteralsfirstincomparisons"
         language="java"
         message="Position literals first in String comparisons"
         name="PositionLiteralsFirstInComparisons"
         since="3.3">
      <description>
Position literals first in comparisons, if the second argument is null then NullPointerExceptions
can be avoided, they will just return false.
  </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>
              
//PrimaryExpression[
    PrimaryPrefix[Name[(ends-with(@Image, '.equals'))]]
        [
            (../PrimarySuffix/Arguments/ArgumentList/Expression/PrimaryExpression/PrimaryPrefix/Literal[@StringLiteral='true'])
            and
            ( count(../PrimarySuffix/Arguments/ArgumentList/Expression) = 1 )
        ]
]
[not(ancestor::Expression/ConditionalAndExpression//EqualityExpression[@Image='!=']//NullLiteral)]
[not(ancestor::Expression/ConditionalOrExpression//EqualityExpression[@Image='==']//NullLiteral)]
          
          </value>
         </property>
      </properties>
      <example>

class Foo {
  boolean bar(String x) {
    return x.equals("2"); // should be "2".equals(x)
  }
}


  </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_design.html#positionliteralsfirstincaseinsensitivecomparisons"
         language="java"
         message="Position literals first in String comparisons for EqualsIgnoreCase"
         name="PositionLiteralsFirstInCaseInsensitiveComparisons"
         since="5.1">
      <description>
Position literals first in comparisons, if the second argument is null then NullPointerExceptions
can be avoided, they will just return false.
  </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>
              
//PrimaryExpression[
        PrimaryPrefix[Name
                [
    (ends-with(@Image, '.equalsIgnoreCase'))
                ]
        ]
        [
                   (../PrimarySuffix/Arguments/ArgumentList/Expression/PrimaryExpression/PrimaryPrefix/Literal)
    and
    ( count(../PrimarySuffix/Arguments/ArgumentList/Expression) = 1 )
        ]
]
[not(ancestor::Expression/ConditionalAndExpression//EqualityExpression[@Image='!=']//NullLiteral)]
[not(ancestor::Expression/ConditionalOrExpression//EqualityExpression[@Image='==']//NullLiteral)]

          
          </value>
         </property>
      </properties>
      <example>

class Foo {
  boolean bar(String x) {
    return x.equalsIgnoreCase("2"); // should be "2".equalsIgnoreCase(x)
  }
}


  </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.design.UnnecessaryLocalBeforeReturnRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_design.html#unnecessarylocalbeforereturn"
         message="Consider simply returning the value vs storing it in local variable ''{0}''"
         name="UnnecessaryLocalBeforeReturn"
         since="3.3">
      <description>
Avoid the creation of unnecessary local variables
      </description>
        <priority>3</priority>
      <example>
  
public class Foo {
   public int foo() {
     int x = doSomething();
     return x;  // instead, just 'return doSomething();'
   }
}
  
      </example>
    </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.design.NonThreadSafeSingletonRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_design.html#nonthreadsafesingleton"
         message="Singleton is not thread safe"
         name="NonThreadSafeSingleton"
         since="3.4">
        <description>
Non-thread safe singletons can result in bad state changes. Eliminate
static singletons if possible by instantiating the object directly. Static
singletons are usually not needed as only a single instance exists anyway.
Other possible fixes are to synchronize the entire method or to use an
[initialize-on-demand holder class](https://en.wikipedia.org/wiki/Initialization-on-demand_holder_idiom).

Refrain from using the double-checked locking pattern. The Java Memory Model doesn't
guarantee it to work unless the variable is declared as `volatile`, adding an uneeded
performance penalty. [Reference](http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html)

See Effective Java, item 48.
        </description>
        <priority>3</priority>
        <example>
private static Foo foo = null;

//multiple simultaneous callers may see partially initialized objects
public static Foo getFoo() {
    if (foo==null) {
        foo = new Foo();
    }
    return foo;
}
        </example>
    </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.design.SingleMethodSingletonRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_design.html#singlemethodsingleton"
         message="Class contains multiple getInstance methods. Please review."
         name="SingleMethodSingleton"
         since="5.4">
      <description>
Some classes contain overloaded getInstance. The problem with overloaded getInstance methods
is that the instance created using the overloaded method is not cached and so,
for each call and new objects will be created for every invocation.
    </description>
      <priority>2</priority>
      <example>
public class Singleton {

    private static Singleton singleton = new Singleton( );

    private Singleton(){ }

    public static Singleton getInstance( ) {
        return singleton;
    }

    public static Singleton getInstance(Object obj){
        Singleton singleton = (Singleton) obj;
        return singleton;           //violation
    }
}

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.design.SingletonClassReturningNewInstanceRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_design.html#singletonclassreturningnewinstance"
         message="getInstance method always creates a new object and hence does not comply to Singleton Design Pattern behaviour. Please review"
         name="SingletonClassReturningNewInstance"
         since="5.4">
      <description>
Some classes contain overloaded getInstance. The problem with overloaded getInstance methods
is that the instance created using the overloaded method is not cached and so,
for each call and new objects will be created for every invocation.
    </description>
      <priority>2</priority>
      <example>
class Singleton {
    private static Singleton instance = null;
    public static Singleton getInstance() {
        synchronized(Singleton.class) {
            return new Singleton();
        }
    }
}

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_design.html#uncommentedemptymethodbody"
         language="java"
         message="Document empty method body"
         name="UncommentedEmptyMethodBody"
         since="3.4">
      <description>
Uncommented Empty Method Body finds instances where a method body does not contain
statements, but there is no comment. By explicitly commenting empty method bodies
it is easier to distinguish between intentional (commented) and unintentional
empty methods.
      </description>
      <priority>3</priority>
      <properties>
          <property name="xpath">
              <value>
    
//MethodDeclaration/Block[count(BlockStatement) = 0 and @containsComment = 'false']
 
             </value>
          </property>
      </properties>
      <example>
  
public void doSomething() {
}
 
      </example>
    </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_design.html#uncommentedemptyconstructor"
         language="java"
         message="Document empty constructor"
         name="UncommentedEmptyConstructor"
         since="3.4"
         typeResolution="true">
      <description>
Uncommented Empty Constructor finds instances where a constructor does not
contain statements, but there is no comment. By explicitly commenting empty
constructors it is easier to distinguish between intentional (commented)
and unintentional empty constructors.
      </description>
      <priority>3</priority>
      <properties>
          <property name="xpath">
              <value>
    
//ConstructorDeclaration[@Private='false']
                        [count(BlockStatement) = 0 and ($ignoreExplicitConstructorInvocation = 'true' or not(ExplicitConstructorInvocation)) and @containsComment = 'false']
                        [not(../Annotation/MarkerAnnotation/Name[typeof(@Image, 'javax.inject.Inject', 'Inject')])]

             </value>
          </property>
          <property description="Ignore explicit constructor invocation when deciding whether constructor is empty or not"
                   name="ignoreExplicitConstructorInvocation"
                   type="Boolean"
                   value="false"/>
      </properties>
      <example>
  
public Foo() {
  // This constructor is intentionally empty. Nothing special is needed here.
}
 
      </example>
    </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.design.UnsynchronizedStaticDateFormatterRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_design.html#unsynchronizedstaticdateformatter"
         message="Static DateFormatter objects should be accessed in a synchronized manner"
         name="UnsynchronizedStaticDateFormatter"
         since="3.6">
      <description>
SimpleDateFormat instances are not synchronized. Sun recommends using separate format instances
for each thread. If multiple threads must access a static formatter, the formatter must be
synchronized either on method or block level.
      </description>
      <priority>3</priority>
      <example>
    
public class Foo {
    private static final SimpleDateFormat sdf = new SimpleDateFormat();
    void bar() {
        sdf.format(); // poor, no thread-safety
    }
    synchronized void foo() {
        sdf.format(); // preferred
    }
}
    
      </example>
    </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.design.PreserveStackTraceRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_design.html#preservestacktrace"
         message="New exception is thrown in catch block, original stack trace may be lost"
         name="PreserveStackTrace"
         since="3.7">
      <description>
Throwing a new exception from a catch block without passing the original exception into the
new exception will cause the original stack trace to be lost making it difficult to debug
effectively.
      </description>
      <priority>3</priority>
      <example>
    
public class Foo {
    void good() {
        try{
            Integer.parseInt("a");
        } catch (Exception e) {
            throw new Exception(e); // first possibility to create exception chain
        }
        try {
            Integer.parseInt("a");
        } catch (Exception e) {
            throw (IllegalStateException)new IllegalStateException().initCause(e); // second possibility to create exception chain.
        }
    }
    void bad() {
        try{
            Integer.parseInt("a");
        } catch (Exception e) {
            throw new Exception(e.getMessage());
        }
    }
}
    
      </example>
    </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.design.UseCollectionIsEmptyRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_design.html#usecollectionisempty"
         message="Substitute calls to size() == 0 (or size() != 0, size() &gt; 0, size() &lt; 1) with calls to isEmpty()"
         name="UseCollectionIsEmpty"
         since="3.9">
         <description>
The isEmpty() method on java.util.Collection is provided to determine if a collection has any elements.
Comparing the value of size() to 0 does not convey intent as well as the isEmpty() method.
      </description>
      <priority>3</priority>
      <example>
    
public class Foo {
    void good() {
        List foo = getList();
        if (foo.isEmpty()) {
            // blah
        }
    }

    void bad() {
        List foo = getList();
        if (foo.size() == 0) {
            // blah
        }
    }
}
    
      </example>
    </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_design.html#classwithonlyprivateconstructorsshouldbefinal"
         language="java"
         message="A class which only has private constructors should be final"
         name="ClassWithOnlyPrivateConstructorsShouldBeFinal"
         since="4.1">
        <description>
A class with only private constructors should be final, unless the private constructor
is invoked by a inner class.
        </description>
        <priority>1</priority>
        <properties>
            <property name="xpath">
                <value>
TypeDeclaration[count(../TypeDeclaration) = 1]/ClassOrInterfaceDeclaration
[@Final = 'false']
[count(./ClassOrInterfaceBody/ClassOrInterfaceBodyDeclaration/ConstructorDeclaration[@Private = 'true']) &gt;= 1 ]
[count(./ClassOrInterfaceBody/ClassOrInterfaceBodyDeclaration/ConstructorDeclaration[(@Public = 'true') or (@Protected = 'true') or (@PackagePrivate = 'true')]) = 0 ]
[not(.//ClassOrInterfaceDeclaration)]
             </value>
            </property>
        </properties>
        <example>
public class Foo {  //Should be final
    private Foo() { }
}
     </example>
    </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_design.html#emptymethodinabstractclassshouldbeabstract"
         language="java"
         message="An empty method in an abstract class should be abstract instead"
         name="EmptyMethodInAbstractClassShouldBeAbstract"
         since="4.1">
        <description>
Empty or auto-generated methods in an abstract class should be tagged as abstract. This helps to remove their inapproprate
usage by developers who should be implementing their own versions in the concrete subclasses.
        </description>
        <priority>1</priority>
        <properties>
            <property name="xpath">
                <value>
                
                    //ClassOrInterfaceDeclaration[@Abstract = 'true']
                        /ClassOrInterfaceBody
                        /ClassOrInterfaceBodyDeclaration
                        /MethodDeclaration[@Abstract = 'false' and @Native = 'false']
                        [
                            ( boolean(./Block[count(./BlockStatement) =  1]/BlockStatement/Statement/ReturnStatement/Expression/PrimaryExpression/PrimaryPrefix/Literal/NullLiteral) = 'true' )
                            or
                            ( boolean(./Block[count(./BlockStatement) =  1]/BlockStatement/Statement/ReturnStatement/Expression/PrimaryExpression/PrimaryPrefix/Literal[@Image = '0']) = 'true' )
                            or
                            ( boolean(./Block[count(./BlockStatement) =  1]/BlockStatement/Statement/ReturnStatement/Expression/PrimaryExpression/PrimaryPrefix/Literal[string-length(@Image) = 2]) = 'true' )
                            or
                            (./Block[count(./BlockStatement) =  1]/BlockStatement/Statement/EmptyStatement)
                            or
                            ( count (./Block/*) = 0 )
                        ]
                
             </value>
            </property>
        </properties>
        <example>
            
public abstract class ShouldBeAbstract {
    public Object couldBeAbstract() {
        // Should be abstract method ?
        return null;
    }

    public void couldBeAbstract() {
    }
}

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.design.SingularFieldRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_design.html#singularfield"
         message="Perhaps ''{0}'' could be replaced by a local variable."
         name="SingularField"
         since="3.1">
      <description>
Fields whose scopes are limited to just single methods do not rely on the containing
object to provide them to other methods. They may be better implemented as local variables
within those methods.
      </description>
      <priority>3</priority>
      <example>
public class Foo {
    private int x;  // no reason to exist at the Foo instance level
    public void foo(int y) {
     x = y + 5;
     return x;
    }
}
   </example>
    </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_design.html#returnemptyarrayratherthannull"
         language="java"
         message="Return an empty array rather than 'null'."
         name="ReturnEmptyArrayRatherThanNull"
         since="4.2">
        <description>
For any method that returns an array, it is a better to return an empty array rather than a
null reference. This removes the need for null checking all results and avoids inadvertent
NullPointerExceptions.
        </description>
        <priority>1</priority>
        <properties>
            <property name="xpath">
                <value>
                    
                        //MethodDeclaration
                        [
                        (./ResultType/Type[@Array='true'])
                        and
                        (./Block/BlockStatement/Statement/ReturnStatement/Expression/PrimaryExpression/PrimaryPrefix/Literal/NullLiteral)
                        ]
                    
                </value>
            </property>
        </properties>
        <example>
public class Example {
    // Not a good idea...
    public int[] badBehavior() {
        // ...
        return null;
    }

    // Good behavior
    public String[] bonnePratique() {
        //...
        return new String[0];
    }
}
            </example>
    </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_design.html#abstractclasswithoutanymethod"
         language="java"
         message="No abstract method which means that the keyword is most likely used to prevent instantiation. Use a private or protected constructor instead."
         name="AbstractClassWithoutAnyMethod"
         since="4.2"
         typeResolution="true">
        <description>
If an abstract class does not provides any methods, it may be acting as a simple data container
that is not meant to be instantiated. In this case, it is probably better to use a private or
protected constructor in order to prevent instantiation than make the class misleadingly abstract.
       </description>
        <priority>1</priority>
        <properties>
            <property name="xpath">
                <value>
                    
//ClassOrInterfaceDeclaration
    [@Abstract = 'true']
    [count(//MethodDeclaration) + count(//ConstructorDeclaration) = 0]
    [not(../Annotation/MarkerAnnotation/Name[typeof(@Image, 'com.google.auto.value.AutoValue', 'AutoValue')])]
                    
                </value>
            </property>
        </properties>
        <example>
            
public class abstract Example {
    String field;
    int otherField;
}
            
        </example>
    </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_design.html#toofewbranchesforaswitchstatement"
         language="java"
         message="A switch with less than three branches is inefficient, use a 'if statement' instead."
         name="TooFewBranchesForASwitchStatement"
         since="4.2">
        <description>
Switch statements are intended to be used to support complex branching behaviour. Using a switch for only a few
cases is ill-advised, since switches are not as easy to understand as if-then statements. In these cases use the
if-then statement to increase code readability.
        </description>
        <priority>3</priority>
        <properties>
            <property description="Minimum number of branches for a switch" max="100" min="1"
                   name="minimumNumberCaseForASwitch"
                   type="Integer"
                   value="3"/>
            <property name="xpath">
                <value>
                    
//SwitchStatement[
    (count(.//SwitchLabel) &lt; $minimumNumberCaseForASwitch)
]
                    
                </value>
            </property>
        </properties>
        <example>
            
// With a minimumNumberCaseForASwitch of 3
public class Foo {
    public void bar() {
        switch (condition) {
            case ONE:
                instruction;
                break;
            default:
                break; // not enough for a 'switch' stmt, a simple 'if' stmt would have been more appropriate
        }
    }
}
            
        </example>
    </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_design.html#logicinversion"
         language="java"
         message="Use opposite operator instead of the logic complement operator."
         name="LogicInversion"
         since="5.0">
      <description>
Use opposite operator instead of negating the whole expression with a logic complement operator.
    </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>
          
//UnaryExpressionNotPlusMinus[@Image='!']/PrimaryExpression/PrimaryPrefix/Expression[EqualityExpression or RelationalExpression]
          
          </value>
         </property>
      </properties>
      <example>
    
public boolean bar(int a, int b) {

    if (!(a == b)) { // use !=
         return false;
     }

    if (!(a &lt; b)) { // use &gt;=
         return false;
    }

    return true;
}
    
    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_design.html#usevarargs"
         language="java"
         message="Consider using varargs for methods or constructors which take an array the last parameter."
         minimumLanguageVersion="1.5"
         name="UseVarargs"
         since="5.0">
        <description>
Java 5 introduced the varargs parameter declaration for methods and constructors.  This syntactic
sugar provides flexibility for users of these methods and constructors, allowing them to avoid
having to deal with the creation of an array.
</description>
        <priority>4</priority>
        <properties>
            <property name="xpath">
                <value>
//FormalParameters/FormalParameter
    [position()=last()]
    [@Array='true']
    [@Varargs='false']
    [not (./Type/ReferenceType[@Array='true'][PrimitiveType[@Image='byte']])]
    [not (./Type/ReferenceType[ClassOrInterfaceType[@Image='Byte']])]
    [not (./Type/PrimitiveType[@Image='byte'])]
    [not (ancestor::MethodDeclaration/preceding-sibling::Annotation/*/Name[@Image='Override'])]
    [not(
        ancestor::MethodDeclaration
            [@Public='true' and @Static='true']
            [child::ResultType[@Void='true']] and
        ancestor::MethodDeclarator[@Image='main'] and
        ..[@ParameterCount='1'] and
        ./Type/ReferenceType[ClassOrInterfaceType[@Image='String']]
    )]
            </value>
            </property>
        </properties>
        <example>
public class Foo {
    public void foo(String s, Object[] args) {
        // Do something here...
    }

    public void bar(String s, Object... args) {
        // Ahh, varargs tastes much better...
    }
}
        </example>
    </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.design.FieldDeclarationsShouldBeAtStartOfClassRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_design.html#fielddeclarationsshouldbeatstartofclass"
         language="java"
         message="Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes."
         name="FieldDeclarationsShouldBeAtStartOfClass"
         since="5.0">
      <description>
Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.
    </description>
      <priority>3</priority>
      <example>
      
public class HelloWorldBean {

  // Field declared before methods / inner classes - OK
  private String _thing;

  public String getMessage() {
    return "Hello World!";
  }

  // Field declared after methods / inner classes - avoid this
  private String _fieldInWrongLocation;
}
      
    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.design.GodClassRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_design.html#godclass"
         language="java"
         message="Possible God Class (WMC={0}, ATFD={2}, TCC={1})"
         metrics="true"
         name="GodClass"
         since="5.0">
        <description>
The God Class rule detects the God Class design flaw using metrics. God classes do too many things,
are very big and overly complex. They should be split apart to be more object-oriented.
The rule uses the detection strategy described in "Object-Oriented Metrics in Practice".
The violations are reported against the entire class.

See also the references:

Michele Lanza and Radu Marinescu. Object-Oriented Metrics in Practice:
Using Software Metrics to Characterize, Evaluate, and Improve the Design
of Object-Oriented Systems. Springer, Berlin, 1 edition, October 2006. Page 80.
        </description>
        <priority>3</priority>
    </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_design.html#avoidprotectedmethodinfinalclassnotextending"
         language="java"
         message="Avoid protected methods in a final class that doesn't extend anything other than Object.  Change to private or package access."
         name="AvoidProtectedMethodInFinalClassNotExtending"
         since="5.1">
         <description>
Do not use protected methods in most final classes since they cannot be subclassed. This should
only be allowed in final classes that extend other classes with protected methods (whose
visibility cannot be reduced). Clarify your intent by using private or package access modifiers instead.
         </description>
         <priority>3</priority>
         <properties>
             <property name="xpath">
                 <value>

//ClassOrInterfaceDeclaration[@Final='true' and not(ExtendsList)]
/ClassOrInterfaceBody/ClassOrInterfaceBodyDeclaration
/MethodDeclaration[@Protected='true'][MethodDeclarator/@Image != 'finalize']
 
                 </value>
             </property>
         </properties>
        <example>

public final class Foo {
  private int bar() {}
  protected int baz() {} // Foo cannot be subclassed, and doesn't extend anything, so is baz() really private or package visible?
}
 
         </example>
       </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_design.html#constantsininterface"
         language="java"
         message="Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19."
         name="ConstantsInInterface"
         since="5.5">
        <description>
Avoid constants in interfaces. Interfaces should define types, constants are implementation details
better placed in classes or enums. See Effective Java, item 19.
        </description>
        <priority>3</priority>
        <properties>
        <property description="Whether to ignore constants in interfaces if the interface defines any methods"
                   name="ignoreIfHasMethods"
                   type="Boolean"
                   value="true"/>
            <property name="xpath">
                <value>

//ClassOrInterfaceDeclaration[@Interface='true'][$ignoreIfHasMethods='false' or not(.//MethodDeclaration)]//FieldDeclaration
 
                </value>
            </property>
        </properties>
        <example>

public interface ConstantInterface {
    public static final int CONST1 = 1; // violation, no fields allowed in interface!
    static final int CONST2 = 1;        // violation, no fields allowed in interface!
    final int CONST3 = 1;               // violation, no fields allowed in interface!
    int CONST4 = 1;                     // violation, no fields allowed in interface!
}

// with ignoreIfHasMethods = false
public interface AnotherConstantInterface {
    public static final int CONST1 = 1; // violation, no fields allowed in interface!

    int anyMethod();
}

// with ignoreIfHasMethods = true
public interface YetAnotherConstantInterface {
    public static final int CONST1 = 1; // no violation

    int anyMethod();
}
 
        </example>
    </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.design.AccessorMethodGenerationRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_design.html#accessormethodgeneration"
         language="java"
         message="Avoid autogenerated methods to access private fields and methods of inner / outer classes"
         name="AccessorMethodGeneration"
         since="5.5.4">
        <description>
When accessing a private field / method from another class, the Java compiler will generate a accessor methods
with package-private visibility. This adds overhead, and to the dex method count on Android. This situation can
be avoided by changing the visibility of the field / method from private to package-private.
        </description>
        <priority>3</priority>
        <example>

public class OuterClass {
    private int counter;
    /* package */ int id;

    public class InnerClass {
        InnerClass() {
            OuterClass.this.counter++; // wrong accessor method will be generated
        }

        public int getOuterClassId() {
            return OuterClass.this.id; // id is package-private, no accessor method needed
        }
    }
}
 
        </example>
    </rule>
   <rule ref="rulesets/java/migrating.xml/JUnit4TestShouldUseBeforeAnnotation"/>
   <rule ref="rulesets/java/migrating.xml/JUnit4TestShouldUseTestAnnotation"/>
   <rule ref="rulesets/java/migrating.xml/JUnit4TestShouldUseAfterAnnotation"/>
   <rule ref="rulesets/java/migrating.xml/JUnit4SuitesShouldUseSuiteAnnotation"/>
   <rule ref="rulesets/java/migrating.xml/JUnitUseExpected"/>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_logging-jakarta-commons.html#usecorrectexceptionlogging"
         language="java"
         message="Use the correct logging statement for logging exceptions"
         name="UseCorrectExceptionLogging"
         since="3.2">
      <description>
To make sure the full stacktrace is printed out, use the logging statement with two arguments: a String and a Throwable.
    </description>
      <priority>3</priority>
      <properties>
        <property name="xpath">
            <value>
//CatchStatement/Block/BlockStatement/Statement/StatementExpression
/PrimaryExpression[PrimaryPrefix/Name[starts-with(@Image,
concat(ancestor::ClassOrInterfaceDeclaration/ClassOrInterfaceBody/ClassOrInterfaceBodyDeclaration/FieldDeclaration
[Type//ClassOrInterfaceType[@Image='Log']]
/VariableDeclarator/VariableDeclaratorId/@Image, '.'))]]
[PrimarySuffix/Arguments[@ArgumentCount='1']]
[PrimarySuffix/Arguments//Name/@Image = ancestor::CatchStatement/FormalParameter/VariableDeclaratorId/@Image]
            </value>
        </property>
      </properties>
      <example>
public class Main {
    private static final Log _LOG = LogFactory.getLog( Main.class );
    void bar() {
        try {
        } catch( Exception e ) {
            _LOG.error( e ); //Wrong!
        } catch( OtherException oe ) {
            _LOG.error( oe.getMessage(), oe ); //Correct
        }
    }
}
</example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_logging-jakarta-commons.html#properlogger"
         language="java"
         message="Logger should be defined private static final and have the correct class"
         name="ProperLogger"
         since="3.3">
      <description>
A logger should normally be defined private static final and be associated with the correct class.
Private final Log log; is also allowed for rare cases where loggers need to be passed around,
with the restriction that the logger needs to be passed into the constructor.
    </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>
//ClassOrInterfaceBodyDeclaration[FieldDeclaration//ClassOrInterfaceType[@Image='Log']
 and
 not(FieldDeclaration[@Final='true'][@Static='true'][@Private='true'][.//VariableDeclaratorId[@Image=$staticLoggerName]]
 //ArgumentList//ClassOrInterfaceType/@Image = ancestor::ClassOrInterfaceDeclaration/@Image)
 and
 not(FieldDeclaration[@Final='true'][@Private='true'][.//VariableDeclaratorId[@Image='log']]
 [count(.//VariableInitializer)=0]
 [ancestor::ClassOrInterfaceBody//StatementExpression[.//PrimaryExpression/descendant::*[@Image='log']][count(.//AllocationExpression)=0]]
 )]
            </value>
        </property>
        <property description="Name of the static Logger variable" name="staticLoggerName"
                   type="String"
                   value="LOG"/>
      </properties>
      <example>
 
public class Foo {

    private static final Log LOG = LogFactory.getLog(Foo.class);    // proper way

    protected Log LOG = LogFactory.getLog(Testclass.class);         // wrong approach
}
 
    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.logging.GuardDebugLoggingRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_logging-jakarta-commons.html#guarddebuglogging"
         language="java"
         message="debug logging that involves string concatenation should be guarded with isDebugEnabled() checks"
         name="GuardDebugLogging"
         since="4.3">
      <description>
When log messages are composed by concatenating strings, the whole section should be guarded
by a isDebugEnabled() check to avoid performance and memory issues.
    </description>
      <priority>3</priority>
      <example>

public class Test {
    private static final Log __log = LogFactory.getLog(Test.class);
    public void test() {
        // okay:
        __log.debug("log something");

        // okay:
        __log.debug("log something with exception", e);

        // bad:
        __log.debug("log something" + " and " + "concat strings");

        // bad:
        __log.debug("log something" + " and " + "concat strings", e);

        // good:
        if (__log.isDebugEnabled()) {
        __log.debug("bla" + "",e );
        }
    }
}
            
    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.logging.GuardLogStatementRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_logging-jakarta-commons.html#guardlogstatement"
         language="java"
         message="There is log block not surrounded by if"
         name="GuardLogStatement"
         since="5.1.0">
      <description>
Whenever using a log level, one should check if the loglevel is actually enabled, or
otherwise skip the associate String creation and manipulation.
    </description>
      <priority>2</priority>
      <example>
 
    // Add this for performance
    if (log.isDebugEnabled() { ...
        log.debug("log something" + " and " + "concat strings");

    </example>
  </rule>
   <rule ref="rulesets/java/migrating.xml/AvoidEnumAsIdentifier"/>
   <rule ref="rulesets/java/migrating.xml/IntegerInstantiation"/>
   <rule ref="rulesets/java/migrating.xml/LongInstantiation"/>
   <rule ref="rulesets/java/migrating.xml/ShortInstantiation"/>
   <rule ref="rulesets/java/migrating.xml/ByteInstantiation"/>
   <rule class="net.sourceforge.pmd.lang.java.rule.unnecessary.UnnecessaryConversionTemporaryRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_unnecessary.html#unnecessaryconversiontemporary"
         message="Avoid unnecessary temporaries when converting primitives to Strings"
         name="UnnecessaryConversionTemporary"
         since="0.1">
      <description>
Avoid the use temporary objects when converting primitives to Strings. Use the static conversion methods
on the wrapper classes instead.
    </description>
      <priority>3</priority>
      <example>

public String convert(int x) {
    String foo = new Integer(x).toString(); // this wastes an object

    return Integer.toString(x);             // preferred approach
}

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.unnecessary.UnnecessaryReturnRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_unnecessary.html#unnecessaryreturn"
         message="Avoid unnecessary return statements"
         name="UnnecessaryReturn"
         since="1.3">
      <description>
Avoid the use of unnecessary return statements.
    </description>
      <priority>3</priority>
      <example>

public class Foo {
    public void bar() {
        int x = 42;
        return;
    }
}

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_unnecessary.html#unnecessaryfinalmodifier"
         language="java"
         message="Unnecessary final modifier in final class / private methods"
         name="UnnecessaryFinalModifier"
         since="3.0">
      <description>
When a class has the final modifier, all the methods are automatically final and do not need to be
tagged as such. Similarly, methods that can't be overridden (private methods, methods of anonymous classes,
methods of enum instance) do not need to be tagged either.
    </description>
      <priority>3</priority>
      <properties>
        <property name="xpath">
            <value>

//ClassOrInterfaceDeclaration[@Final='true' and @Interface='false']
    /ClassOrInterfaceBody/ClassOrInterfaceBodyDeclaration
        [count(./Annotation/MarkerAnnotation/Name[@Image='SafeVarargs' or @Image='java.lang.SafeVarargs']) = 0]
    /MethodDeclaration[@Final='true']
| //MethodDeclaration[@Final='true' and @Private='true']
| //EnumConstant/ClassOrInterfaceBody/ClassOrInterfaceBodyDeclaration/MethodDeclaration[@Final='true']
| //AllocationExpression/ClassOrInterfaceBody/ClassOrInterfaceBodyDeclaration/MethodDeclaration[@Final='true']

            </value>
        </property>
      </properties>
      <example>

public final class Foo {
    // This final modifier is not necessary, since the class is final
    // and thus, all methods are final
    private final void foo() {
    }
}

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.unnecessary.UselessOverridingMethodRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_unnecessary.html#uselessoverridingmethod"
         message="Overriding method merely calls super"
         name="UselessOverridingMethod"
         since="3.3">
      <description>
The overriding method merely calls the same method defined in a superclass.
    </description>
      <priority>3</priority>
      <example>

public void foo(String bar) {
    super.foo(bar);      // why bother overriding?
}

public String foo() {
    return super.foo();  // why bother overriding?
}

@Id
public Long getId() {
    return super.getId();  // OK if 'ignoreAnnotations' is false, which is the default behavior
}

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.unnecessary.UselessOperationOnImmutableRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_unnecessary.html#uselessoperationonimmutable"
         message="An operation on an Immutable object (String, BigDecimal or BigInteger) won't change the object itself"
         name="UselessOperationOnImmutable"
         since="3.5">
      <description>
An operation on an Immutable object (String, BigDecimal or BigInteger) won't change the object itself
since the result of the operation is a new object. Therefore, ignoring the operation result is an error.
    </description>
      <priority>3</priority>
      <example>

import java.math.*;

class Test {
    void method1() {
        BigDecimal bd=new BigDecimal(10);
        bd.add(new BigDecimal(5));      // this will trigger the rule
    }
    void method2() {
        BigDecimal bd=new BigDecimal(10);
        bd = bd.add(new BigDecimal(5)); // this won't trigger the rule
    }
}

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_unnecessary.html#unusednullcheckinequals"
         language="java"
         message="Invoke equals() on the object you''ve already ensured is not null"
         name="UnusedNullCheckInEquals"
         since="3.5">
      <description>
After checking an object reference for null, you should invoke equals() on that object rather than passing it to another object's equals() method.
    </description>
      <priority>3</priority>
      <properties>
        <property name="xpath">
            <value>

(//PrimaryPrefix[ends-with(Name/@Image, '.equals') and Name/@Image != 'Arrays.equals'] | //PrimarySuffix[@Image='equals' and not(../PrimaryPrefix/Literal)])
 /following-sibling::PrimarySuffix/Arguments/ArgumentList/Expression
 /PrimaryExpression[count(PrimarySuffix)=0]/PrimaryPrefix
 /Name[@Image = ./../../../../../../../../../../Expression/ConditionalAndExpression
 /EqualityExpression[@Image="!=" and count(./preceding-sibling::*)=0 and
 ./PrimaryExpression/PrimaryPrefix/Literal/NullLiteral]
  /PrimaryExpression/PrimaryPrefix/Name/@Image]

            </value>
        </property>
      </properties>
      <example>

public class Test {

    public String method1() { return "ok";}
    public String method2() { return null;}

    public void method(String a) {
        String b;
        // I don't know it method1() can be "null"
        // but I know "a" is not null..
        // I'd better write a.equals(method1())

        if (a!=null &amp;&amp; method1().equals(a)) { // will trigger the rule
            //whatever
        }

        if (method1().equals(a) &amp;&amp; a != null) { // won't trigger the rule
            //whatever
        }

        if (a!=null &amp;&amp; method1().equals(b)) { // won't trigger the rule
            //whatever
        }

        if (a!=null &amp;&amp; "LITERAL".equals(a)) { // won't trigger the rule
            //whatever
        }

        if (a!=null &amp;&amp; !a.equals("go")) { // won't trigger the rule
            a=method2();
            if (method1().equals(a)) {
                //whatever
            }
        }
    }
}

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_unnecessary.html#uselessparentheses"
         language="java"
         message="Useless parentheses."
         name="UselessParentheses"
         since="5.0">
      <description>Useless parentheses should be removed.</description>
      <priority>4</priority>
      <properties>
         <property name="xpath">
            <value>
          
//Expression[not(parent::PrimaryPrefix)]/PrimaryExpression[count(*)&gt;1]
  /PrimaryPrefix/Expression
    [not(./CastExpression)]
    [not(./ConditionalExpression[@Ternary='true'])]
    [not(./AdditiveExpression[//Literal[@StringLiteral='true']])]
|
//Expression[not(parent::PrimaryPrefix)]/PrimaryExpression[count(*)=1]
  /PrimaryPrefix/Expression
|
//Expression/ConditionalAndExpression/PrimaryExpression/PrimaryPrefix/Expression[
    count(*)=1 and
    count(./CastExpression)=0 and
    count(./EqualityExpression/MultiplicativeExpression)=0 and
    count(./ConditionalExpression[@Ternary='true'])=0 and
    count(./ConditionalOrExpression)=0]
|
//Expression/ConditionalOrExpression/PrimaryExpression/PrimaryPrefix/Expression[
    count(*)=1 and
    not(./CastExpression) and
    not(./ConditionalExpression[@Ternary='true']) and
    not(./EqualityExpression/MultiplicativeExpression)]
|
//Expression/ConditionalExpression/PrimaryExpression/PrimaryPrefix/Expression[
    count(*)=1 and
    not(./CastExpression) and
    not(./EqualityExpression)]
|
//Expression/AdditiveExpression[not(./PrimaryExpression/PrimaryPrefix/Literal[@StringLiteral='true'])]
  /PrimaryExpression[1]/PrimaryPrefix/Expression[
    count(*)=1 and
    not(./CastExpression) and
    not(./AdditiveExpression[@Image = '-']) and
    not(./ShiftExpression) and
    not(./RelationalExpression) and
    not(./InstanceOfExpression) and
    not(./EqualityExpression) and
    not(./AndExpression) and
    not(./ExclusiveOrExpression) and
    not(./InclusiveOrExpression) and
    not(./ConditionalAndExpression) and
    not(./ConditionalOrExpression) and
    not(./ConditionalExpression)]
|
//Expression/EqualityExpression/PrimaryExpression/PrimaryPrefix/Expression[
    count(*)=1 and
    not(./CastExpression) and
    not(./AndExpression) and
    not(./InclusiveOrExpression) and
    not(./ExclusiveOrExpression) and
    not(./ConditionalExpression) and
    not(./ConditionalAndExpression) and
    not(./ConditionalOrExpression) and
    not(./EqualityExpression)]
          
          </value>
         </property>
      </properties>
      <example>

public class Foo {

    private int _bar1;
    private Integer _bar2;

    public void setBar(int n) {
        _bar1 = Integer.valueOf((n)); // here
        _bar2 = (n); // and here
    }
}

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_unnecessary.html#uselessqualifiedthis"
         language="java"
         message="Useless qualified this usage in the same class."
         name="UselessQualifiedThis"
         since="5.4.0">
      <description>Look for qualified this usages in the same class.</description>
      <priority>3</priority>
      <properties>
        <property name="xpath">
            <value>

//PrimaryExpression
[PrimaryPrefix/Name[@Image]]
[PrimarySuffix[@Arguments='false']]
[not(PrimarySuffix/MemberSelector)]
[ancestor::ClassOrInterfaceBodyDeclaration[1][@AnonymousInnerClass='false']]
/PrimaryPrefix/Name[@Image = ancestor::ClassOrInterfaceDeclaration[1]/@Image]

            </value>
        </property>
      </properties>
      <example>

public class Foo {
    final Foo otherFoo = Foo.this;  // use "this" directly

    public void doSomething() {
         final Foo anotherFoo = Foo.this;  // use "this" directly
    }

    private ActionListener returnListener() {
        return new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                doSomethingWithQualifiedThis(Foo.this);  // This is fine
            }
        };
    }

    private class Foo3 {
        final Foo myFoo = Foo.this;  // This is fine
    }

    private class Foo2 {
        final Foo2 myFoo2 = Foo2.this;  // Use "this" direclty
    }
}

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.unnecessary.UnnecessaryModifierRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_unnecessary.html#unnecessarymodifier"
         language="java"
         message="Avoid modifiers which are implied by the context"
         name="UnnecessaryModifier"
         since="1.02">
      <description>
Fields in interfaces and annotations are automatically `public static final`, and methods are `public abstract`.
Classes, interfaces or annotations nested in an interface or annotation are automatically `public static`
(all nested interfaces and annotations are automatically static).
Nested enums are automatically `static`.
For historical reasons, modifiers which are implied by the context are accepted by the compiler, but are superfluous.
    </description>
      <priority>3</priority>
      <example>

public @interface Annotation {
    public abstract void bar();     // both abstract and public are ignored by the compiler
    public static final int X = 0;  // public, static, and final all ignored
    public static class Bar {}      // public, static ignored
    public static interface Baz {}  // ditto
}
public interface Foo {
    public abstract void bar();     // both abstract and public are ignored by the compiler
    public static final int X = 0;  // public, static, and final all ignored
    public static class Bar {}      // public, static ignored
    public static interface Baz {}  // ditto
}
public class Bar {
    public static interface Baz {}  // static ignored
    public static enum FoorBar {    // static ignored
        FOO;
    }
}

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.codesize.NPathComplexityRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_codesize.html#npathcomplexity"
         message="The method {0}() has an NPath complexity of {1}"
         name="NPathComplexity"
         since="3.9">
      <description>
The NPath complexity of a method is the number of acyclic execution paths through that method.
A threshold of 200 is generally considered the point where measures should be taken to reduce 
complexity and increase readability.
   </description>
     <priority>3</priority>
      <example>
 
void bar() {    // this is something more complex than it needs to be,
    if (y) {   // it should be broken down into smaller methods or functions
        for (j = 0; j &lt; m; j++) {
            if (j &gt; r) {
                doSomething();
                while (f &lt; 5 ) {
                    anotherThing();
                    f -= 27;
                }
            } else {
                tryThis();
            }
        }
    }
    if ( r - n &gt; 45) {
       while (doMagic()) {
          findRabbits();
       }
    }
    try {
        doSomethingDangerous();
    } catch (Exception ex) {
        makeAmends();
    } finally {
        dontDoItAgain();
    }
}
 
    </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.codesize.ExcessiveMethodLengthRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_codesize.html#excessivemethodlength"
         message="Avoid really long methods."
         name="ExcessiveMethodLength"
         since="0.6">
      <description>
When methods are excessively long this usually indicates that the method is doing more than its
name/signature might suggest. They also become challenging for others to digest since excessive 
scrolling causes readers to lose focus.
Try to reduce the method length by creating helper methods and removing any copy/pasted code.
   </description>
     <priority>3</priority>
      <example>

public void doSomething() {
    System.out.println("Hello world!");
    System.out.println("Hello world!");
    // 98 copies omitted for brevity.
}

   </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.codesize.ExcessiveParameterListRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_codesize.html#excessiveparameterlist"
         message="Avoid long parameter lists."
         name="ExcessiveParameterList"
         since="0.9">
      <description>
Methods with numerous parameters are a challenge to maintain, especially if most of them share the
same datatype. These situations usually denote the need for new objects to wrap the numerous parameters.
   </description>
     <priority>3</priority>
      <example>

public void addPerson(      // too many arguments liable to be mixed up
    int birthYear, int birthMonth, int birthDate, int height, int weight, int ssn) {

    . . . .
}
 
public void addPerson(      // preferred approach
    Date birthdate, BodyMeasurements measurements, int ssn) {

    . . . .
}

   </example>

   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.codesize.ExcessiveClassLengthRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_codesize.html#excessiveclasslength"
         message="Avoid really long classes."
         name="ExcessiveClassLength"
         since="0.6">
      <description>
Excessive class file lengths are usually indications that the class may be burdened with excessive 
responsibilities that could be provided by external classes or functions. In breaking these methods
apart the code becomes more manageable and ripe for reuse.
   </description>
     <priority>3</priority>
      <example>

public class Foo {
    public void bar1() {
        // 1000 lines of code
    }
    public void bar2() {
        // 1000 lines of code
    }
    public void bar3() {
        // 1000 lines of code
    }

    public void barN() {
        // 1000 lines of code
    }
}

   </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.codesize.CyclomaticComplexityRule"
         deprecated="true"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_codesize.html#cyclomaticcomplexity"
         message="The {0} ''{1}'' has a Cyclomatic Complexity of {2}."
         name="CyclomaticComplexity"
         since="1.03">
      <description>
Complexity directly affects maintenance costs is determined by the number of decision points in a method 
plus one for the method entry.  The decision points include 'if', 'while', 'for', and 'case labels' calls.  
Generally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote
high complexity, and 11+ is very high complexity.
   </description>
      <priority>3</priority>
      <example>

public class Foo {      // This has a Cyclomatic Complexity = 12
1   public void example()  {
2       if (a == b)  {
3           if (a1 == b1) {
                fiddle();
4           } else if a2 == b2) {
                fiddle();
            }  else {
                fiddle();
            }
5       } else if (c == d) {
6           while (c == d) {
                fiddle();
            }
7        } else if (e == f) {
8           for (int n = 0; n &lt; h; n++) {
                fiddle();
            }
        } else{
            switch (z) {
9               case 1:
                    fiddle();
                    break;
10              case 2:
                    fiddle();
                    break;
11              case 3:
                    fiddle();
                    break;
12              default:
                    fiddle();
                    break;
            }
        }
    }
}

   </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.codesize.StdCyclomaticComplexityRule"
         deprecated="true"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_codesize.html#stdcyclomaticcomplexity"
         message="The {0} ''{1}'' has a Standard Cyclomatic Complexity of {2}."
         name="StdCyclomaticComplexity"
         since="5.1.2">
      <description>
Complexity directly affects maintenance costs is determined by the number of decision points in a method 
plus one for the method entry.  The decision points include 'if', 'while', 'for', and 'case labels' calls.  
Generally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote
high complexity, and 11+ is very high complexity.
   </description>
      <priority>3</priority>
      <example>

public class Foo {    // This has a Cyclomatic Complexity = 12
1   public void example()  {
2       if (a == b || (c == d &amp;&amp; e == f))  { // Only one
3           if (a1 == b1) {
                fiddle();
4           } else if a2 == b2) {
                fiddle();
            }  else {
                fiddle();
            }
5       } else if (c == d) {
6           while (c == d) {
                fiddle();
            }
7        } else if (e == f) {
8           for (int n = 0; n &lt; h; n++) {
                fiddle();
            }
        } else{
            switch (z) {
9               case 1:
                    fiddle();
                    break;
10              case 2:
                    fiddle();
                    break;
11              case 3:
                    fiddle();
                    break;
12              default:
                    fiddle();
                    break;
            }
        }
    }
}

   </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.codesize.ModifiedCyclomaticComplexityRule"
         deprecated="true"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_codesize.html#modifiedcyclomaticcomplexity"
         message="The {0} ''{1}'' has a Modified Cyclomatic Complexity of {2}."
         name="ModifiedCyclomaticComplexity"
         since="5.1.2">
      <description>
Complexity directly affects maintenance costs is determined by the number of decision points in a method 
plus one for the method entry.  The decision points include 'if', 'while', 'for', and 'case labels' calls.  
Generally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote
high complexity, and 11+ is very high complexity. Modified complexity treats switch statements as a single
decision point.
   </description>
      <priority>3</priority>
      <example>

public class Foo {    // This has a Cyclomatic Complexity = 9
1   public void example()  {
2       if (a == b)  {
3           if (a1 == b1) {
                fiddle();
4           } else if a2 == b2) {
                fiddle();
            }  else {
                fiddle();
            }
5       } else if (c == d) {
6           while (c == d) {
                fiddle();
            }
7        } else if (e == f) {
8           for (int n = 0; n &lt; h; n++) {
                fiddle();
            }
        } else{
9           switch (z) {
                case 1:
                    fiddle();
                    break;
                case 2:
                    fiddle();
                    break;
                case 3:
                    fiddle();
                    break;
                default:
                    fiddle();
                    break;
            }
        }
    }
}

   </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.codesize.ExcessivePublicCountRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_codesize.html#excessivepubliccount"
         message="This class has a bunch of public methods and attributes"
         name="ExcessivePublicCount"
         since="1.04">
      <description>
Classes with large numbers of public methods and attributes require disproportionate testing efforts
since combinational side effects grow rapidly and increase risk. Refactoring these classes into
smaller ones not only increases testability and reliability but also allows new variations to be
developed easily.
    </description>
      <priority>3</priority>
      <example>
    
public class Foo {
    public String value;
    public Bar something;
    public Variable var;
    // [... more more public attributes ...]

    public void doWork() {}
    public void doMoreWork() {}
    public void doWorkAgain() {}
    // [... more more public methods ...]
}
    
    </example>
    </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.codesize.TooManyFieldsRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_codesize.html#toomanyfields"
         message="Too many fields"
         name="TooManyFields"
         since="3.0">
      <description>
Classes that have too many fields can become unwieldy and could be redesigned to have fewer fields,
possibly through grouping related fields in new objects.  For example, a class with individual 
city/state/zip fields could park them within a single Address field.
      </description>
        <priority>3</priority>
      <example>
   
public class Person {   // too many separate fields
   int birthYear;
   int birthMonth;
   int birthDate;
   float height;
   float weight;
}

public class Person {   // this is more manageable
   Date birthDate;
   BodyMeasurements measurements;
}
   
      </example>
    </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.codesize.NcssMethodCountRule"
         deprecated="true"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_codesize.html#ncssmethodcount"
         message="The method {0}() has an NCSS line count of {1}"
         name="NcssMethodCount"
         since="3.9">
      <description>
This rule uses the NCSS (Non-Commenting Source Statements) algorithm to determine the number of lines
of code for a given method. NCSS ignores comments, and counts actual statements. Using this algorithm,
lines of code that are split are counted as one.
    </description>
      <priority>3</priority>
      <example>

public class Foo extends Bar {
    public int methd() {
        super.methd();




        //this method only has 1 NCSS lines
        return 1;
    }
}

   </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.codesize.NcssTypeCountRule"
         deprecated="true"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_codesize.html#ncsstypecount"
         message="The type has an NCSS line count of {0}"
         name="NcssTypeCount"
         since="3.9">
      <description>
This rule uses the NCSS (Non-Commenting Source Statements) algorithm to determine the number of lines
of code for a given type. NCSS ignores comments, and counts actual statements. Using this algorithm,
lines of code that are split are counted as one.
    </description>
      <priority>3</priority>
      <example>

public class Foo extends Bar {
    public Foo() {
        //this class only has 6 NCSS lines
        super();





        super.foo();
    }
}

   </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.codesize.NcssConstructorCountRule"
         deprecated="true"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_codesize.html#ncssconstructorcount"
         message="The constructor with {0} parameters has an NCSS line count of {1}"
         name="NcssConstructorCount"
         since="3.9">
      <description>
This rule uses the NCSS (Non-Commenting Source Statements) algorithm to determine the number of lines
of code for a given constructor. NCSS ignores comments, and counts actual statements. Using this algorithm,
lines of code that are split are counted as one.
    </description>
      <priority>3</priority>
      <example>

public class Foo extends Bar {
    public Foo() {
        super();





        //this constructor only has 1 NCSS lines
        super.foo();
    }
}

   </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.codesize.NcssCountRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_codesize.html#ncsscount"
         message="The {0} ''{1}'' has a NCSS line count of {2}."
         metrics="true"
         name="NcssCount"
         since="6.0">
        <description>
            This rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines
            of code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual
            statements. For more details on the calculation, see the documentation of
            the [NCSS metric](/pmd_java_metrics_index.html#non-commenting-source-statements-ncss).
        </description>
        <priority>3</priority>
        <example>
            
import java.util.Collections;       // +0
import java.io.IOException;         // +0

class Foo {                         // +1, total Ncss = 12

  public void bigMethod()           // +1
      throws IOException {
    int x = 0, y = 2;               // +1
    boolean a = false, b = true;    // +1

    if (a || b) {                   // +1
      try {                         // +1
        do {                        // +1
          x += 2;                   // +1
        } while (x &lt; 12);

        System.exit(0);             // +1
      } catch (IOException ioe) {   // +1
        throw new PatheticFailException(ioe); // +1
      }
    } else {
      assert false;                 // +1
    }
  }
}

        </example>
    </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_codesize.html#toomanymethods"
         language="java"
         message="This class has too many methods, consider refactoring it."
         name="TooManyMethods"
         since="4.2">
        <description>
A class with too many methods is probably a good suspect for refactoring, in order to reduce its
complexity and find a way to have more fine grained objects.
        </description>
        <priority>3</priority>
        <properties>
                <property description="The method count reporting threshold" max="1000" min="1"
                   name="maxmethods"
                   type="Integer"
                   value="10"/>
                <property name="xpath">
                <value>
                    <!--  FIXME: Refine XPath to discard 'get' and 'set' methods with Block no more than 3 lines,
                                something like this:
                                    not (
                                            (
                                                starts-with(@Image,'get')
                                                or
                                                starts-with(@Image,'set')
                                                or
                                                starts-with(@Image,'is')
                                            )
                                            and (
                                                    (
                                                        (../Block/attribute::endLine)
                                                         -
                                                        (../Block/attribute::beginLine)
                                                    ) <= 3
                                            )
                                        )
                                This will avoid discarding 'real' method...
                     -->
                    
 //ClassOrInterfaceDeclaration/ClassOrInterfaceBody
     [
      count(./ClassOrInterfaceBodyDeclaration/MethodDeclaration/MethodDeclarator[
         not (
                starts-with(@Image,'get')
                or
                starts-with(@Image,'set')
                or
                starts-with(@Image,'is')
            )
      ]) &gt; $maxmethods
   ]
                    
                </value>
            </property>
        </properties>
    </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.strings.AvoidDuplicateLiteralsRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_strings.html#avoidduplicateliterals"
         message="The String literal {0} appears {1} times in this file; the first occurrence is on line {2}"
         name="AvoidDuplicateLiterals"
         since="1.0">
      <description>
Code containing duplicate String literals can usually be improved by declaring the String as a constant field.
    </description>
      <priority>3</priority>
      <example>

private void bar() {
     buz("Howdy");
     buz("Howdy");
     buz("Howdy");
     buz("Howdy");
}
private void buz(String x) {}

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.strings.StringInstantiationRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_strings.html#stringinstantiation"
         message="Avoid instantiating String objects; this is usually unnecessary."
         name="StringInstantiation"
         since="1.0">
      <description>
Avoid instantiating String objects; this is usually unnecessary since they are immutable and can be safely shared.
    </description>
      <priority>2</priority>
      <example>

private String bar = new String("bar"); // just do a String bar = "bar";

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.strings.StringToStringRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_strings.html#stringtostring"
         message="Avoid calling toString() on String objects; this is unnecessary."
         name="StringToString"
         since="1.0">
      <description>
Avoid calling toString() on objects already known to be string instances; this is unnecessary.
    </description>
      <priority>3</priority>
      <example>

private String baz() {
    String bar = "howdy";
    return bar.toString();
}

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.strings.InefficientStringBufferingRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_strings.html#inefficientstringbuffering"
         message="Avoid concatenating nonliterals in a StringBuffer/StringBuilder constructor or append()."
         name="InefficientStringBuffering"
         since="3.4">
      <description>
Avoid concatenating non-literals in a StringBuffer constructor or append() since intermediate buffers will
need to be be created and destroyed by the JVM.
    </description>
      <priority>3</priority>
      <example>

// Avoid this, two buffers are actually being created here
StringBuffer sb = new StringBuffer("tmp = "+System.getProperty("java.io.tmpdir"));

// do this instead
StringBuffer sb = new StringBuffer("tmp = ");
sb.append(System.getProperty("java.io.tmpdir"));

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.strings.UnnecessaryCaseChangeRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_strings.html#unnecessarycasechange"
         message="Using equalsIgnoreCase() is cleaner than using toUpperCase/toLowerCase().equals()."
         name="UnnecessaryCaseChange"
         since="3.3">
      <description>
Using equalsIgnoreCase() is faster than using toUpperCase/toLowerCase().equals()
    </description>
      <priority>3</priority>
      <example>

boolean answer1 = buz.toUpperCase().equals("baz");              // should be buz.equalsIgnoreCase("baz")

boolean answer2 = buz.toUpperCase().equalsIgnoreCase("baz");    // another unnecessary toUpperCase()

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.strings.UseStringBufferLengthRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_strings.html#usestringbufferlength"
         message="This is an inefficient use of StringBuffer.toString; call StringBuffer.length instead."
         name="UseStringBufferLength"
         since="3.4">
      <description>
Use StringBuffer.length() to determine StringBuffer length rather than using StringBuffer.toString().equals("")
or StringBuffer.toString().length() == ...
    </description>
      <priority>3</priority>
      <example>

StringBuffer sb = new StringBuffer();

if (sb.toString().equals("")) {}        // inefficient

if (sb.length() == 0) {}                // preferred

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.strings.AppendCharacterWithCharRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_strings.html#appendcharacterwithchar"
         message="Avoid appending characters as strings in StringBuffer.append."
         name="AppendCharacterWithChar"
         since="3.5">
      <description>
Avoid concatenating characters as strings in StringBuffer/StringBuilder.append methods.
    </description>
      <priority>3</priority>
      <example>

StringBuffer sb = new StringBuffer();
sb.append("a");     // avoid this

StringBuffer sb = new StringBuffer();
sb.append('a');     // use this instead

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.strings.ConsecutiveAppendsShouldReuseRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_strings.html#consecutiveappendsshouldreuse"
         language="java"
         message="StringBuffer (or StringBuilder).append is called consecutively without reusing the target variable."
         name="ConsecutiveAppendsShouldReuse"
         since="5.1">
      <description>
Consecutive calls to StringBuffer/StringBuilder .append should be chained, reusing the target object. This can improve the performance
by producing a smaller bytecode, reducing overhead and improving inlining. A complete analysis can be found [here](https://github.com/pmd/pmd/issues/202#issuecomment-274349067)
    </description>
      <priority>3</priority>
      <example>

String foo = " ";

StringBuffer buf = new StringBuffer();
buf.append("Hello"); // poor
buf.append(foo);
buf.append("World");

StringBuffer buf = new StringBuffer();
buf.append("Hello").append(foo).append("World"); // good

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.strings.ConsecutiveLiteralAppendsRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_strings.html#consecutiveliteralappends"
         message="StringBuffer (or StringBuilder).append is called {0} consecutive times with literal Strings. Use a single append with a single combined String."
         name="ConsecutiveLiteralAppends"
         since="3.5">
      <description>
Consecutively calling StringBuffer/StringBuilder.append with String literals
    </description>
      <priority>3</priority>
      <example>

StringBuffer buf = new StringBuffer();
buf.append("Hello").append(" ").append("World");    // poor
buf.append("Hello World");                          // good

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.strings.UseIndexOfCharRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_strings.html#useindexofchar"
         message="String.indexOf(char) is faster than String.indexOf(String)."
         name="UseIndexOfChar"
         since="3.5">
      <description>
Use String.indexOf(char) when checking for the index of a single character; it executes faster.
    </description>
      <priority>3</priority>
      <example>

String s = "hello world";
// avoid this
if (s.indexOf("d") {}
// instead do this
if (s.indexOf('d') {}

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.strings.InefficientEmptyStringCheckRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_strings.html#inefficientemptystringcheck"
         message="String.trim().length()==0 is an inefficient way to validate an empty String."
         name="InefficientEmptyStringCheck"
         since="3.6">
      <description>
String.trim().length() is an inefficient way to check if a String is really empty, as it
creates a new String object just to check its size. Consider creating a static function that
loops through a string, checking Character.isWhitespace() on each character and returning
false if a non-whitespace character is found. You can refer to Apache's StringUtils#isBlank (in commons-lang),
Spring's StringUtils#hasText (in the Spring framework) or Google's CharMatcher#whitespace (in Guava) for
existing implementations.
    </description>
      <priority>3</priority>
      <example>

public void bar(String string) {
    if (string != null &amp;&amp; string.trim().size() &gt; 0) {
        doSomething();
    }
}

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.strings.InsufficientStringBufferDeclarationRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_strings.html#insufficientstringbufferdeclaration"
         message="StringBuffer constructor is initialized with size {0}, but has at least {1} characters appended."
         name="InsufficientStringBufferDeclaration"
         since="3.6">
      <description>
Failing to pre-size a StringBuffer or StringBuilder properly could cause it to re-size many times
during runtime. This rule attempts to determine the total number the characters that are actually 
passed into StringBuffer.append(), but represents a best guess "worst case" scenario. An empty
StringBuffer/StringBuilder constructor initializes the object to 16 characters. This default
is assumed if the length of the constructor can not be determined.
    </description>
      <priority>3</priority>
      <example>

StringBuffer bad = new StringBuffer();
bad.append("This is a long string that will exceed the default 16 characters");

StringBuffer good = new StringBuffer(41);
good.append("This is a long string, which is pre-sized");

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.strings.UselessStringValueOfRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_strings.html#uselessstringvalueof"
         message="No need to call String.valueOf to append to a string."
         name="UselessStringValueOf"
         since="3.8">
      <description>
No need to call String.valueOf to append to a string; just use the valueOf() argument directly.
    </description>
      <priority>3</priority>
      <example>

public String convert(int i) {
    String s;
    s = "a" + String.valueOf(i);    // not required
    s = "a" + i;                    // preferred approach
    return s;
}

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_strings.html#stringbufferinstantiationwithchar"
         language="java"
         message="Do not instantiate a StringBuffer or StringBuilder with a char"
         name="StringBufferInstantiationWithChar"
         since="3.9">
      <description>
Individual character values provided as initialization arguments will be converted into integers.
This can lead to internal buffer sizes that are larger than expected. Some examples:

```
new StringBuffer()      //  16
new StringBuffer(6)     //  6
new StringBuffer("hello world")  // 11 + 16 = 27
new StringBuffer('A')   //  chr(A) = 65
new StringBuffer("A")   //  1 + 16 = 17 

new StringBuilder()     //  16
new StringBuilder(6)    //  6
new StringBuilder("hello world")  // 11 + 16 = 27
new StringBuilder('C')   //  chr(C) = 67
new StringBuilder("A")   //  1 + 16 = 17
```
    </description>
      <priority>4</priority>
      <properties>
        <property name="xpath">
            <value>

//AllocationExpression/ClassOrInterfaceType
[@Image='StringBuffer' or @Image='StringBuilder']
/../Arguments/ArgumentList/Expression/PrimaryExpression
/PrimaryPrefix/
Literal
  [starts-with(@Image, "'")]
  [ends-with(@Image, "'")]

            </value>
        </property>
      </properties>
      <example>

// misleading instantiation, these buffers
// are actually sized to 99 characters long
StringBuffer  sb1 = new StringBuffer('c');
StringBuilder sb2 = new StringBuilder('c');

// in these forms, just single characters are allocated
StringBuffer  sb3 = new StringBuffer("c");
StringBuilder sb4 = new StringBuilder("c");

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_strings.html#useequalstocomparestrings"
         language="java"
         message="Use equals() to compare strings instead of ''=='' or ''!=''"
         name="UseEqualsToCompareStrings"
         since="4.1">
      <description>
Using '==' or '!=' to compare strings only works if intern version is used on both sides.
Use the equals() method instead.
    </description>
      <priority>3</priority>
      <properties>
        <property name="xpath">
            <value>

//EqualityExpression/PrimaryExpression
[(PrimaryPrefix/Literal
   [starts-with(@Image, '"')]
   [ends-with(@Image, '"')]
and count(PrimarySuffix) = 0)]

            </value>
        </property>
      </properties>
      <example>

public boolean test(String s) {
    if (s == "one") return true;        // unreliable
    if ("two".equals(s)) return true;   // better
    return false;
}

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_strings.html#avoidstringbufferfield"
         language="java"
         message="StringBuffers can grow quite a lot, and so may become a source of memory leak (if the owning class has a long life time)."
         name="AvoidStringBufferField"
         since="4.2">
      <description>
StringBuffers/StringBuilders can grow considerably, and so may become a source of memory leaks
if held within objects with long lifetimes.
    </description>
      <priority>3</priority>
      <properties>
        <property name="xpath">
            <value>

//FieldDeclaration/Type/ReferenceType/ClassOrInterfaceType[@Image = 'StringBuffer' or @Image = 'StringBuilder']

            </value>
        </property>
      </properties>
      <example>

public class Foo {
    private StringBuffer buffer;    // potential memory leak as an instance variable;
}

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_naming.html#shortvariable"
         language="java"
         message="Avoid variables with short names like {0}"
         name="ShortVariable"
         since="0.3">
      <description>
Fields, local variables, or parameter names that are very short are not helpful to the reader.
    </description>
      <priority>3</priority>
      <properties>
        <property description="Number of characters that are required as a minimum for a variable name."
                   max="100"
                   min="1"
                   name="minimum"
                   type="Integer"
                   value="3"/>
        <property name="xpath">
            <value>

//VariableDeclaratorId[string-length(@Image) &lt; $minimum]
 [not(ancestor::ForInit)]
 [not(../../VariableDeclarator and ../../../LocalVariableDeclaration and ../../../../ForStatement)]
 [not((ancestor::FormalParameter) and (ancestor::TryStatement))]

            </value>
        </property>
      </properties>
      <example>

public class Something {
    private int q = 15;                         // field - too short
    public static void main( String as[] ) {    // formal arg - too short
        int r = 20 + q;                         // local var - too short
        for (int i = 0; i &lt; 10; i++) {          // not a violation (inside 'for' loop)
            r += q;
        }
        for (Integer i : numbers) {             // not a violation (inside 'for-each' loop)
            r += q;
        }
    }
}

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_naming.html#longvariable"
         language="java"
         message="Avoid excessively long variable names like {0}"
         name="LongVariable"
         since="0.3">
      <description>
Fields, formal arguments, or local variable names that are too long can make the code difficult to follow.
    </description>
      <priority>3</priority>
      <properties>
        <property description="The variable length reporting threshold" max="100" min="1"
                   name="minimum"
                   type="Integer"
                   value="17"/>
        <property name="xpath">
            <value>

//VariableDeclaratorId[string-length(@Image) &gt; $minimum]

            </value>
        </property>
      </properties>
      <example>

public class Something {
    int reallyLongIntName = -3;             // VIOLATION - Field
    public static void main( String argumentsList[] ) { // VIOLATION - Formal
        int otherReallyLongName = -5;       // VIOLATION - Local
        for (int interestingIntIndex = 0;   // VIOLATION - For
             interestingIntIndex &lt; 10;
             interestingIntIndex ++ ) {
    }
}

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_naming.html#shortmethodname"
         language="java"
         message="Avoid using short method names"
         name="ShortMethodName"
         since="0.3">
      <description>
Method names that are very short are not helpful to the reader.
    </description>
      <priority>3</priority>
      <properties>
        <property description="Number of characters that are required as a minimum for a method name."
                   max="100"
                   min="1"
                   name="minimum"
                   type="Integer"
                   value="3"/>
        <property name="xpath">
            <value>

//MethodDeclarator[string-length(@Image) &lt; $minimum]

            </value>
        </property>
      </properties>
      <example>

public class ShortMethod {
    public void a( int i ) { // Violation
    }
}

     </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.naming.VariableNamingConventionsRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_naming.html#variablenamingconventions"
         message="{0} variable {1} should begin with {2}"
         name="VariableNamingConventions"
         since="1.2">
      <description>
A variable naming conventions rule - customize this to your liking.  Currently, it
checks for final variables that should be fully capitalized and non-final variables
that should not include underscores.
    </description>
      <priority>1</priority>
      <example>

public class Foo {
    public static final int MY_NUM = 0;
    public String myTest = "";
    DataModule dmTest = new DataModule();
}

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.naming.MethodNamingConventionsRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_naming.html#methodnamingconventions"
         message="Method name does not begin with a lower case character."
         name="MethodNamingConventions"
         since="1.2">
      <description>
Method names should always begin with a lower case character, and should not contain underscores.
    </description>
      <priority>1</priority>
      <example>

public class Foo {
    public void fooStuff() {
    }
}

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.naming.ClassNamingConventionsRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_naming.html#classnamingconventions"
         message="Class names should begin with an uppercase character"
         name="ClassNamingConventions"
         since="1.2">
      <description>
Class names should always begin with an upper case character.
    </description>
      <priority>1</priority>
      <example>

public class Foo {}

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_naming.html#abstractnaming"
         language="java"
         message="Abstract classes should be named 'AbstractXXX'"
         name="AbstractNaming"
         since="1.4">
      <description>
Abstract classes should be named 'AbstractXXX'.
    </description>
      <priority>3</priority>
      <properties>
        <property name="xpath">
            <value>

//ClassOrInterfaceDeclaration
 [@Abstract='true' and @Interface='false']
 [not (starts-with(@Image,'Abstract'))]
|
//ClassOrInterfaceDeclaration
 [@Abstract='false']
 [$strict='true']
 [starts-with(@Image, 'Abstract')]

            </value>
        </property>
        <property description="Also flag classes, that are named Abstract, but are not abstract."
                   name="strict"
                   type="Boolean"
                   value="true"/>
      </properties>
      <example>

public abstract class Foo { // should be AbstractFoo
}

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.naming.AvoidDollarSignsRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_naming.html#avoiddollarsigns"
         message="Avoid using dollar signs in variable/method/class/interface names"
         name="AvoidDollarSigns"
         since="1.5">
      <description>
Avoid using dollar signs in variable/method/class/interface names.
    </description>
      <priority>3</priority>
      <example>

public class Fo$o {  // not a recommended name
}

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.naming.MethodWithSameNameAsEnclosingClassRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_naming.html#methodwithsamenameasenclosingclass"
         message="Classes should not have non-constructor methods with the same name as the class"
         name="MethodWithSameNameAsEnclosingClass"
         since="1.5">
      <description>
Non-constructor methods should not have the same name as the enclosing class.
    </description>
      <priority>3</priority>
      <example>

public class MyClass {

    public MyClass() {}         // this is OK because it is a constructor

    public void MyClass() {}    // this is bad because it is a method
}
    
    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.naming.SuspiciousHashcodeMethodNameRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_naming.html#suspicioushashcodemethodname"
         message="The method name and return type are suspiciously close to hashCode()"
         name="SuspiciousHashcodeMethodName"
         since="1.5">
      <description>
The method name and return type are suspiciously close to hashCode(), which may denote an intention
to override the hashCode() method.
    </description>
      <priority>3</priority>
      <example>

public class Foo {
    public int hashcode() { // oops, this probably was supposed to be 'hashCode'
    }
}
    
    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_naming.html#suspiciousconstantfieldname"
         language="java"
         message="The field name indicates a constant but its modifiers do not"
         name="SuspiciousConstantFieldName"
         since="2.0">
      <description>
Field names using all uppercase characters - Sun's Java naming conventions indicating constants - should
be declared as final.
    </description>
      <priority>3</priority>
      <properties>
        <property name="xpath">
            <value>

//ClassOrInterfaceDeclaration[@Interface='false']
 /ClassOrInterfaceBody/ClassOrInterfaceBodyDeclaration/FieldDeclaration
  [@Final='false']
  [VariableDeclarator/VariableDeclaratorId[upper-case(@Image)=@Image]]

            </value>
        </property>
      </properties>
      <example>

public class Foo {
 // this is bad, since someone could accidentally
 // do PI = 2.71828; which is actually e
 // final double PI = 3.16; is ok
  double PI = 3.16;
}

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_naming.html#suspiciousequalsmethodname"
         language="java"
         message="The method name and parameter number are suspiciously close to equals(Object)"
         name="SuspiciousEqualsMethodName"
         since="2.0">
      <description>
The method name and parameter number are suspiciously close to equals(Object), which can denote an
intention to override the equals(Object) method.
    </description>
      <priority>2</priority>
      <properties>
        <property name="xpath">
            <value>

//MethodDeclarator[@Image = 'equals']
[   
    (count(FormalParameters/*) = 1
    and not (FormalParameters/FormalParameter/Type/ReferenceType/ClassOrInterfaceType
        [@Image = 'Object' or @Image = 'java.lang.Object'])
    or not (../ResultType/Type/PrimitiveType[@Image = 'boolean'])
    )  or  (
    count(FormalParameters/*) = 2
    and ../ResultType/Type/PrimitiveType[@Image = 'boolean']
    and FormalParameters//ClassOrInterfaceType[@Image = 'Object' or @Image = 'java.lang.Object']
    and not(../../Annotation/MarkerAnnotation/Name[@Image='Override'])
    )
]
| //MethodDeclarator[@Image = 'equal']
[
    count(FormalParameters/*) = 1
    and FormalParameters/FormalParameter/Type/ReferenceType/ClassOrInterfaceType
        [@Image = 'Object' or @Image = 'java.lang.Object']
]           

            </value>
        </property>
      </properties>
      <example>

public class Foo {
   public int equals(Object o) {
     // oops, this probably was supposed to be boolean equals
   }
   public boolean equals(String s) {
     // oops, this probably was supposed to be equals(Object)
   }
   public boolean equals(Object o1, Object o2) {
     // oops, this probably was supposed to be equals(Object)
   }
}

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.naming.AvoidFieldNameMatchingTypeNameRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_naming.html#avoidfieldnamematchingtypename"
         message="It is somewhat confusing to have a field name matching the declaring class name"
         name="AvoidFieldNameMatchingTypeName"
         since="3.0">
      <description>
It is somewhat confusing to have a field name matching the declaring class name.
This probably means that type and/or field names should be chosen more carefully.
    </description>
      <priority>3</priority>
      <example>

public class Foo extends Bar {
    int foo;    // There is probably a better name that can be used
}

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.naming.AvoidFieldNameMatchingMethodNameRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_naming.html#avoidfieldnamematchingmethodname"
         message="Field {0} has the same name as a method"
         name="AvoidFieldNameMatchingMethodName"
         since="3.0">
      <description>
It can be confusing to have a field name with the same name as a method. While this is permitted, 
having information (field) and actions (method) is not clear naming. Developers versed in 
Smalltalk often prefer this approach as the methods denote accessor methods.
    </description>
      <priority>3</priority>
      <example>

public class Foo {
    Object bar;
    // bar is data or an action or both?
    void bar() {
    }
}

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_naming.html#nopackage"
         language="java"
         message="All classes and interfaces must belong to a named package"
         name="NoPackage"
         since="3.3">
      <description>
Detects when a class or interface does not have a package definition.
    </description>
      <priority>3</priority>
      <properties>
        <property name="xpath">
            <value>

//ClassOrInterfaceDeclaration[count(preceding::PackageDeclaration) = 0]

            </value>
        </property>
      </properties>
      <example>

// no package declaration
public class ClassInDefaultPackage {
}

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_naming.html#packagecase"
         language="java"
         message="Package name contains upper case characters"
         name="PackageCase"
         since="3.3">
      <description>
Detects when a package definition contains uppercase characters.
    </description>
      <priority>3</priority>
      <properties>
        <property name="xpath">
            <value>

//PackageDeclaration/Name[lower-case(@Image)!=@Image]

            </value>
        </property>
      </properties>
      <example>

package com.MyCompany;  // should be lowercase name

public class SomeClass {
}

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_naming.html#misleadingvariablename"
         language="java"
         message="Avoid naming non-fields with the prefix 'm_'"
         name="MisleadingVariableName"
         since="3.4">
      <description>
Detects when a non-field has a name starting with 'm_'.  This usually denotes a field and could be confusing.
    </description>
      <priority>3</priority>
      <properties>
        <property name="xpath">
            <value>

//VariableDeclaratorId
[starts-with(@Image, 'm_')]
[not (../../../FieldDeclaration)]

            </value>
        </property>
      </properties>
      <example>

public class Foo {
    private int m_foo; // OK
    public void bar(String m_baz) { // Bad
      int m_boz = 42; // Bad
    }
}

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_naming.html#booleangetmethodname"
         language="java"
         message="A 'getX()' method which returns a boolean should be named 'isX()'"
         name="BooleanGetMethodName"
         since="4.0">
      <description>
Methods that return boolean results should be named as predicate statements to denote this.
I.e, 'isReady()', 'hasValues()', 'canCommit()', 'willFail()', etc.   Avoid the use of the 'get'
prefix for these methods.
    </description>
      <priority>4</priority>
      <properties>
        <property name="xpath">
            <value>

//MethodDeclaration[
MethodDeclarator[count(FormalParameters/FormalParameter) = 0 or $checkParameterizedMethods = 'true']
                [starts-with(@Image, 'get')]
and
ResultType/Type/PrimitiveType[@Image = 'boolean']
and not(../Annotation//Name[@Image = 'Override'])
]

            </value>
        </property>
        <property description="Check parameterized methods" name="checkParameterizedMethods"
                   type="Boolean"
                   value="false"/>
      </properties>
      <example>

public boolean getFoo();            // bad
public boolean isFoo();             // ok
public boolean getFoo(boolean bar); // ok, unless checkParameterizedMethods=true

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_naming.html#shortclassname"
         language="java"
         message="Avoid short class names like {0}"
         name="ShortClassName"
         since="5.0">
      <description>
Short Classnames with fewer than e.g. five characters are not recommended.
    </description>
      <priority>4</priority>
      <properties>
        <property description="Number of characters that are required as a minimum for a class name."
                   max="100"
                   min="1"
                   name="minimum"
                   type="Integer"
                   value="5"/>
        <property name="xpath">
            <value>

//ClassOrInterfaceDeclaration[string-length(@Image) &lt; $minimum]

            </value>
        </property>
      </properties>
      <example>

public class Foo {
}

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_naming.html#genericsnaming"
         language="java"
         message="Generics names should be a one letter long and upper case."
         name="GenericsNaming"
         since="4.2.6">
      <description>
Names for references to generic values should be limited to a single uppercase letter.
    </description>
      <priority>4</priority>
      <properties>
        <property name="xpath">
            <value>

//TypeDeclaration/ClassOrInterfaceDeclaration/TypeParameters/TypeParameter[
  string-length(@Image) &gt; 1 
  or
  string:upper-case(@Image) != @Image
]

            </value>
        </property>
      </properties>
      <example>

public interface GenericDao&lt;E extends BaseModel, K extends Serializable&gt; extends BaseDao {
    // This is ok...
}

public interface GenericDao&lt;E extends BaseModel, K extends Serializable&gt; {
    // Also this
}

public interface GenericDao&lt;e extends BaseModel, K extends Serializable&gt; {
    // 'e' should be an 'E'
}

public interface GenericDao&lt;EF extends BaseModel, K extends Serializable&gt; {
   // 'EF' is not ok.
}

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.comments.CommentRequiredRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_comments.html#commentrequired"
         message="Comment is required"
         name="CommentRequired"
         since="5.1">
      <description>
Denotes whether comments are required (or unwanted) for specific language elements.
    </description>
      <priority>3</priority>
      <example>

/**
* 
*
* @author Jon Doe
*/

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.comments.CommentSizeRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_comments.html#commentsize"
         message="Comment is too large"
         name="CommentSize"
         since="5.0">
      <description>
Determines whether the dimensions of non-header comments found are within the specified limits.
    </description>
      <priority>3</priority>
      <example>

/**
*
*   too many lines!
*
*
*
*
*
*
*
*
*
*
*
*
*/

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.comments.CommentContentRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_comments.html#commentcontent"
         message="Invalid words or phrases found"
         name="CommentContent"
         since="5.0">
     <description>
A rule for the politically correct... we don't want to offend anyone.
  </description>
      <priority>3</priority>
      <example>
      
//OMG, this is horrible, Bob is an idiot !!!
      
  </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.comments.CommentDefaultAccessModifierRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_comments.html#commentdefaultaccessmodifier"
         message="Missing commented default access modifier"
         name="CommentDefaultAccessModifier"
         since="5.4.0">
      <description>
        To avoid mistakes if we want that a Method, Constructor, Field or Nested class have a default access modifier
        we must add a comment at the beginning of it's declaration.
        By default the comment must be /* default */, if you want another, you have to provide a regexp.
    </description>
      <priority>3</priority>
      <properties>
        <property name="regex">
            <value>
                
\/\*\s+default\s+\*\/
                
            </value>
        </property>
      </properties>
      <example>
        
        public class Foo {
            final String stringValue = "some string";
            String getString() {
               return stringValue;
            }

            class NestedFoo {
            }
        }

        // should be
        public class Foo {
            /* default */ final String stringValue = "some string";
            /* default */ String getString() {
               return stringValue;
            }

            /* default */ class NestedFoo {
            }
        }
        
    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.imports.DuplicateImportsRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_imports.html#duplicateimports"
         message="Avoid duplicate imports such as ''{0}''"
         name="DuplicateImports"
         since="0.5">
      <description>
Duplicate or overlapping import statements should be avoided.
    </description>
      <priority>4</priority>
      <example>

import java.lang.String;
import java.lang.*;
public class Foo {}

    </example>
    </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.imports.DontImportJavaLangRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_imports.html#dontimportjavalang"
         message="Avoid importing anything from the package 'java.lang'"
         name="DontImportJavaLang"
         since="0.5">
      <description>
Avoid importing anything from the package 'java.lang'.  These classes are automatically imported (JLS 7.5.3).
    </description>
      <priority>4</priority>
      <example>

import java.lang.String;    // this is unnecessary

public class Foo {}

// --- in another source code file...

import java.lang.*;         // this is bad

public class Foo {}

    </example>
    </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.imports.UnusedImportsRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_imports.html#unusedimports"
         message="Avoid unused imports such as ''{0}''"
         name="UnusedImports"
         since="1.0">
      <description>
Avoid the use of unused import statements to prevent unwanted dependencies.
    </description>
      <priority>4</priority>
      <example>

// this is bad
import java.io.File;
public class Foo {}

    </example>
    </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.imports.ImportFromSamePackageRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_imports.html#importfromsamepackage"
         message="No need to import a type that lives in the same package"
         name="ImportFromSamePackage"
         since="1.02">
     <description>
There is no need to import a type that lives in the same package.
     </description>
        <priority>3</priority>
     <example>
 
package foo;

import foo.Buz;     // no need for this
import foo.*;       // or this

public class Bar{}

     </example>
     </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_imports.html#toomanystaticimports"
         language="java"
         message="Too many static imports may lead to messy code"
         name="TooManyStaticImports"
         since="4.1">
      <description>
If you overuse the static import feature, it can make your program unreadable and 
unmaintainable, polluting its namespace with all the static members you import. 
Readers of your code (including you, a few months after you wrote it) will not know 
which class a static member comes from (Sun 1.5 Language Guide).
    </description>
      <priority>3</priority>
      <properties>
        <property description="All static imports can be disallowed by setting this to 0"
                   max="100"
                   min="0"
                   name="maximumStaticImports"
                   type="Integer"
                   value="4"/>
        <property name="xpath">
            <value>
.[count(ImportDeclaration[@Static = 'true']) &gt; $maximumStaticImports]
</value>
        </property>
      </properties>
      <example>
import static Lennon;
import static Ringo;
import static George;
import static Paul;
import static Yoko; // Too much !
</example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.imports.UnnecessaryFullyQualifiedNameRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_imports.html#unnecessaryfullyqualifiedname"
         language="java"
         message="Unnecessary use of fully qualified name ''{0}'' due to existing {2}import ''{1}''"
         name="UnnecessaryFullyQualifiedName"
         since="5.0">
      <description>
Import statements allow the use of non-fully qualified names.  The use of a fully qualified name
which is covered by an import statement is redundant.  Consider using the non-fully qualified name.
    </description>
      <priority>4</priority>
      <example>
import java.util.List;

public class Foo {
    private java.util.List list1;   // Unnecessary FQN
    private List list2;             // More appropriate given import of 'java.util.List'
}
</example>
  </rule>
   <rule ref="rulesets/java/migrating.xml/ReplaceVectorWithList"/>
   <rule ref="rulesets/java/migrating.xml/ReplaceHashtableWithMap"/>
   <rule ref="rulesets/java/migrating.xml/ReplaceEnumerationWithIterator"/>
   <rule class="net.sourceforge.pmd.lang.java.rule.unusedcode.UnusedPrivateFieldRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_unusedcode.html#unusedprivatefield"
         language="java"
         message="Avoid unused private fields such as ''{0}''."
         name="UnusedPrivateField"
         since="0.1">
      <description>
Detects when a private field is declared and/or assigned a value, but not used.
    </description>
      <priority>3</priority>
      <example>

public class Something {
    private static int FOO = 2; // Unused
    private int i = 5; // Unused
    private int j = 6;
    public int addOne() {
        return j++;
    }
}

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.unusedcode.UnusedLocalVariableRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_unusedcode.html#unusedlocalvariable"
         language="java"
         message="Avoid unused local variables such as ''{0}''."
         name="UnusedLocalVariable"
         since="0.1">
      <description>
Detects when a local variable is declared and/or assigned, but not used.
    </description>
      <priority>3</priority>
      <example>

public class Foo {
    public void doSomething() {
        int i = 5; // Unused
    }
}

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.unusedcode.UnusedPrivateMethodRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_unusedcode.html#unusedprivatemethod"
         language="java"
         message="Avoid unused private methods such as ''{0}''."
         name="UnusedPrivateMethod"
         since="0.7">
      <description>
Unused Private Method detects when a private method is declared but is unused.
    </description>
      <priority>3</priority>
      <example>

public class Something {
    private void foo() {} // unused
}

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.unusedcode.UnusedFormalParameterRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_unusedcode.html#unusedformalparameter"
         language="java"
         message="Avoid unused {0} parameters such as ''{1}''."
         name="UnusedFormalParameter"
         since="0.8">
      <description>
Avoid passing parameters to methods or constructors without actually referencing them in the method body.
    </description>
      <priority>3</priority>
      <example>

public class Foo {
    private void bar(String howdy) {
        // howdy is not used
    }
}

    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.javabeans.BeanMembersShouldSerializeRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_javabeans.html#beanmembersshouldserialize"
         message="Found non-transient, non-static member. Please mark as transient or provide accessors."
         name="BeanMembersShouldSerialize"
         since="1.1">
      <description>
If a class is a bean, or is referenced by a bean directly or indirectly it needs to be serializable. 
Member variables need to be marked as transient, static, or have accessor methods in the class. Marking 
variables as transient is the safest and easiest modification. Accessor methods should follow the Java 
naming conventions, i.e. for a variable named foo, getFoo() and setFoo() accessor methods should be provided.
    </description>
      <priority>3</priority>
      <example>

private transient int someFoo;  // good, it's transient
private static int otherFoo;    // also OK
private int moreFoo;            // OK, has proper accessors, see below
private int badFoo;             // bad, should be marked transient

private void setMoreFoo(int moreFoo){
      this.moreFoo = moreFoo;
}

private int getMoreFoo(){
      return this.moreFoo;
}


    </example>
  </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_javabeans.html#missingserialversionuid"
         language="java"
         message="Classes implementing Serializable should set a serialVersionUID"
         name="MissingSerialVersionUID"
         since="3.0">
      <description>
Serializable classes should provide a serialVersionUID field.
      </description>
      <priority>3</priority>
      <properties>
          <property name="xpath">
              <value>
    
//ClassOrInterfaceDeclaration
 [
  count(ClassOrInterfaceBody/ClassOrInterfaceBodyDeclaration
   /FieldDeclaration/VariableDeclarator/VariableDeclaratorId[@Image='serialVersionUID']) = 0
and
  count(ImplementsList
   [ClassOrInterfaceType/@Image='Serializable'
   or ClassOrInterfaceType/@Image='java.io.Serializable']) =1
and
   @Abstract = 'false'
]

              </value>
          </property>
      </properties>
      <example>

public class Foo implements java.io.Serializable {
    String name;
    // Define serialization id to avoid serialization related bugs
    // i.e., public static final long serialVersionUID = 4328743;
}

      </example>
  </rule>
</ruleset>